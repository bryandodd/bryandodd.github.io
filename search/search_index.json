{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>This site is a personal project to help organize my thoughts and keep track of notes, side-projects, and other things I find interesting. There may occasionally be something here that others find helpful, so if that's you, you're free to use what you can.</p>"},{"location":"#sendmail_","title":"$ sendmail_","text":"<p>If you need to get in touch for any reason or have a question about something published here, email me at <code>bryan@dodd.dev</code>.</p> <p>To send secure mail, my public key is available on keys.openpgp.org or can be copied below.</p> <p>Public Key Fingerprint</p> <p><code>74BD 90B5 90F9 AA98 4391</code> <code>7073 8330 8CA8 5B65 951C</code></p> <pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nxjMEYpI/kRYJKwYBBAHaRw8BAQdA7C0jjsc9t0pQk4K1dibH+wHAm8pTKXwc19ju\n02IlNOTNG0JyeWFuIERvZGQgPGJyeWFuQGRvZGQuZGV2PsKQBBMWCAA4FiEEdL2Q\ntZD5qphDkXBzgzCMqFtllRwFAmKSP5ECGwEFCwkIBwIGFQoJCAsCBBYCAwECHgEC\nF4AACgkQgzCMqFtllRxdnAD/Tx2csxU56QF2fStkkfos8O6SVU/lyan771Ecw5dO\nk8cA/1XwYbQWk/j78mAiJ8Mv/t0PjZ7XR625ReXvAGs04r8DzjMEYpJOuBYJKwYB\nBAHaRw8BAQdAETJ40PGWaeLeSTDDC1JrpJKdWvUGW1kAxW9WRjRAx3fCwC4EGBYI\nACAWIQR0vZC1kPmqmEORcHODMIyoW2WVHAUCYpJOuAIbAgCBCRCDMIyoW2WVHHYg\nBBkWCAAdFiEEMVS3d/pFUHLywvmxW0hOJFQA2P8FAmKSTrgACgkQW0hOJFQA2P+x\nSQEAkIsqU/cdZ6VN1WVq0DdxD/SCzAXYB6SS/rxmdIHMpMQBAIXpM9er209JheBK\n6s2C5r2aLgN8Y/oWSLSkmZq0cpMGc5kA+K2CAj/lbELQxD2OTKIcfPrF6SBQfTQL\nSyo/cGD/6y0A/3HN2EID0nyBZHor53rDRfVOdIhtuZqKOLFlWoEAcuAIzjMEYpJP\n6BYJKwYBBAHaRw8BAQdA9iswUxld4asRlKcQUX13U3Jd7YcOpn61KwYNaS7OTQzC\neAQYFggAIBYhBHS9kLWQ+aqYQ5Fwc4MwjKhbZZUcBQJikk/oAhsgAAoJEIMwjKhb\nZZUcEVYA/3Mspejqbg+xhcV6oL5ALo87bVkwmXzbKA3UkFaaPLSbAP9TGd77tteJ\n/SCidauhdtBPpke56XqKti5ZXLm4bZKEC844BGKST5gSCisGAQQBl1UBBQEBB0C4\n/717tB5DCk+T4EmCz4vvKRda1TrkfU259vFJ8iSCewMBCAfCeAQYFggAIBYhBHS9\nkLWQ+aqYQ5Fwc4MwjKhbZZUcBQJikk+YAhsMAAoJEIMwjKhbZZUc/qAA/0xpOmJY\nL+V+nOn0OiSrgT/Sg9WAiZaich7Maj328hXoAQDPrAtrHE/mPcESNf8QENuJaYZH\nX9QbSPlp9xmfMmhzDQ==\n=AOvJ\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>"},{"location":"projects/arcolinux/gnome/","title":"Arcolinux Gnome Setup","text":"<p> Repo on GitHub </p> <p>The scripts and config files presented here are intended solely for my personal use, but made available so that anyone curious enough should feel free to adapt them for their own use as well.</p> <ul> <li>Scripts are intended to be executed in sequence with full reboots between executions.</li> <li>You may need to make scripts executable: <code>sudo chmod +x 01-config-os.sh</code></li> </ul> <p>Scripts Outdated</p> <p>The last update to this repo was May 7, 2022. Many things have likely changed since then.</p>"},{"location":"projects/arcolinux/gnome/#script-1-initial-os-config-01-config-ossh","title":"Script 1: Initial OS Config | <code>01-config-os.sh</code>","text":"<ul> <li>Removes several unneeded / unnecessary applications</li> <li>Installs tools used by this script and others to configure the system</li> <li>Installs icon and cursor themes</li> <li>Installs a couple of tools used for installing and managing gnome shell extensions</li> <li>Reverts the network adapter naming convention to standard</li> <li>Downloads custom config file for Kitty terminal</li> <li>Changes default shell from <code>bash</code> to <code>zsh</code></li> <li>Installs fonts</li> </ul>"},{"location":"projects/arcolinux/gnome/#script-2-gnome-preferences-02-gnome-prefssh","title":"Script 2: Gnome Preferences | <code>02-gnome-prefs.sh</code>","text":"<ul> <li>Configures preferred Gnome settings</li> <li>Sets several mimetypes to prefer Visual Studio Code (recommended to install VSCode before running this script)</li> </ul>"},{"location":"projects/arcolinux/gnome/#install-gnome-extensions","title":"Install Gnome Extensions","text":"<p>Manually install preferred Gnome shell extensions. Those listed below are taken from <code>https://extensions.gnome.org/</code>. The easiest way to install these is by installing the GNOME Shell Integration Google Chrome browser extension, then install the <code>chrome-gnome-shell</code> native host connector service:</p> <pre><code>$ paru -Sy aur/chrome-gnome-shell-git --needed --noconfirm\n</code></pre> <ul> <li>Dash to Panel</li> <li>ArcMenu</li> <li>Vitals</li> <li>Transparent Top Bar</li> <li>Clipboard Indicator</li> <li>UTCClock</li> </ul> <p>Predefined settings for ArcMenu and Dash-to-Panel can be downloaded from this repo and imported into their respective extensions. Because of the settings used in these files, its recommended that you hold off applying these settings until you've run at least the <code>03-settings-and-software.sh</code> script.</p>"},{"location":"projects/arcolinux/gnome/#script-3-settings-and-software-03-settings-and-softwaresh","title":"Script 3: Settings and Software | <code>03-settings-and-software.sh</code>","text":"<ul> <li>Downloads repo config file for Neofetch</li> <li>Installs and configures Powerlevel10k for zsh</li> <li>Installs<ul> <li>Python 2 (w/pip2 via manual install)</li> <li>Python 3 (w/pip3)</li> <li>Flameshot</li> <li>Visual Studio Code</li> <li>Microsoft Teams</li> <li>Slack Desktop</li> <li>Remmina (RDP)</li> <li>btop++</li> <li>exa (w/alias)</li> <li>bat (w/alias)</li> <li>OAuth Toolkit</li> <li>AWS CLI v2</li> <li>kubectl</li> <li>kubectx &amp; kubens</li> <li>AWS IAM Authenticator</li> <li>eksctl</li> </ul> </li> <li>Checks for and installs vendor-specific CPU microcode if not already installed</li> </ul>"},{"location":"projects/arcolinux/gnome/#script-4-security-apps-04-security-appssh","title":"Script 4: Security Apps | <code>04-security-apps.sh</code>","text":"<p>These applications are entirely optional and are primarily focused on security / penetration testing.</p> <ul> <li>Installs<ul> <li>Golang</li> <li>Samba support</li> <li>Impacket</li> <li>nmap</li> <li>OpenJDK v11</li> <li>BurpSuite</li> <li>Metasploit Framework</li> <li>Custom Python scripts</li> <li>Amass</li> <li>WhatWeb</li> <li>Nikto</li> <li>DirBuster</li> <li>GoBuster</li> <li>SearchSploit</li> <li>Nessus</li> <li>PowerSploit</li> <li>Hydra</li> <li>Responder</li> <li>MITM6</li> </ul> </li> </ul>"},{"location":"projects/arcolinux/xfce/","title":"Arcolinux Xfce Setup","text":"<p> Repo on GitHub </p> <p>The scripts and config files presented here are intended solely for my personal use, but made available so that anyone curious enough should feel free to adapt them for their own use as well.</p> <ul> <li>Scripts are intended to be executed in sequence with full reboots between executions.</li> <li>Fixes / Updates are noted at the bottom.</li> <li>You may need to make scripts executable: <code>sudo chmod +x arcomize-1.sh</code></li> </ul> <p>Read the sections below to learn what is included in each script. Some of the modules have been commented out by default but may easily be enabled prior to execution. </p> <p>Scripts Outdated</p> <p>The last update to this repo was Dec 23, 2021. Many things have likely changed since then.</p>"},{"location":"projects/arcolinux/xfce/#script-1-initial-os-config-arcomize-1sh","title":"Script 1: Initial OS Config | <code>arcomize-1.sh</code>","text":"<p>There is one variable you may wish to change near the top (~line 79) of this script: <code>termPref</code>.  By default, the script will configure <code>kitty</code> as the default terminal emulator for the OS. At present, the only other supported option is <code>alacritty</code>.</p> <p>The script will exit with an error if you do not run with <code>sudo</code>.</p> <p>The following modules will be executed in the order listed:</p> <code>vm_install</code> (disabled by default) <p><code>open-vm-tools</code> - comment out this module for bare metal installs.</p> <code>required_apps</code> <p><code>xmlstarlet</code> - used throughout the script to make modifications to various XML config files</p> <code>disable_power_mgmt</code> <p>Sets Sleep-on-AC and Sleep-on-Batt to <code>0</code> then disables power management entirely. The purpose of setting the values to zero first is so that if power management is accidentally enabled later, there are no unexpected sleep events.</p> <code>switch_to_lightdm</code> (disabled by default) <p>SDDM is pretty and all, but meh. This will install LightDM if not already installed and activate it as the preferred login mechanism. Basic configuration settings are applied.</p> <code>configure_sddm</code> <p>Installs <code>sddm-config-editor-git</code> and <code>arcolinux-sddm-sugar-candy-git</code> from Arcolinux repositories, then downloads custom configuration files from this repository to configure SDDM. </p> <code>xfce4_thunar_terminal</code> <p>For XFCE's Thunar file manager, change the \"Run\" and \"Open Terminal Here\" options to use the preferred terminal emulator (see above).</p> <code>xfce4_helpers_terminal</code> <p>Set XFCE's \"default applications\" option for terminal emulator to the preferred selection (see above).</p> <code>delete_variety_app</code> <p>Get rid of Arco's \"Variety\" desktop wallpaper selector tool. </p> <code>revert_network_naming</code> <p>By default the system uses Predictable Network Interface Names, but I prefer the traditional naming convention. This module will revert to traditional interface names</p> <code>fetch_kitty_config</code> <p>Fetch my preferred <code>kitty.conf</code> file from this repo and use it. </p> <code>switch_to_zsh</code> <p>Bash is the system default - this changes the default to ZSH.</p> <code>xfce4_panel_mod</code> <ul> <li>Moves the panel to the top of the screen.</li> <li>Whiskermenu button changed to icon only.</li> <li>Repositions a few things in the panel ... adds a \"directory tree\" for $HOME, quick launch buttons for Sublime, Firefox, and Chrome, and a quick launch selector for a standard terminal window or root terminal window. Move the workspace selector to the left side of the panel.</li> <li>Changes date format to my preference and includes UTC time (ex: <code>Sun - Sep 26 - 09:58 AM - 14:58 UTC</code>)</li> <li>Adds a \"Network Monitor\" to the panel to show upload/download speeds on <code>eth0</code>.</li> <li>Adds a \"Generic Monitor\" to the panel that runs a custom script (also found in this repo). Scripts are stored in <code>/home/$USER/.local/panel-scripts</code>. This script simply displays the IP assigned to network interfaces. Supported interface names are <code>wlan0</code>, <code>eth0</code>, and <code>tun0</code>.</li> </ul> <code>install_p10k_fonts</code> <p>Installs the recommended fonts for the Powerlevel10k ZSH theme via <code>paru</code>.</p> <ul> <li><code>ttf-meslo-nerd-font-powerlevel10k</code></li> <li><code>awesome-terminal-fonts</code></li> <li><code>powerline-fonts-git</code></li> <li><code>nerd-fonts-jetbrains-mono</code></li> </ul> <p>Note that conflicts will arise. You'll have to decide how you want to handle them during script execution.</p>"},{"location":"projects/arcolinux/xfce/#script-2-zsh-config-and-custom-apps-arcomize-2sh","title":"Script 2: ZSH Config and Custom Apps | <code>arcomize-2.sh</code>","text":"<p>The script will exit with an error if you do not run with <code>sudo</code>.</p> <p>The following tools/applications will be installed in the order listed below. These are specific applications or tools that I use on a daily basis for work, so feel free to remove or add applications that are relevant or important to you.</p> zsh theme - <code>powerlevel 10k</code> <p>Non-essential, but a very nice facelift for terminal. See romkatv/powerlevel10k on GitHub for details. In addition to the theme itself, this script will download a pre-defined configuration file from the repo, along with my customized <code>.aliases</code> file.</p> <code>python 2</code> and <code>3</code> <p>Yes, I know Python 2 has been deprecated, but I need it for several important things that are either not yet fully ported to Python 3 or just flat out broken on Python 3. This script will NOT alter the default <code>python</code> or <code>pip</code> commands on your install... so this means that running either of those commands without specifying a version will run version 3. You can run version 2 by using <code>python2</code> or <code>pip2</code> after this is installed.</p> <code>flameshot</code> <p>A nice screenshot tool. See flameshot-org/flameshot on GitHub for details. This script will set the <code>print</code> key keyboard binding to launch <code>flameshot gui</code>.</p> <code>vscode</code> <p>Microsoft's VSCode binary. This script will insert additional aliases into the <code>.aliases</code> file mentioned above. After install, typing <code>hosts</code> or <code>profile</code> from terminal will open the <code>/etc/hosts/</code> or <code>~/.zshrc</code> file (respectively) in VSCode. Script will also insert a line into the <code>.zshrc</code> file to set <code>KUBE_EDITOR=\"code --wait\"</code> (this is specific to Kubernetes - see additional tools installed below).</p> <code>teams</code> <p>because work.</p> <code>slack</code> <p>also because work.</p> <code>remmina</code> <p>An essential tool if you work with remote desktops. Supports multiple protocols - rdp, spice, vnc, ssh, http/https. Check out the features list. </p> <code>btop++</code> <p>C++ rewrite of the popular bashtop and bpytop terminal-based resource monitors. See btop on GitHub.</p> <code>stacer</code> (disabled by default) <p>A GUI resource monitor / optimizer tool. Added as an option in the file, but disabled by default. See Stacer on GitHub.</p> <code>exa</code> <p>A modern <code>ls</code> replacement with some nice features. See ogham/exa on GitHub, or the.exa.website for details. This script will alter an alias in the <code>.aliases</code> file: <code>ll='exa -lah --icons --group-directories-first --time-style long-iso --git'</code></p> <code>bat</code> <p>A nice <code>cat</code> replacement with syntax highlighting support. See sharkdp/bat on GitHub for details. This script will also download a copy of my pre-configured bat config file (<code>/configs/bat/config</code>) and add two aliases to the <code>.aliases</code> file:</p> <ul> <li><code>cat='bat -P'</code></li> <li><code>cat-page=bat</code></li> </ul> <code>oath-toolkit</code> <p>Very handy tool for generating OTP codes from the terminal. See the Oath Toolkit website or their GitLab site for details. </p> <code>aws cli v2</code> <p>Installs the AWS CLI v2. I chose to perform this install via a sub-script rather than using the AUR repository. This script will download two additional scripts - an install/update script (<code>update-aws-cli.sh</code>), as well as a delete script (<code>remove-aws-cli.sh</code>). These will be saved to <code>~/.local/helper-scripts</code>. This script will launch the <code>update-aws-cli.sh</code> script to perform the initial install and you can come back to this script regularly to update the tools from AWS, or use the <code>remove-aws-cli.sh</code> script to remove the tools completely. See Amazon's documentation for details.</p> <code>kubectl</code> <p>For Kubernetes. Installed from the <code>community</code> repository. </p> <code>kubectx</code> <p>For Kubernetes. Installed from the <code>community</code> repository. </p> <code>aws iam authenticator</code> <p>For Kubernetes. Installed from the <code>AUR</code> repository. You can find out more about this tool and why it's needed by visiting Amazon's installation instructions page or kubernetes-sigs/aws-iam-authenticator on GitHub.</p> <code>eksctl</code> <p>For Kubernetes. Installed from the <code>community</code> repository. </p>"},{"location":"projects/arcolinux/xfce/#script-3-penetration-testing-tools-arcomize-3sh","title":"Script 3: Penetration Testing Tools | <code>arcomize-3.sh</code>","text":"<p>The script will exit with an error if you do not run with <code>sudo</code>.</p> <p>The following tools/applications will be installed in the order listed below. These apps are specific to network analysis and penetration testing. Because these applications may be of interest in only limited circumstances and non-essential in most cases, they are installed via separate script.</p> <code>golang</code> <p>Core compiler tools for the Go programming language.</p> <code>samba</code> / <code>smb</code> <p>Samba support, including customized <code>smb.conf</code>. Not started or enabled by default. Start or enable-on-startup using the appropriate <code>systemctl</code> commands.</p> <code>impacket</code> <p>Impacket version 0.9.19 and prerequisites. This is a collection of Python classes for working with network protocols. Installed via Python 2.</p> <code>nmap</code> <p>Network Mapper utility for network discovery and security auditing. Includes a tweaked version of the <code>http-shellshock</code> script.</p> <code>jdk</code> / <code>jre</code> <p>jdk11-openjdk - includes jre</p> <code>burpsuite</code> <p>Community Edition. Specifically, this is for web application penetration testing but has proven to be quite useful for web development and other tasks.</p> <code>metasploit</code> <p>Penetration testing framework. See https://www.metasploit.com/.</p> custom python script <p><code>leetgen.py</code></p> <ul> <li>This is a custom python script I wrote that accepts a string and generates a wordlist of the many possible permutations of that string using \"leetspeak.\"</li> </ul> <code>amass</code> <p>OWASP Amass Project - performs network mapping of attack surfaces and external asset discovery using open source information gathering and active reconnaissance techniques.</p> <code>whatweb</code> <p>WhatWeb is a web scanner that tries to identify the various technologies used in the construction or hosting of websites. It can be stealthy or noisy, depending on the need.</p> <code>nikto</code> <p>Nikto is another web scanner that focuses on enumerating web servers and attempts to identify potentially dangerous or vulnerable files/applications residing on its target. Not very stealthy.</p> <code>dirbuster</code> <p>Web scanner which attempts to construct a site-map of a target website while looking for hidden or orphaned pages and directories. Graphical user interface.</p> <code>gobuster</code> <p>Very similar to DirBuster (above) but without a UI. Written in <code>Go</code>.</p> <code>searchsploit</code> <p>Command line search utility for ExploitDB. Operates offline.</p> <code>nessus</code> <p>Vulnerability scanner by Tenable</p> <code>powersploit</code> <p>Collection of PowerShell modules useful in all phases of penetration testing. Includes modules for code execution, script modification, persistence, av evasion, exfiltration, privilege escalation, and reconnaissance. No longer actively maintained, but still useful.</p> <code>hydra</code> <p>THC-Hydra is a parallelized login cracker that supports several different protocols.</p> <code>responder</code> <p>Responder is an LLMNR, NBT-NS and MDNS poisoner. It will answer to specific NBT-NS (NetBIOS Name Service) queries based on their name suffix. By default, the tool will only answer to File Server Service request, which is for SMB.</p> <code>mitm6</code> <p>mitm6 is a pentesting tool that exploits the default configuration of Windows to take over the default DNS server. It does this by replying to DHCPv6 messages, providing victims with a link-local IPv6 address and setting the attackers host as default DNS server. As DNS server, mitm6 will selectively reply to DNS queries of the attackers choosing and redirect the victims traffic to the attacker machine instead of the legitimate server.</p>"},{"location":"projects/arcolinux/xfce/#custom-aliases","title":"Custom Aliases","text":"<p>The <code>.aliases</code> file which will be copied by the script can be found in <code>/configs/zsh/.aliases</code>. </p> <p>The majority fo the aliases in this file come straight from ArcoLinux, but several have been commented out for my own preferences. As mentioned above in <code>arcomize-2.sh</code>, some of the aliases will be modified by the second script. These include:</p> <ul> <li><code>ll='exa -lah --icons --group-directories-first --time-style long-iso --git'</code></li> <li><code>cat='bat -P'</code></li> <li><code>cat-page=bat</code></li> <li><code>alias open='thunar'</code></li> <li><code>alias ip='ip -c'</code></li> </ul> <p>A few additional helpers have been added to the <code>.aliases</code> file outside of those provided by ArcoLinux:</p> <code>encode</code> / <code>decode</code> <p>calls a <code>base64encode</code> or <code>base64decode</code> function to make reading and writing base64 strings easier</p> <code>encodefile</code> <p>accepts two parameters:</p> <ul> <li>Param 1: an existing file on disk which you'd like to have encoded as base64</li> <li>Param 2: an output filename to which the encoded file will be saved</li> </ul> <code>ipinfo</code> <ul> <li>if called without any parameters, will return your current public IP address.</li> <li>if provided an IP address, will look up the available information about that IP from <code>ipinfo.io</code>.</li> </ul> <code>expandurl</code> <p>takes a Tiny-URL as a string and attempts to return back the ultimate destination of the URL</p> <code>df</code> <p>uses <code>duf</code> to present disk information in an easy to read format. See muesli/duf on GitHub for details. </p>"},{"location":"projects/arcolinux/xfce/#fixes-updates","title":"Fixes &amp; Updates","text":"<ul> <li>2021-12-19  [v0.2.2]<ul> <li>add remmina to <code>arcomize-2.sh</code></li> <li>add btop++ to <code>arcomize-2.sh</code></li> <li>add Stacer to <code>arcomize-2.sh</code> as an option - disabled by default</li> </ul> </li> <li>2021-12-05  [v0.2.1]<ul> <li>add module for sddm configuration in <code>arcomize-1.sh</code></li> <li>disabled <code>switch_to_lightdm</code> as default</li> </ul> </li> <li>2021-11-28  [v0.2.0]<ul> <li>add <code>arcomize-3.sh</code> - pentesting tools</li> </ul> </li> <li>2021-10-31  [v0.1.2]<ul> <li>a couple of the repo-hosted config files referenced my specific username in paths. Fixed so they'll be updated to the current user correctly after download from repo</li> <li>cleaned up old comments</li> <li>several various bug fixes</li> <li>add cpu detection and microcode install</li> <li>fix for some apps that can't be installed as root</li> </ul> </li> </ul>"},{"location":"projects/misc/email/","title":"PGPost","text":"<p>PGPost was a learning exercise for both Python and PGP, but turned out to be very useful. It is a very basic Python GUI application that accepts a public PGP encryption key and text to render an encrypted PGP message.</p> <p>It optionally accepts a signing key, and with signing enabled, produces a signed encrypted message. The results can be copied to the system clipboard or saved locally as an <code>.asc</code> file. </p> <p></p>"},{"location":"projects/misc/email/#notes","title":"Notes","text":"<p>The tool was built in a Python 3.12.8 environment and requires only two packages (noted below). </p> <p>There are a number of improvements that can be made, both in functionality and to it's interface - if anyone ever expands on this or reworks it, I would be very interested in seeing the updated product. </p> <p>At some point, I'd like to incorporate the gnupg keyring and decryption functionality, but having something extremely lightweight and portable to make encrypting messages a breeze for people without a lot of hands-on PGP experience has proven helpful.</p>"},{"location":"projects/misc/email/#dependencies","title":"Dependencies","text":"<ul> <li>python-gnupg</li> <li>pyperclip</li> </ul>"},{"location":"projects/misc/email/#source","title":"Source","text":"<pre><code>import os\nimport tkinter as tk\nfrom tkinter import filedialog\nfrom tkinter import font as tkfont\nimport gnupg\nimport pyperclip\n\n# Initialize GPG\ngpg = gnupg.GPG()\n\nclass PGPost:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"PGPost\")\n        self.root.iconphoto(False, tk.PhotoImage(file=\"app_icon.png\")) \n\n        # Selected PGP Key\n        self.selected_key = None\n        self.imported_key_fingerprint = None\n        self.signing_key_fingerprint = None\n        self.enable_signing = tk.BooleanVar(value=False)\n\n        # Define fonts\n        self.default_font = tkfont.nametofont(\"TkDefaultFont\")\n        self.bold_font = self.default_font.copy()\n        self.bold_font.configure(weight=\"bold\")\n\n        # Main Frame with Padding\n        self.main_frame = tk.Frame(root, padx=12, pady=12)\n        self.main_frame.pack(fill=\"both\", expand=True)\n\n        # Title\n        tk.Label(self.main_frame, text=\"PGPost\", font=(self.bold_font, 16)).pack(pady=2)\n\n        # Key Selection Frame\n        self.key_selection_frame = tk.Frame(self.main_frame)\n        self.key_selection_frame.pack(fill=\"x\", pady=5)\n\n        self.key_label = tk.Label(self.key_selection_frame, text=\"No public key selected\", fg=\"red\")\n        self.signing_key_label = tk.Label(self.key_selection_frame, text=\"No signing key selected\", fg=\"red\")\n\n        self.key_label.grid(row=0, column=0, sticky=\"w\", padx=5, pady=5)\n        self.signing_key_label.grid(row=0, column=1, sticky=\"w\", padx=5, pady=5)\n\n        tk.Button(self.key_selection_frame, text=\"Select Public PGP Key\", command=self.select_public_key).grid(row=1, column=0, sticky=\"w\", padx=5, pady=5)\n        tk.Button(self.key_selection_frame, text=\"Select Signing Key\", command=self.select_signing_key).grid(row=1, column=1, sticky=\"w\", padx=5, pady=5)        \n\n        for i in range(2):\n            self.key_selection_frame.grid_columnconfigure(i, weight=1)\n            self.key_selection_frame.grid_rowconfigure(i, weight=1)\n\n        # Signing Checkbox\n        tk.Checkbutton(\n            self.key_selection_frame,\n            text=\"Enable Signing\",\n            variable=self.enable_signing,\n        ).grid(row=2, column=0, columnspan=2, sticky=\"w\", padx=5, pady=5)\n\n        # Key Details Frame\n        self.key_details_frame = tk.Frame(self.main_frame, bg=\"#f0f0f0\", relief=tk.RIDGE, borderwidth=2, padx=5, pady=5)\n        self.key_details_frame.pack(pady=5, fill=tk.X)\n        tk.Label(self.key_details_frame, text=\"Key Details:\", bg=\"#f0f0f0\", fg=\"darkblue\", font=(self.default_font, 10, \"bold\")).pack(anchor=\"w\")\n        self.key_details_label = tk.Label(self.key_details_frame, text=\"None\", bg=\"#f0f0f0\", fg=\"darkblue\", wraplength=900, justify=\"left\")\n        self.key_details_label.pack(anchor=\"w\", pady=2)\n\n        # Email Input\n        tk.Label(self.main_frame, text=\"Write your message:\", anchor=\"w\").pack(anchor=\"w\", pady=5)\n        self.email_text = tk.Text(self.main_frame, width=125, height=15)\n        self.email_text.pack(pady=5)\n\n        # Encrypt Button\n        tk.Button(self.main_frame, text=\"Encrypt Message\", command=self.encrypt_email).pack(pady=10, anchor=\"w\")\n\n        # Encrypted Output\n        tk.Label(self.main_frame, text=\"Encrypted Message:\", anchor=\"w\").pack(anchor=\"w\", pady=5)\n        self.encrypted_text = tk.Text(self.main_frame, width=125, height=15, state=\"disabled\")\n        self.encrypted_text.pack(pady=5)\n\n        # Bottom Button Frame\n        self.button_frame = tk.Frame(self.main_frame)\n        self.button_frame.pack(pady=10, fill=tk.X)\n        tk.Button(self.button_frame, text=\"Copy to Clipboard\", command=self.copy_to_clipboard).pack(side=\"left\", padx=5)\n        tk.Button(self.button_frame, text=\"Save Encrypted Message\", command=self.save_to_file).pack(side=\"right\", padx=5)\n\n        # Status Bar\n        self.status_bar = tk.Label(self.root, text=\"Ready\", bd=1, relief=tk.SUNKEN, anchor=\"w\", padx=5)\n        self.status_bar.pack(side=\"bottom\", fill=\"x\", ipady=7)\n\n    def update_status(self, message, bold=False, color=\"white\"):\n        \"\"\"Updates the status bar.\"\"\"\n        font = self.bold_font if bold else self.default_font\n        self.status_bar.config(text=message, fg=color, font=font)\n\n    def select_public_key(self):\n        key_file = filedialog.askopenfilename(title=\"Select Public PGP Encryption Key\", filetypes=[(\"PGP Key Files\", \"*.asc\"), (\"All Files\", \"*.*\")])\n        if key_file:\n            with open(key_file, \"r\") as file:\n                key_data = file.read()\n                import_result = gpg.import_keys(key_data)\n\n            if not import_result.count:\n                self.update_status(\"Failed to import the public PGP key!\", bold=True, color=\"red\")\n                self.key_label.config(text=\"No public key selected\", fg=\"red\")\n                self.key_details_label.config(text=\"None\", fg=\"darkblue\")\n                return\n\n            # Update Key Information\n            self.selected_key = key_file\n            self.imported_key_fingerprint = import_result.fingerprints[0]\n            key_details = gpg.list_keys(keys=[self.imported_key_fingerprint])[0]\n            user_id = key_details.get(\"uids\", [\"Unknown User\"])[0]\n\n            self.key_label.config(text=f\"Key: {os.path.basename(key_file)}\", fg=\"green\")\n            self.update_key_details()\n            self.update_status(\"PGP key successfully imported.\", color=\"green\")\n        else:\n            self.update_status(\"No public key selected.\", bold=True, color=\"orange\")\n\n    def select_signing_key(self):\n        key_file = filedialog.askopenfilename(title=\"Select Signing Key\", filetypes=[(\"PGP Key Files\", \"*.asc\"), (\"All Files\", \"*.*\")])\n        if key_file:\n            with open(key_file, \"r\") as file:\n                key_data = file.read()\n                import_result = gpg.import_keys(key_data)\n\n            if not import_result.count:\n                self.update_status(\"Failed to import the signing key!\", bold=True, color=\"red\")\n                self.signing_key_label.config(text=\"No signing key selected\", fg=\"red\")\n                return\n\n            # Update Signing Key Information\n            self.signing_key_fingerprint = import_result.fingerprints[0]\n            key_details = gpg.list_keys(keys=[self.signing_key_fingerprint])[0]\n            user_id = key_details.get(\"uids\", [\"Unknown User\"])[0]\n\n            self.signing_key_label.config(text=f\"Signing Key: {os.path.basename(key_file)}\", fg=\"green\")\n            self.update_key_details()\n            self.update_status(\"Signing key successfully imported.\", color=\"green\")\n        else:\n            self.update_status(\"No signing key selected.\", bold=True, color=\"orange\")\n\n    def update_key_details(self):\n        \"\"\"Update the Key Details section.\"\"\"\n        details = []\n        if self.imported_key_fingerprint:\n            key_details = gpg.list_keys(keys=[self.imported_key_fingerprint])[0]\n            user_id = key_details.get(\"uids\", [\"Unknown User\"])[0]\n            details.append(f\"Public Key:\\n  User ID: {user_id}\\n  Fingerprint: {self.imported_key_fingerprint}\")\n        if self.signing_key_fingerprint:\n            key_details = gpg.list_keys(keys=[self.signing_key_fingerprint])[0]\n            user_id = key_details.get(\"uids\", [\"Unknown User\"])[0]\n            details.append(f\"Signing Key:\\n  User ID: {user_id}\\n  Fingerprint: {self.signing_key_fingerprint}\")\n        self.key_details_label.config(text=\"\\n\\n\".join(details) if details else \"None\")\n    def encrypt_email(self):\n        if not self.imported_key_fingerprint:\n            self.update_status(\"Please select a valid public PGP key first!\", bold=True, color=\"red\")\n            return\n\n        # Get Email Content\n        email_content = self.email_text.get(\"1.0\", tk.END).strip()\n        if not email_content:\n            self.update_status(\"Message content cannot be empty!\", bold=True, color=\"red\")\n            return\n\n        # Sign Email\n        sign_with = self.signing_key_fingerprint if self.enable_signing.get() and self.signing_key_fingerprint else None\n\n        # Encrypt Email\n        encrypted_data = gpg.encrypt(email_content, self.imported_key_fingerprint, sign=sign_with)\n        if not encrypted_data.ok:\n            self.update_status(f\"Encryption failed: {encrypted_data.stderr}\", bold=True, color=\"red\")\n            return\n\n        # Display Encrypted Content\n        self.encrypted_text.config(state=\"normal\")\n        self.encrypted_text.delete(\"1.0\", tk.END)\n        self.encrypted_text.insert(\"1.0\", str(encrypted_data))\n        self.encrypted_text.config(state=\"disabled\")\n        self.update_status(\"Message encrypted successfully.\", color=\"green\")\n\n    def copy_to_clipboard(self):\n        encrypted_content = self.encrypted_text.get(\"1.0\", tk.END).strip()\n        if encrypted_content:\n            pyperclip.copy(encrypted_content)\n            self.update_status(\"Encrypted content copied to clipboard.\", color=\"green\")\n        else:\n            self.update_status(\"No encrypted content to copy!\", bold=True, color=\"red\")\n\n    def save_to_file(self):\n        encrypted_content = self.encrypted_text.get(\"1.0\", tk.END).strip()\n        if not encrypted_content:\n            self.update_status(\"No encrypted content to save!\", bold=True, color=\"red\")\n            return\n\n        # Save File Dialog\n        save_path = filedialog.asksaveasfilename(title=\"Save Encrypted Message\", defaultextension=\".asc\", filetypes=[(\"PGP Encrypted Files\", \"*.asc\"), (\"All Files\", \"*.*\")])\n        if save_path:\n            try:\n                with open(save_path, \"w\") as file:\n                    file.write(encrypted_content)\n                self.update_status(f\"Encrypted message saved to {save_path}\", color=\"green\")\n            except Exception as e:\n                self.update_status(f\"Failed to save file: {e}\", bold=True, color=\"red\")\n\n# Run the application\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    app = PGPost(root)\n    root.mainloop()\n</code></pre>"},{"location":"projects/totp/argos/","title":"TOTP for Argos","text":"<p>Built specifically for <code>Argos</code> (a fully compatible Gnome port of <code>bitbar</code> for macOS) this tool reads OATH codes from YubiKey, displays them on-screen, and copies them to the system clipboard.</p> <p>Note</p> <p>Unlike the <code>xbar</code> module, this tool only works with YubiKey.</p>"},{"location":"projects/totp/argos/#yubikey-totp","title":"YubiKey TOTP","text":"<p> View on GitHub </p> <p>YubiKey 5 supports up to 64 OATH-TOTP credentials saved directly to your device. While the Yubico Authenticator app can be used to access these keys, I needed something faster and more readily accessible when jumping between apps and sites. This Gnome shell extension module makes those credentials available to you from the system menu bar. </p>"},{"location":"projects/totp/argos/#notes","title":"Notes","text":"<ul> <li>Tested with Nerd Fonts. My preference for Gnome is <code>Overpass Nerd Font</code>, but this can easily be changed to your liking. See the <code>FONT</code> and <code>LABELFONT</code> variables.</li> <li>If your Yubikey is not inserted when the <code>bitbar</code> application loads, or if your key is not detected for any other reason, you may see a \"Yubikey not detected\" message. Insert your Yubikey and click the \"reload\" option to refresh the extension and read OATH codes from your device.</li> </ul> <p><sup>Yubikey not detected</sup></p> <ul> <li>Tested and working with Yubikey OATH codes regardless of \"touch\" setting. If your code has been configured to require touch, no additional prompts will display on-screen, but your Yubikey will begin to flash after clicking the name of the code you with you retrieve. Tap your key as usual and the value will be recorded to the system clipboard.</li> </ul>"},{"location":"projects/totp/argos/#dependencies","title":"Dependencies","text":"<ul> <li>yubikey-manager</li> </ul>"},{"location":"projects/totp/argos/#settings","title":"Settings","text":"Operational SettingsConfiguration Settings Setting Default Note <code>ykPassRequired</code> <code>false</code> Change to <code>true</code> if your Yubikey has been configured to require a password for OATH use. When <code>true</code>, <code>ykPassword</code> must also be supplied for proper operation. <code>ykPassword</code> <code>YUBIKEY-OATH-PASSWORD</code> Required when <code>ykPassRequired</code> is <code>true</code>. This value is a plain-text string of your Yubikey OATH password. <code>ykOrderOverride</code> <code>false</code> OATH codes are read from Yubikey and displayed in alphabetical order. To override this behavior, or to selectively group or omit codes, set value to <code>true</code>. When set to <code>true</code>, you must provide at minimum the values for all three <code>groupPrimary</code> settings (identified below). <code>iconEnable</code> <code>true</code> Designed to be used in conjunction with Nerd Fonts. If set to <code>true</code>, values specified in the <code>iconArray</code> will be used to \"look up\" which Nerd Font glyphs should be used with each OATH code from the Yubikey. <code>groupSecondaryEnable</code> <code>true</code> Enable support for grouping Yubikey OATH keys in two groups. Setting Note <code>ykOathList</code> Intentionally empty. Do not modify. <code>groupPrimaryName</code> / <code>groupSecondaryName</code> Heading name for groups of OATH codes. <code>groupPrimaryColor</code> / <code>groupSecondaryColor</code> Heading colors for groups of OATH codes. <code>groupPrimaryList</code> / <code>groupSecondaryList</code> Array of OATH keys. The format must match the output from Yubikey. To see which keys are available on your device, run <code>ykman oath accounts list</code>. Values must be contained within double-quotes and do not separate with commas (<code>,</code>). <code>iconArray</code> Used only if <code>iconEnable</code> is <code>true</code>. Array of labels paired with Nerd Font glyphs. Separate key/value with a colon (<code>:</code>), use double quotes (<code>\"</code>), and do not separate value pairs with commas (<code>,</code>). If an OATH key is found that does not have a matching glyph, a circle and exclaimation glyph will display for that OATH entry."},{"location":"projects/totp/argos/#yubikey-terminal","title":"YubiKey Terminal","text":"<p>This supplemental tool has four (4) modes of operation. It can be executed as a stand-alone script, or integrated into your shell profile. </p> <p> View on GitHub </p> <ol> <li>No parameter passed.<ul> <li>OATH keys will be read from Yubikey and you will be prompted to select the number of the key you want to capture. Code will be returned and its value copied to the system clipboard. </li> </ul> </li> <li>Pass \"list\" as the only parameter.<ul> <li>OATH keys will be read from Yubikey. They will be numbered, but you will not be prompted to select a number, and no codes will be returned or copied to the clipboard.</li> </ul> </li> <li>Pass the number identifier for the key you're wanting.<ul> <li>The OATH code for the specified key will be returned and copied to system clipboard. </li> </ul> </li> <li>Pass a string containing the name of the OATH key you're wanting.<ul> <li>If you provide a partial string, a match will be attempted but could fail if there are multiple possible selections each containing the string you provided. Potential matches will be returned allowing you to make a more specific request.</li> <li>You can also choose to provide the entire Yubikey-Manager compliant string identifier: <code>&lt;identity&gt;:&lt;account&gt;</code>. This will always ensure a positive match if the key exists within the Yubikey you have inserted. </li> <li>Additional data about the OATH code is omitted from output - this means that only the OATH code itself is emitted and is therefore more suitable for use in programmatic applications.</li> </ul> </li> </ol> <p>As written, this script is designed to be copied into your bash or zsh profile. Note the <code>mfa</code> alias defined on line 36.</p>"},{"location":"projects/totp/argos/#notes_1","title":"Notes","text":"<ul> <li>If your Yubikey is not inserted when the script is executed, or if your key is not detected for any other reason, you may see the message \"Yubikey not detected.\" </li> <li>If your OS distribution includes default aliases for the individual number characters (1 through 9, aliased to <code>cd -N</code>), the <code>unalias</code> commands may be necessary for the script to work properly by passing a number in as a parameter.<ul> <li>If you have aliases for the number characters that you must not change, prefix single digits with zero (i.e., instead of <code>5</code>, pass <code>05</code>).</li> </ul> </li> <li>Tested and working with Yubikey OATH codes regardless of \"touch\" setting. If your code has been configured to require touch, prompts will appear on-screen as required and your Yubikey will begin to flash to indicate contact is required. Tap your key as usual and the value will be displayed on-screen and recorded to the system clipboard.</li> <li>If you have multiple keys loaded with very similar names, you may have to use the full OATH key name when attempting to retrieve codes by string rather than number identifier.</li> </ul>"},{"location":"projects/totp/argos/#dependencies_1","title":"Dependencies","text":"<ul> <li>yubikey-manager</li> </ul>"},{"location":"projects/totp/argos/#settings_1","title":"Settings","text":"Operational SettingsConfiguration Settings Setting Default Note <code>ykPasswordRequired</code> <code>false</code> Change to <code>true</code> if your Yubikey has been configured to require a password for OATH use. When <code>true</code>, <code>ykPasswordString</code> must also be supplied for proper operation. <code>ykPasswordString</code> <code>some-password</code> Required when <code>ykPasswordRequired</code> is <code>true</code>. This value is a plain-text string of your Yubikey OATH password. <p>No additional settings available.</p>"},{"location":"projects/totp/argos/#specifying-similarly-named-mfa-codes","title":"Specifying similarly named MFA codes","text":"Example 1<pre><code>You have 3 OATH codes saved to your Yubikey with the following Issuer and Accounts:\n* AWS [Prod]:usera@workemail.com\n* AWS [Dev Root]:usera\n* AWS [Personal]:usera@homeemail.com\n\nYou will have difficulty attempting to capture codes if all you are passing to the script is \"AWS\":\n\n$ ./yubikey-mfa.sh \"AWS\"\nError: Multiple matches, please make the query more specific.\n\nAWS [Prod]:usera@workemail.com\nAWS [Dev Root]:usera\nAWS [Personal]:usera@homeemail.com\n\nThis can be resolved by passing the full Issuer string:\n$ ./yubikey-mfa.sh \"AWS [Dev Root]\"\n</code></pre> Example 2<pre><code>You have 3 OATH codes saved to your Yubikey with the following Issuer and Accounts:\n* AWS:usera@workemail.com\n* AWS:usera\n* AWS:usera@homeemail.com\n\n$ ./yubikey-mfa.sh \"AWS\"\nError: Multiple matches, please make the query more specific.\n\nAWS:usera@workemail.com\nAWS:usera\nAWS:usera@homeemail.com\n\nIn this scenario, the only resolution is to use the full OATH name as known to Yubikey:\n$ ./yubikey-mfa.sh \"AWS:usera@homeemail.com\"\n</code></pre>"},{"location":"projects/totp/xbar/","title":"TOTP for xbar","text":"<p>Built specifically for <code>xbar</code> (macOS port of <code>bitbar</code>) this tool has two flavors: with YubiKey support, or without (legacy). </p> <p>Info</p> <p>Any future updates for this tool will focus on the YubiKey version only because it allows for significantly better security by default.</p>"},{"location":"projects/totp/xbar/#yubikey-totp","title":"YubiKey TOTP","text":"<p> View on GitHub </p> <p>YubiKey 5 supports up to 64 OATH-TOTP credentials saved directly to your device. While the Yubico Authenticator app can be used to access these keys, I needed something faster and more readily accessible when jumping between apps and sites. This Xbar module makes those credentials available to you from the macOS menu bar. </p>"},{"location":"projects/totp/xbar/#notes","title":"Notes","text":"<ul> <li>Works with Nerd Fonts. I prefer <code>JetBrains Mono Nerd Font Propo</code>, but this can easily be changed to your liking. See the <code>FONT</code> variable.</li> <li>If your Yubikey is not inserted when the <code>xbar</code> application loads, or if your key is not detected for any other reason, you may see a \"Yubikey not detected\" message. Insert your Yubikey and click the \"reload\" option to refresh the extension and read OATH codes from your device. </li> <li>If you have multiple Yubikeys and did not specify <code>ykUseSerial</code> and <code>ykDevice</code>, you will see a \"Multiple Yubikeys detected\" message. Update the variables and click the \"reload\" option to refresh the extension and read from the specified device only. </li> </ul> <p><sup>Yubikey not detected</sup></p> <ul> <li>Tested and working with Yubikey OATH codes regardless of \"touch\" setting. If your code has been configured to require touch, no additional prompts will display on-screen, but your Yubikey will begin to flash after clicking the name of the code you with you retrieve. Tap your key as usual and the value will be recorded to the macOS clipboard.</li> <li>The script will determine if it is being run on Apple Silicon and set the <code>PATH</code> accordingly. </li> </ul>"},{"location":"projects/totp/xbar/#dependencies","title":"Dependencies","text":"<ul> <li>yubikey-manager - <code>brew install ykman</code></li> </ul>"},{"location":"projects/totp/xbar/#settings","title":"Settings","text":"Operational SettingsConfiguration Settings Setting Default Note <code>ykPassRequired</code> <code>false</code> Change to <code>true</code> if your Yubikey has been configured to require a password for OATH use. When <code>true</code>, <code>ykPassword</code> must also be supplied for proper operation. <code>ykPassword</code> <code>YUBIKEY-OATH-PASSWORD</code> Required when <code>ykPassRequired</code> is <code>true</code>. This value is a plain-text string of your Yubikey OATH password. <code>ykOrderOverride</code> <code>false</code> OATH codes are read from Yubikey and displayed in alphabetical order. To override this behavior, or to selectively group or omit codes, set value to <code>true</code>. When set to <code>true</code>, you must provide (at minimum) the values for all three <code>groupPrimary</code> settings. <code>ykUseSerial</code> <code>false</code> Change to <code>true</code> to directly target a specific Yubikey if you have (or expect to have) multiple Yubikeys connected to your machine at one time. When <code>true</code>, <code>ykDevice</code> must also be supplied for proper operation. <code>ykDevice</code> <code>99999999</code> Required when <code>ykUseSerial</code> is <code>true</code>. The Serial Number of the Yubikey you want the module to read from. <code>iconEnable</code> <code>true</code> Designed to be used in conjunction with Nerd Fonts. If set to <code>true</code>, values specified in the <code>iconArray</code> will be used to \"look up\" which Nerd Font glyphs should be used with each OATH code from the Yubikey. <code>groupSecondaryEnable</code> <code>true</code> Enable support for grouping Yubikey OATH keys in two groups. <code>submenuEnable</code> <code>false</code> Enable nesting of OATH keys under their group name. Causes only one group of keys to be visible at a time. Setting Note <code>groupPrimaryName</code> / <code>groupSecondaryName</code> Heading name for groups of OATH codes. <code>groupPrimaryColor</code> / <code>groupSecondaryColor</code> Heading colors for groups of OATH codes. When <code>submenuEnable</code> is true, headings become interactive and the colors become darker. Using the IF statement, manually specify a lighter color for submenus to keep colors consistent between modes.<code>$(if [ \"$submenuEnable\" = \"true\" ]; then echo \"#807FFE\"; else echo \"BLUE\"; fi;)</code> <code>groupPrimaryList</code> / <code>groupSecondaryList</code> Array of OATH keys. The format must match the output from Yubikey. To see which keys are available on your device, run <code>ykman oath accounts list</code>. Values must be contained within double-quotes and do not separate with commas (<code>,</code>). <code>iconArray</code> Used only if <code>iconEnable</code> is <code>true</code>. Array of labels paired with Nerd Font glyphs. Separate key/value with a colon (<code>:</code>), use double quotes (<code>\"</code>), and do not separate value pairs with commas (<code>,</code>). If an OATH key is found that does not have a matching glyph, a circle and exclaimation glyph will display for that OATH entry."},{"location":"projects/totp/xbar/#yubikey-terminal","title":"YubiKey Terminal","text":"<p>This supplemental tool has four (4) modes of operation. It can be executed as a stand-alone script, or integrated into your shell profile. </p> <p> View on GitHub </p> <ol> <li>No parameter passed.<ul> <li>OATH keys will be read from Yubikey and you will be prompted to select the number of the key you want to capture. Code will be returned and its value copied to the macOS clipboard. </li> </ul> </li> <li>Pass \"list\" as the only parameter.<ul> <li>OATH keys will be read from Yubikey. They will be numbered, but you will not be prompted to select a number, and no codes will be returned or copied to the clipboard.</li> </ul> </li> <li>Pass the number identifier for the key you're wanting.<ul> <li>The OATH code for the specified key will be returned and copied to macOS clipboard. </li> </ul> </li> <li>Pass a string containing the name of the OATH key.<ul> <li>If you provide a partial string, a match will be attempted but could fail if there are multiple possible selections each containing the string you provided. Potential matches will be returned allowing you to make a more specific request.</li> <li>You can also choose to provide the entire Yubikey-Manager compliant string identifier: <code>&lt;identity&gt;:&lt;account&gt;</code>. This will always ensure a positive match if the key exists within the Yubikey you have inserted. </li> <li>Additional data about the OATH code is omitted from output - this means that only the OATH code itself is emitted and is therefore more suitable for use in programmatic applications.</li> </ul> </li> </ol>"},{"location":"projects/totp/xbar/#notes_1","title":"Notes","text":"<ul> <li>If your Yubikey is not inserted when the script is executed, or if your key is not detected for any other reason, you may see the \"Yubikey not detected\" message.</li> <li>If you have multiple Yubikeys and did not specify <code>ykUseSerial</code> and <code>ykDevice</code>, you will see a \"Multiple Yubikeys detected\" message. </li> <li>Tested and working with Yubikey OATH codes regardless of \"touch\" setting. If your code has been configured to require touch, prompts will appear on-screen as required and your Yubikey will begin to flash to indicate contact is required. Tap your key as usual and the value will be displayed on-screen and recorded to the macOS clipboard.</li> <li>If you have multiple keys loaded with very similar names, you may have to use the full OATH key name when attempting to retrieve codes by string rather than number identifier. Consider the following examples:</li> </ul>"},{"location":"projects/totp/xbar/#dependencies_1","title":"Dependencies","text":"<ul> <li>yubikey-manager - <code>brew install ykman</code></li> </ul>"},{"location":"projects/totp/xbar/#settings_1","title":"Settings","text":"Operational SettingsConfiguration Settings Setting Default Note <code>ykPasswordRequired</code> <code>false</code> Change to <code>true</code> if your Yubikey has been configured to require a password for OATH use. When <code>true</code>, <code>ykPasswordString</code> must also be supplied for proper operation. <code>ykPasswordString</code> <code>some-password</code> Required when <code>ykPasswordRequired</code> is <code>true</code>. This value is a plain-text string of your Yubikey OATH password. <code>ykUseSerial</code> <code>false</code> Change to <code>true</code> to directly target a specific Yubikey if you have (or expect to have) multiple Yubikeys connected to your machine at one time. When <code>true</code>, <code>ykDevice</code> must also be supplied for proper operation. <code>ykDevice</code> <code>99999999</code> Required when <code>ykUseSerial</code> is <code>true</code>. The Serial Number of the Yubikey you want the module to read from. <code>ykMaxKeys</code> <code>64</code> Yubikey devices with firmware 5.7.x now support 64 OATH codes stored on-device (versus 32 previously). <p>No additional settings available.</p>"},{"location":"projects/totp/xbar/#specifying-similarly-named-mfa-codes","title":"Specifying similarly named MFA codes","text":"Example 1<pre><code>You have 3 OATH codes saved to your Yubikey with the following Issuer and Accounts:\n* AWS [Prod]:usera@workemail.com\n* AWS [Dev Root]:usera\n* AWS [Personal]:usera@homeemail.com\n\nYou will have difficulty attempting to capture codes if all you are passing to the script is \"AWS\":\n\n$ ./yubikey-mfa.sh \"AWS\"\nError: Multiple matches, please make the query more specific.\n\nAWS [Prod]:usera@workemail.com\nAWS [Dev Root]:usera\nAWS [Personal]:usera@homeemail.com\n\nThis can be resolved by passing the full Issuer string:\n$ ./yubikey-mfa.sh \"AWS [Dev Root]\"\n</code></pre> Example 2<pre><code>You have 3 OATH codes saved to your Yubikey with the following Issuer and Accounts:\n* AWS:usera@workemail.com\n* AWS:usera\n* AWS:usera@homeemail.com\n\n$ ./yubikey-mfa.sh \"AWS\"\nError: Multiple matches, please make the query more specific.\n\nAWS:usera@workemail.com\nAWS:usera\nAWS:usera@homeemail.com\n\nIn this scenario, the only resolution is to use the full OATH name as known to Yubikey:\n$ ./yubikey-mfa.sh \"AWS:usera@homeemail.com\"\n</code></pre> <p>The legacy version is deprecated because it isn't secure.</p> <p>The original iterations of my <code>xbar</code> module remain purely for historical purposes. Anyone is welcome to experiment and play with the scripts below, but please do not use these for real-world security.</p>"},{"location":"projects/totp/xbar/#legacy-totp","title":"Legacy TOTP","text":"<p> View on GitHub </p> <p>This use case is deprecated and should considered insecure. It relies on the TOTP seeds being saved to your filesystem and accessible to the module itself. </p>"},{"location":"projects/totp/xbar/#notes_2","title":"Notes","text":"<ul> <li>Allows for two modes of use:<ul> <li>Traditionally identified within the menu bar as an application name, or;</li> <li>Specify one specific account to be premanently visible on the menu bar, it's TOTP code visible and refreshed at all times.</li> </ul> </li> <li>Tested and works well with Nerd Fonts. My preference is <code>JetBrains Mono Nerd Font</code> but this can easily be changed to your liking.</li> <li>If you wish to ENABLE the default code, consider changing the script name to execute every five (5) or fewer seconds. By default, the script will not display a default code and therefore refreshes only once per day.</li> </ul> <p><sup>Default code enabled</sup></p>"},{"location":"projects/totp/xbar/#dependencies_2","title":"Dependencies","text":"<ul> <li>OATH-Toolkit - <code>brew install oath-toolkit</code></li> </ul>"},{"location":"projects/totp/xbar/#settings_2","title":"Settings","text":"Operational SettingsConfiguration Settings Setting Default Note <code>ENABLE_DEFAULT_CODE</code> <code>false</code> Causes the \"default\" code to be displayed in the menu bar. <code>ENABLE_DEFAULT_COPY</code> <code>true</code> Adds a \"Copy Default Code\" option to the top of the menu. If set to false, only the code is displayed in the menu. <code>ONLY_ONE_GROUP</code> <code>false</code> Causes all groups other than \"group1\" to be ignored. Heading name for Group 1 will not be displayed. <code>ENABLE_SUBMENU</code> <code>false</code> Causes codes to be rolled-up under their group heading rather than displayed together in the top level of the menu. Setting Note <code>DEFAULT_NAME</code> Relevant when <code>ENABLE_DEFAULT_CODE</code> is true. Displays a TOTP code directly in the top menu bar. <code>DEFAULT_KEY</code> Relevant when <code>ENABLE_DEFAULT_CODE</code> is true. Displays a TOTP code directly in the top menu bar. <code>group1Name</code> / <code>group2Name</code> Heading name for the group of codes. <code>group1Color</code> / <code>group2Color</code> Heading color for the group name. <code>mfaGroup1</code> / <code>mfaGroup2</code> Array of TOTP keys. Format is <code>&lt;name&gt;:&lt;key&gt;</code>. Values must be contained within double-quotes and do not separate with commas (<code>,</code>)."},{"location":"projects/totp/xbar/#legacy-terminal","title":"Legacy Terminal","text":"<p>This was the first tool I created to assist in management and use of MFA codes, predating my discovery of <code>xbar</code>. Use requires two files:</p> <ol> <li>a file with MFA key strings and metadata separated by <code>tab</code> characters</li> <li>bash script to cherry-pick individual keys and decode the TOTP token upon request</li> </ol> <p> View on GitHub </p> <p>OATH-Toolkit is required. Install with <code>brew install oath-toolkit</code>.</p> <p>The MFA key file should be saved to your local system with a name similar to <code>.mfa-codes</code>. For the sake of example we'll say this is saved at <code>~/.mfa/.mfa-codes</code>. This file should contain information structured as follows:  <pre><code>short-name {tab} mfa-code {tab} username (or email) {tab} long-description, {newline}\n</code></pre></p> <p>The contents of the file should look something like this: ~/.mfa/.mfa-codes<pre><code># TOKENS\n\naws-prod    ABC123ABC123ABC1    user@email.com  AWS (Prod)\naws-dev ABC123ABC123ABC1    user2@email2.com    AWS (Dev)\nmicrosoft   ABC123ABC123ABC1    user3@email3.com    O365\nvpn ABC123ABC123ABC1    user4   Office VPN\nlastpass    ABC123ABC123ABC1    user5@email5.com    LastPass\ngitlab  ABC123ABC123ABC1    user6@email6.com    GitLab (Personal)\noutlook ABC123ABC123ABC1    user7@outlook.com   Outlook (Personal)\npaypal  ABC123ABC123ABC1    user8@email8.com    PayPal (Personal)\n</code></pre></p> <p>Usage is very basic. Add the script to your system path so that it's accessible from anywhere as simply <code>mfa</code>, then * pass <code>list</code> to retrieve a parsed listing of everything from the <code>.mfa-codes</code> file, and; * pass the short-name to get the TOTP code for that entry.</p>"},{"location":"scripts/","title":"Homebrew Packages","text":"App Formulae / Cask Description Age <code>age</code> Secure file encryption tool + Go library, follows age-encryption.org/v1. AWS CLI v2 <code>awscli</code> Official AWS command-line interface. AWS IAM Authenticator <code>aws-iam-authenticator</code> EKS IAM credential provider. Azure CLI <code>azure-cli</code> Official Microsoft Azure CLI 2.0. Bat <code>bat</code> Drop-in <code>cat</code> replacement with syntax highlighting and git integration. btop++ <code>btop</code> Continuation of legacy <code>htop</code>. BuildKit <code>buildkit</code> Dockerfile-agnostic builder toolkit. Default builder for <code>docker build</code>. diff-so-fancy <code>diff-so-fancy</code> \"Fancy\" diff tool. eksctl <code>eksctl</code> Official AWS EKS command-line tool. eza <code>eza</code> Modern <code>ls</code> replacement. git <code>git</code> Up-to-date git distribution. git-delta <code>git-delta</code> Syntax-highlighting pagination for git and diff output. gnupg <code>gnupg</code> Implementation of the OpenPGP standard. gopass <code>gopass</code> Updated Unix password manager written in Go. helm <code>helm</code> Kubernetes package manager. ipcalc <code>ipcalc</code> Calculate network masks from a given IP address. jq <code>jq</code> Command-line JSON processor. kubectx <code>kubectx</code> Kubernetes context switcher. Kubernetes CLI <code>kubernetes-cli</code> Kubernetes command-line interface. neofetch <code>neofetch</code> System information script.  netcat <code>netcat</code> Network connection management utility. nmap <code>nmap</code> Port scanning utility. OATH Toolkit <code>oath-toolkit</code> One-time password authentication tools. OpenSSH <code>openssh</code> SSH connectivity tools. p11-kit <code>p11-kit</code> Library to load and enumerate PKCS#11 modules. pass <code>pass</code> Password Store password manager. pass-otp <code>pass-otp</code> TOTP extension for <code>pass</code>. pinentry <code>pinentry</code> Passphrase entry dialog utilizing the Assuan protocol. pinentry-mac <code>pinentry-mac</code> pin-entry for GPG on macOS. PowerShell <code>powershell</code> (cask) Microsoft PowerShell for macOS. qrencode <code>qrencode</code> QR Code generation. readline <code>readline</code> Library for command-line editing. Terraform <code>terraform</code> Infrastructure orchestration.  tldr <code>tldr</code> Simplified man pages. tree <code>tree</code> Display directories as trees. watch <code>watch</code> Executes a program periodically, showing output fullscreen. wifi-password <code>wifi-password</code> Show the current WiFi network password. xbar <code>xbar</code> View output from scripts in the macOS menu bar. xz <code>xz</code> General-purpose data compression with high ratios. YubiKey Manager <code>ykman</code> Tool for managing YubiKey configuration. yq <code>yq</code> Process YAML, JSON, XML, CSV, and properties documents from terminal. Yubico PIV Tool <code>yubico-piv-tool</code> Command-line tool for the YubiKey PIV application. zbarimg <code>zbar</code> Suite of barcode reading tools. zsh-autosuggestions <code>zsh-autosuggestions</code> Fish-like autosuggestions for zsh. zsh-completions <code>zsh-completion</code> Additional completion definitions for zsh. zsh-syntax-highlighting <code>zsh-syntax-highlighting</code> Fish-like syntax highlighting for zsh."},{"location":"scripts/bash/","title":"Bash / ZSH Profile","text":""},{"location":"scripts/bash/#formatting","title":"Formatting","text":".zsh_formats<pre><code>color_nocolor='\\033[0m'\ncolor_yellow='\\033[0;93m'\ncolor_yellow2='\\033[1;93m'\ncolor_yellow_italic='\\033[3;93m'\ncolor_yellow_underline='\\033[4;93m'\ncolor_yellow_blink='\\033[5;93m'\ncolor_grey='\\033[0;37m'\ncolor_red='\\033[0;31m'\ncolor_red2='\\033[1;31m'\ncolor_green='\\033[0;32m'\ncolor_green2='\\033[1;32m'\ncolor_blue='\\033[0;34m'\ncolor_blue2='\\033[1;34m'\ncolor_purple='\\033[0;35m'\ncolor_purple2='\\033[1;35m'\ncolor_cyan='\\033[0;36m'\ncolor_cyan2='\\033[1;36m'\n\ngreenplus='\\033[1;32m[++]\\033[0m'\ngreenarrow='\\033[1;32m[-&gt;]\\033[0m'\nblinkgreenarrow='\\033[1;32m[\\033[5;32m-&gt;\\033[0m\\033[1;32m]\\033[0m'\ngreenminus='\\033[1;32m[--]\\033[0m'\ngreenstar='\\033[1;32m[**]\\033[0m'\nyellowstar='\\033[1;93m[**]\\033[0m'\nyellowarrow='\\033[1;93m[-&gt;]\\033[0m'\nblinkyellowarrow='\\033[1;93m[\\033[5;93m-&gt;\\033[0m\\033[1;93m]\\033[0m'\nbluestar='\\033[1;34m[**]\\033[0m'\ncyanstar='\\033[1;36m[**]\\033[0m'\ncyanarrow='\\033[1;36m[-&gt;]\\033[0m'\nredminus='\\033[1;31m[--]\\033[0m'\nredexclaim='\\033[1;31m[!!]\\033[0m'\nredstar='\\033[1;31m[**]\\033[0m'\nredarrow='\\033[1;31m[-&gt;]\\033[0m'\nblinkredarrow='\\033[1;31m[\\033[5;31m-&gt;\\033[0m\\033[1;31m]\\033[0m'\nblinkwarn='\\033[1;93m[\\033[5;93m**\\033[0m\\033[1;93m]\\033[0m'\nblinkexclaim='\\033[1;31m[\\033[5;31m!!\\033[0m\\033[1;31m]\\033[0m'\nfourblinkexclaim='\\033[1;31m[\\033[5;31m!!!!\\033[0m\\033[1;31m]\\033[0m'\n</code></pre>"},{"location":"scripts/bash/#aliases-and-helpers","title":"Aliases and Helpers","text":".zsh_aliases<pre><code># General\nalias ll=\"eza -lahHgoO --icons=always --group-directories-first --time-style long-iso --git --git-repos\"\n\nalias up=\"cd ..\"\nalias up2=\"cd ../..\"\nalias up3=\"cd ../../..\"\nalias up4=\"cd ../../../..\"\nalias up5=\"cd ../../../../..\"\n\nalias cat=\"bat -P\"\nalias cat-page=\"bat\"\n\ngetinfo() {\n    if [ -f $1 ]; then\n        printf \"\\n${color_yellow2}File Information:${color_nocolor} \\\"stat -x ${1}\\\"\\n\"\n        stat -x $1\n        printf \"\\n${color_yellow2}Readlink:${color_nocolor} \"\n        readlink $1\n        printf \"\\n${color_yellow2}Available Metadata:${color_nocolor}\\n\"\n        exiftool $1\n    else\n        echo \"${color_yellow_italic}File not found.${color_nocolor}\"\n    fi\n}\n\n# Network\nalias listen='lsof -nP -i4 | grep LISTEN'\nalias hosts='code /etc/hosts'\nalias flushdns=\"sudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache\"\n\n# Shell / macOS\nalias profile='code ~/.zshrc'\nalias sourceprofile='source ~/.zshrc'\nalias fcount=\"find . -type f | wc -l\"\nalias newguid='uuidgen | tr \"[:upper:]\" \"[:lower:]\"'\nalias listsnapshots=\"sudo tmutil listlocalsnapshots /\"\nalias delsnapshot=\"sudo tmutil deletelocalsnapshots \"\n\n# Pass / GoPass\nalias pf=\"pass find \"\nalias gpf=\"gopass find \"\nalias gpl=\"gopass list \"\nalias gp=\"gopass \"\nalias gpo=\"gopass otp -o \"\nalias gpolist=\"gopass list mfa\"\nalias cpass=\"gopass --clip \"\n\n# Kubernetes\nalias getKubeSA='kubectl get sa -o custom-columns=\"SERVICE-ACCOUNTS\":.metadata.name,\"NAMESPACE\":.metadata.namespace,\"ROLE\":.metadata.annotations.\"eks\\.amazonaws\\.com/role-arn\",\"CREATED\":.metadata.creationTimestamp'\nalias getKubeService='kubectl get services -o wide'\nalias getKubePods=\"customPodInfo \"\n\ncustomPodInfo() {\n    cContext=$(kubectl config current-context)\n    cNamespace=$(kubens -c)\n    echo \"Context: ${color_cyan2}${cContext}${color_nocolor}\"\n    echo \"Namespace: ${color_cyan2}${cNamespace}${color_nocolor}\"\n    echo -e \"\\n${color_yellow2}=== Standard Pod Information ===${color_nocolor}\\n\"\n    kubectl get pods -o wide \n    echo -e \"\\n${color_yellow2}=== Extended Pod Information ===${color_nocolor}\\n\"\n    kubectl get pods -o custom-columns=\"POD-NAME\":.metadata.name,\"APP\":.metadata.labels.app,\"CONTAINERS\":'.spec.containers[*].name',\"SVC-ACCT\":.spec.serviceAccount,\"MEM-REQ\":'.spec.containers[*].resources.requests.memory',\"MEM-MAX\":'.spec.containers[*].resources.limits.memory',\"CPU-REQ\":'.spec.containers[*].resources.requests.cpu',\"CPU-MAX\":'.spec.containers[*].resources.limits.cpu'\n}\n\n# Web / Testing\nalias decode=\"base64decode \"\nbase64decode() { echo \"$1\" | base64 --decode; echo; }\n\nalias encode=\"base64encode \"\nbase64encode() { echo -n \"$1\" | base64; echo; }\n\nalias encodefile=\"base64file \"\nbase64file() { openssl base64 -A -in $1 -out $2; }\n\nexpandUrl() { curl -sIL $1 | grep ^Location; }\nwebtest() { curl -Is $1 -L | grep HTTP/; }\nwebheaders() { curl -I --http2 $1 }\n\n# Miscellaneous\nalias fingerprint=\"ssh-keygen -lf \"\n\nfdiff() {\n    if [[ \"$#\" == \"2\" ]]; then\n        diff -u $1 $2 | diff-so-fancy\n    else\n        printf \"\\n ${blinkwarn} Only two inputs supported.\"\n    fi\n}\n\nfdiffside() {\n    if [[ \"$#\" == \"2\" ]]; then\n        delta --paging never --dark --side-by-side --line-numbers $1 $2\n    else\n        printf \"\\n ${blinkwarn} Only two inputs supported.\"\n    fi\n}\n</code></pre>"},{"location":"scripts/bash/bash-aws-auth/","title":"AWS MFA Authentication Helper","text":"<p>The helper script below assumes the following configuration:</p> <ul> <li>MFA key is stored on Yubikey.<ul> <li>Key name is set appropriately to match Yubikey. <code>(line 11)</code></li> </ul> </li> <li>AWS IAM MFA ARN is set appropriately. <code>(line 17)</code></li> </ul> <p>How it works...</p> <p>Once authenticated, the script adds a new entry to the bottom of <code>~/.aws/credentials</code> labeled <code>[cli]</code>; however, session variables are also assigned. As long as you remain in the same shell session, you will not have to pass <code>--profile cli</code> with each command. </p> <p>Additional terminal windows is a new session and can't use the previously set local variables, so to utilize the authentication performed earlier, pass <code>--profile cli</code> with each command to utilize the existing valid authentication. Example: <code>aws s3 ls --profile cli</code></p> <p>Performing a second authentication in a different window will overwrite the previous authentication's token and invalidate that session.</p> <pre><code>alias awslogin=\"awsToken \"\n\nawsToken() { \n    ykTest=$(ykman list)\n    if [ -z \"$ykTest\" ]; then\n        printf \"${color_yellow_italic}YubiKey not detected.${color_nocolor}\\n\"\n        printf \"Insert key and try again.\\n\"\n        return 1\n    fi\n    printf \"${cyanarrow}${color_cyan2} YubiKey detected...${color_nocolor}\\n\"\n    ykOathValue=\"AWS [Prod]:name@example.com\" # (1)\n    unset AWS_SESSION_TOKEN;\n    unset AWS_SECRET_ACCESS_KEY;\n    unset AWS_ACCESS_KEY_ID;\n    unset PROFTXT;\n    unset AWSUME_PROFILE;\n    MFA=\"arn:aws:iam::123456789876:mfa/name@example.com\" # (2)\n    MFACODE=$(ykman oath accounts code -s \"$ykOathValue\")\n    if [ $? -eq 1 ]; then\n        printf \"${color_yellow_italic}Correct OATH token not found on YubiKey!${color_nocolor}\\n\"\n        return 1\n    fi\n    AWSCREDS=`aws sts get-session-token --serial-number $MFA --token-code $MFACODE`;\n    ACCESS_KEY=`echo $AWSCREDS | jq .Credentials.AccessKeyId`\n    SECRET_KEY=`echo $AWSCREDS | jq .Credentials.SecretAccessKey`\n    SESSION_TOKEN=`echo $AWSCREDS | jq .Credentials.SessionToken`\n    export AWS_ACCESS_KEY_ID=`echo $ACCESS_KEY | sed -e 's/^\"//' -e 's/\"$//'`\n    export AWS_SECRET_ACCESS_KEY=`echo $SECRET_KEY | sed -e 's/^\"//' -e 's/\"$//'`\n    export AWS_SESSION_TOKEN=`echo $SESSION_TOKEN | sed -e 's/^\"//' -e 's/\"$//'`\n    export PROFTXT=\"XYZ AWS\" # (3)\n    export AWSUME_PROFILE=\"prod\" # (4)\n    echo \"$(awk '/cli/{n=4}; n {n--; next}; 1' $HOME/.aws/credentials)\" &gt; $HOME/.aws/credentials\n    echo \"\" &gt;&gt; $HOME/.aws/credentials\n    echo \"[cli]\" &gt;&gt; $HOME/.aws/credentials\n    TMP1=$(echo \"aws_access_key_id = $ACCESS_KEY\" | tr -d \\\")\n    echo $TMP1 &gt;&gt; $HOME/.aws/credentials\n    TMP2=$(echo \"aws_secret_access_key = $SECRET_KEY\" | tr -d \\\")\n    echo $TMP2 &gt;&gt; $HOME/.aws/credentials\n    TMP3=$(echo \"aws_session_token = $SESSION_TOKEN\" | tr -d \\\")\n    echo $TMP3 &gt;&gt; $HOME/.aws/credentials\n    echo -e \"\\n\\033[7;33\"\"m NOTICE - NOTICE - NOTICE - NOTICE - NOTICE \\033[0m\"\n    echo -e \"\\033[5;33\"\"m ==&gt; -&gt; DLRDMV AWS ACCOUNT ACTIVE &lt;- &lt;== \\033[0m\"\n    echo \" \"\n    export AWS_PAGER='' &amp;&amp; aws sts get-caller-identity --output yaml &amp;&amp; export AWS_PAGER='less'\n}\n\n# Quickly identify which profile you're authenticated against.\nawsprofile() { \n    if [ -z \"$PROFTXT\" ]\n    then\n        echo \"${color_yellow_italic}NO PROFILE IS ACTIVE${color_nocolor}\"\n    else\n        echo -e \"\\033[7;33\"\"m =========================================== \\033[0m\"\n        echo -e \"\\033[5;33\"\"m ==&gt; -&gt; $PROFTXT ACCOUNT ACTIVE &lt;- &lt;== \\033[0m\"\n        echo -e \"\\033[7;33\"\"m =========================================== \\033[0m\"\n        echo \" \"\n        export AWS_PAGER='' &amp;&amp; aws sts get-caller-identity --output yaml &amp;&amp; export AWS_PAGER='less'\n    fi\n}\n</code></pre> <ol> <li>Key value must match the name as defined when the MFA value was added to Yubikey.</li> <li>MFA ARN is located under the \"Security credentials\" tab of the IAM user.</li> <li>If you regularly access multiple AWS accounts, <code>PROFTXT</code> can be used to quickly identify which environment is currently active.</li> <li>p10k can read AWSUME_PROFILE (<code>/internal/p10k.zsh</code>) to show this value on the terminal prompt. It's useful for seeing at a glance which environment your command will apply to.  </li> </ol>"},{"location":"scripts/bash/bash-aws-sg-audit/","title":"AWS Security Group Audit","text":"<p>A \"quick and dirty\" method of pulling AWS Security Group details to check for changes at different intervals. The script below generates five (5) files, each suffixed with a timestamp (<code>yyyy-mm-dd-hhmmss</code>):</p> File Description <code>sg-audit</code> List of each Security Group and all of it's ingress / egress rules. <code>sg-listing</code> List of all Security Groups. Includes Security Group ID, SG Name, and Description. <code>ec2-sec-groups</code> List of all Security Groups assigned to all EC2 instances. <code>rds-sec-groups</code> List of all Security Groups assigned to all RDS instances. <code>alb-sec-groups</code> List of all Security Groups assigned to all ALBs. <p>Assumptions built-in to the script:</p> <ul> <li>Security Groups have tags to identify them by <code>Name</code> and <code>Environment</code>.</li> <li>CIDR ranges in Security Groups are finite and one of only Class A, B, or C subnets.</li> <li>Modify <code>profile</code> and <code>region</code> accordingly.</li> </ul> security-group-audit.sh<pre><code>#!/bin/bash\n# Get a full accounting of Security Groups\nprofile=\"XXX\"\nregion=\"XX-XXXX-XX\"\n\nnow=$(date +\"%Y-%m-%d-%H%M%S\")\nsaveFile=\"sg-audit-$now.txt\"\nec2File=\"ec2-sec-groups-$now.txt\"\nrdsFile=\"rds-sec-groups-$now.txt\"\nalbFile=\"alb-sec-groups-$now.txt\"\n\nold_IFS=$IFS; IFS=$'\\n'\n\n# Save a listing of all Security Groups to disk\nsgListFile=\"sg-listing-$now.txt\"\naws ec2 describe-security-groups --profile $profile --region $region --query 'SecurityGroups[*].{GroupId:GroupId,GroupName:GroupName,Description:Description}' --output text &gt; $sgListFile\n\nsgCount=$(wc -l sg-listing-$now.txt | xargs | awk '{print $1}')\necho -e \"$sgCount Security Group(s) identified.\\n\"\necho -e \"Security Group audit file will be saved to $saveFile, tab-delimited.\\n\"\n\necho \"Heading for Security Group audit data are sectioned:\"\necho -e \"SecGroupId\\tSecGroupName\\tVPC\\tDescr\\tNameTag\\tEnvironmentTag\"\necho -e \"\\tDirection\\tProtocol\\tFromPort\\tToPort\\tSource\\tDescriptions-or-Comments\\n\"\n\ncat $sgListFile | while read line\ndo\n    securityGroup=(`echo $line | awk -F\\t '{print $2}'`)\n    sgroup=$(aws ec2 describe-security-groups --profile $profile --region $region --group-ids $securityGroup)\n\n    # Security Group properties\n    sgId=$(echo $sgroup | jq -r '.SecurityGroups[].GroupId')\n    sgGroupName=$(echo $sgroup | jq -r '.SecurityGroups[].GroupName')\n    sgDesc=$(echo $sgroup | jq -r '.SecurityGroups[].Description')\n    sgVpc=$(echo $sgroup | jq -r '.SecurityGroups[].VpcId')\n    sgTagName=$(echo $sgroup | jq -r '.SecurityGroups[].Tags[] | select(.Key == \"Name\") | .Value' 2&gt;/dev/null)\n    sgTagEnv=$(echo $sgroup | jq -r '.SecurityGroups[].Tags[] | select(.Key == \"Environment\") | .Value' 2&gt;/dev/null)\n\n    echo -e \"$sgId\\t$sgGroupName\\t$sgVpc\\t$sgDesc\\t$sgTagName\\t$sgTagEnv\"\n    printf \"$sgId\\t$sgGroupName\\t$sgVpc\\t$sgDesc\\t$sgTagName\\t$sgTagEnv\\n\" &gt;&gt; $saveFile\n\n    # process INGRESS rules\n    for rule in $(echo $sgroup | jq -r '.SecurityGroups[].IpPermissions[] | @base64'); do\n        _jq() {\n            echo ${rule} | base64 --decode | jq -r ${1}\n        }\n        ipProtocol=$(_jq '.IpProtocol')\n        fromPort=$(_jq '.FromPort')\n        toPort=$(_jq '.ToPort')\n        ipRanges=$(_jq '.IpRanges[]')\n        groupPairs=$(_jq '.UserIdGroupPairs[]')\n\n        if [[ \"$ipProtocol\" == \"-1\" ]]; then\n            fromPort=\"ALL\"\n            toPort=\"ALL\"\n            ipProtocol=\"ALL\"\n        fi\n\n        # Process Security Groups\n        for group in $(echo $groupPairs | jq -r '. | @base64'); do\n            _jq2() {\n                echo ${group} | base64 --decode | jq -r ${1}\n            }\n            groupId=$(_jq2 '.GroupId')\n            groupDesc=$(_jq2 '.Description')\n            groupAcct=$(_jq2 '.UserId')\n            groupName=\"\"\n            sgDesc=\"\"\n\n            sgDetail=$(grep $groupId $sgListFile)\n\n            if [ $? -eq 0 ]; then\n                groupName=(`echo $sgDetail | awk -F\\t '{print $3}'`)\n                sgDesc=(`echo $sgDetail | awk -F\\t '{print $1}'`)\n            fi\n\n            echo -e \"\\tINGRESS\\t$ipProtocol\\t$fromPort\\t$toPort\\t$groupId\\t$groupName\\t$groupDesc\"\n            printf \"\\tINGRESS\\t$ipProtocol\\t$fromPort\\t$toPort\\t$groupId\\t$groupName\\t$groupDesc\\n\" &gt;&gt; $saveFile\n        done\n\n        # Process CIDR Ranges\n        for cidr in $(echo $ipRanges | jq -r '. | @base64'); do\n            _jq3() {\n                echo ${cidr} | base64 --decode | jq -r ${1}\n            }\n            comment=\"\"\n            cidrIp=$(_jq3 '.CidrIp')\n            cidrDesc=$(_jq3 '.Description')\n\n            if [ -z \"$cidrDesc\" ] || [[ $cidrDesc == \"null\" ]]; then\n                case $cidrIp in\n                    \"10.0.0.0/8\")\n                        cidrDesc=\"Class A Subnet\";;\n                    \"172.16.0.0/12\")\n                        cidrDesc=\"Class B Subnet\";;\n                    \"192.168.0.0/16\")\n                        cidrDesc=\"Class C Subnet\";;\n                esac\n            fi\n\n            if [[ \"$cidrIp\" == \"0.0.0.0/0\" ]] || [[ \"$cidrIp\" == \"::/0\" ]]; then\n                comment=\"** GLOBAL **\"\n            fi\n\n            echo -e \"\\tINGRESS\\t$ipProtocol\\t$fromPort\\t$toPort\\t$cidrIp\\t\\t\\t$cidrDesc\\t$comment\"\n            printf \"\\tINGRESS\\t$ipProtocol\\t$fromPort\\t$toPort\\t$cidrIp\\t\\t\\t$cidrDesc\\t$comment\\n\" &gt;&gt; $saveFile\n        done\n    done\n\n    # process EGRESS rules\n    for rule in $(echo $sgroup | jq -r '.SecurityGroups[].IpPermissionsEgress[] | @base64'); do\n        _jq() {\n            echo ${rule} | base64 --decode | jq -r ${1}\n        }\n        ipProtocol=$(_jq '.IpProtocol')\n        fromPort=$(_jq '.FromPort')\n        toPort=$(_jq '.ToPort')\n        ipRanges=$(_jq '.IpRanges[]')\n        groupPairs=$(_jq '.UserIdGroupPairs[]')\n\n        if [[ \"$ipProtocol\" == \"-1\" ]]; then\n            fromPort=\"ALL\"\n            toPort=\"ALL\"\n            ipProtocol=\"ALL\"\n        fi\n\n        # Process Security Groups\n        for group in $(echo $groupPairs | jq -r '. | @base64'); do\n            _jq2() {\n                echo ${group} | base64 --decode | jq -r ${1}\n            }\n            groupId=$(_jq2 '.GroupId')\n            groupDesc=$(_jq2 '.Description')\n            groupAcct=$(_jq2 '.UserId')\n            groupName=\"\"\n            sgDesc=\"\"\n\n            sgDetail=$(grep $groupId $sgListFile)\n\n            if [ $? -eq 0 ]; then\n                groupName=(`echo $sgDetail | awk -F\\t '{print $3}'`)\n                sgDesc=(`echo $sgDetail | awk -F\\t '{print $1}'`)\n            fi\n\n            echo -e \"\\tEGRESS\\t$ipProtocol\\t$fromPort\\t$toPort\\t$groupId\\t$groupName\\t$groupDesc\"\n            printf \"\\tEGRESS\\t$ipProtocol\\t$fromPort\\t$toPort\\t$groupId\\t$groupName\\t$groupDesc\\n\" &gt;&gt; $saveFile\n        done\n\n        # Process CIDR Ranges\n        for cidr in $(echo $ipRanges | jq -r '. | @base64'); do\n            _jq3() {\n                echo ${cidr} | base64 --decode | jq -r ${1}\n            }\n            comment=\"\"\n            cidrIp=$(_jq3 '.CidrIp')\n            cidrDesc=$(_jq3 '.Description')\n\n            if [ -z \"$cidrDesc\" ] || [[ $cidrDesc == \"null\" ]]; then\n                case $cidrIp in\n                    \"10.0.0.0/8\")\n                        cidrDesc=\"Class A Subnet\";;\n                    \"172.16.0.0/12\")\n                        cidrDesc=\"Class B Subnet\";;\n                    \"192.168.0.0/16\")\n                        cidrDesc=\"Class C Subnet\";;\n                esac\n            fi\n\n            if [[ \"$cidrIp\" == \"0.0.0.0/0\" ]] || [[ \"$cidrIp\" == \"::/0\" ]]; then\n                comment=\"** GLOBAL **\"\n            fi\n\n            echo -e \"\\tEGRESS\\t$ipProtocol\\t$fromPort\\t$toPort\\t$cidrIp\\t\\t\\t$cidrDesc\\t$comment\"\n            printf \"\\tEGRESS\\t$ipProtocol\\t$fromPort\\t$toPort\\t$cidrIp\\t\\t\\t$cidrDesc\\t$comment\\n\" &gt;&gt; $saveFile\n        done\n    done\ndone\necho \" \"\necho \" ----- \"\necho \" \"\n\n# Collect info about EC2, RDS, ALB -- these resources use the Security Groups identified above\nec2Instances=$(aws ec2 describe-instances --profile $profile --region $region --query 'Reservations[*].Instances[*].{InstanceId:InstanceId,Name:Tags[?Key==`Name`]|[0].Value,VPC:VpcId,Subnet:SubnetId,SecurityGroups:SecurityGroups[*]}')\nrdsInstances=$(aws rds describe-db-instances --profile $profile --region $region --query 'DBInstances[*].{DBInstance:DBInstanceIdentifier,SubnetGroup:DBSubnetGroup.DBSubnetGroupName,SubnetDesc:DBSubnetGroup.DBSubnetGroupDescription,VPC:DBSubnetGroup.VpcId,MultiAZ:MultiAZ,Encrypted:StorageEncrypted,DeleteProtection:DeletionProtection,SecurityGroups:VpcSecurityGroups[*]}')\nalbInstances=$(aws elbv2 describe-load-balancers --profile $profile --region $region --query 'LoadBalancers[*].{LBName:LoadBalancerName,Direction:Scheme,VPC:VpcId,Type:Type,SecurityGroups:SecurityGroups[*]}')\n\n# Parse EC2 Instance Associations\necho -e \"EC2 Security Group associations file will be saved to $ec2File, tab-delimited.\\n\"\necho -e \"InstanceId\\tInstanceName\\tVPC\\tSubnet\\tSecGroupId\\tSecGroupName\"\nprintf \"InstanceId\\tInstanceName\\tVPC\\tSubnet\\tSecGroupId\\tSecGroupName\\n\" &gt;&gt; $ec2File\nfor ec2 in $(echo $ec2Instances | jq -r '.[] | @base64'); do\n    ec2=$(echo \"$ec2\" | base64 --decode | jq -r .[])\n    _jq() {\n        echo ${ec2} | jq -r ${1}\n    }\n\n    instId=$(_jq '.InstanceId')\n    instName=$(_jq '.Name')\n    instVpc=$(_jq '.VPC')\n    instSubnet=$(_jq '.Subnet')\n    instSGroups=$(_jq '.SecurityGroups[]')\n\n    for instSG in $(echo $instSGroups | jq -r '. | @base64'); do\n        _jq2() {\n            echo ${instSG} | base64 --decode | jq -r ${1}\n        }\n        instSgId=$(_jq2 '.GroupId')\n        instGName=$(_jq2 '.GroupName')\n\n        echo -e \"$instId\\t$instName\\t$instVpc\\t$instSubnet\\t$instSgId\\t$instGName\"\n        printf \"$instId\\t$instName\\t$instVpc\\t$instSubnet\\t$instSgId\\t$instGName\\n\" &gt;&gt; $ec2File\n    done\ndone\necho \" \"\necho \" ----- \"\necho \" \"\n\n# Parse RDS Instance Associations\necho -e \"RDS Security Group associations file will be saved to $rdsFile, tab-delimited.\\n\"\necho -e \"DatabaseId\\tSubnetGroup\\tSubnetDescr\\tVPC\\tSecGroupId\\tSecGroupName\"\nprintf \"DatabaseId\\tSubnetGroup\\tSubnetDescr\\tVPC\\tSecGroupId\\tSecGroupName\\n\" &gt;&gt; $rdsFile\nfor rds in $(echo $rdsInstances | jq -r '.[] | @base64'); do\n    _jq() {\n        echo ${rds} | base64 --decode | jq -r ${1}\n    }\n\n    dbId=$(_jq '.DBInstance')\n    dbSubnetGroup=$(_jq '.SubnetGroup')\n    dbSubnetDesc=$(_jq '.SubnetDesc')\n    dbVpc=$(_jq '.VPC')\n    dbSGroups=$(_jq '.SecurityGroups[]')\n\n    for dbSG in $(echo $dbSGroups | jq -r '. | @base64'); do\n        _jq2() {\n            echo ${dbSG} | base64 --decode | jq -r ${1}\n        }\n        dbSgId=$(_jq2 '.VpcSecurityGroupId')\n        dbSgName=\"\"\n\n        dbSgDetail=$(grep $dbSgId $sgListFile)\n        if [ $? -eq 0 ]; then\n            dbSgName=(`echo $dbSgDetail | awk -F\\t '{print $3}'`)\n        fi\n\n        echo -e \"$dbId\\t$dbSubnetGroup\\t$dbSubnetDesc\\t$dbVpc\\t$dbSgId\\t$dbSgName\"\n        printf \"$dbId\\t$dbSubnetGroup\\t$dbSubnetDesc\\t$dbVpc\\t$dbSgId\\t$dbSgName\\n\" &gt;&gt; $rdsFile\n    done\ndone\necho \" \"\necho \" ----- \"\necho \" \"\n\n# Parse ALB Instance Associations\necho -e \"LoadBalancer Security Group associations file will be saved to $albFile, tab-delimited.\\n\"\necho -e \"ALBName\\tSchema\\tVPC\\tType\\tSecGroupId\\tSecGroupName\"\nprintf \"ALBName\\tSchema\\tVPC\\tType\\tSecGroupId\\tSecGroupName\\n\" &gt;&gt; $albFile\nfor alb in $(echo $albInstances | jq -r '.[] | @base64'); do\n    _jq() {\n        echo ${alb} | base64 --decode | jq -r ${1}\n    }\n\n    albName=$(_jq '.LBName')\n    albDir=$(_jq '.Direction')\n    albVpc=$(_jq '.VPC')\n    albType=$(_jq '.Type')\n    albSGroups=$(_jq '.SecurityGroups[]')\n\n    for albSG in $albSGroups; do\n        albSgId=\"$albSG\"\n        albSgName=\"\"\n\n        albSgDetail=$(grep $albSgId $sgListFile)\n        if [ $? -eq 0 ]; then\n            albSgName=(`echo $albSgDetail | awk -F\\t '{print $3}'`)\n        fi\n\n        echo -e \"$albName\\t$albDir\\t$albVpc\\t$albType\\t$albSgId\\t$albSgName\"\n        printf \"$albName\\t$albDir\\t$albVpc\\t$albType\\t$albSgId\\t$albSgName\\n\" &gt;&gt; $albFile\n    done\ndone\necho \" \"\necho \" ----- \"\necho \" \"\n\nIFS=$old_IFS\n\necho \" *** SCRIPT COMPLETE ***\"\n</code></pre>"},{"location":"scripts/pgp/","title":"PGP Keys","text":""},{"location":"scripts/pgp/#general-information","title":"General Information","text":"<ul> <li> <p>Key Markings:</p> Mark Description <code>sec</code> SECret key <code>ssb</code> Secret SuBkey <code>pub</code> PUBlic key <code>sub</code> public SUBkey </li> <li> <p>Key Flags: (1)</p> <ol> <li>RFC4880-5.2.3.21</li> </ol> Flag Character Description <code>0x01</code> <code>C</code> Key Certification <code>0x02</code> <code>S</code> Sign Data <code>0x04</code> <code>E</code> Encrypt Communications <code>0x08</code> <code>E</code> Encrypt Storage <code>0x10</code> <code></code> Split Key <code>0x20</code> <code>A</code> Authentication <code>0x80</code> <code></code> Shared key <p><code>0x04</code> + <code>0x08</code> = <code>0xC</code> (encrypt both communications &amp; storage)</p> </li> </ul> <p>See also, Signature Classes (RFC4880-5.2)</p>"},{"location":"scripts/pgp/#anatomy","title":"Anatomy","text":"<pre><code>$ gpg --list-secret-keys --with-subkey-fingerprint\n\n[keyboxd]\n---------\nsec#  ed25519 YYYY-MM-DD [C]\n      7777777777777777777777777777777777777777\nuid           [ultimate] Joe Schmoe &lt;joe@schmoe.com&gt;\nssb&gt;  ed25519 YYYY-MM-DD [S]\n      6666666666666666666666666666666666666666\n      Card serial no. = 0006 12345678\nssb&gt;  cv25519 YYYY-MM-DD [E]\n      5555555555555555555555555555555555555555\n      Card serial no. = 0006 12345678\nssb&gt;  ed25519 YYYY-MM-DD [A]\n      4444444444444444444444444444444444444444\n      Card serial no. = 0006 12345678\n</code></pre> <p>PGP keys are most commonly identified via their <code>fingerprint</code>. These fingerprints may or may not include spaces - the following examples are the most common ways keys are written: * <code>74BD90B590F9AA984391707383308CA85B65951C</code> * <code>74BD 90B5 90F9 AA98 4391 7073 8330 8CA8 5B65 951C</code></p> <p>Additionally, keys may be referred to by their \"id\" (or \"key id\"). A Key ID consists of the last four chunks from it's signature. Using the example above, the Key ID is:  <code>83308CA85B65951C</code></p> <pre><code>Fingerprint:  74BD 90B5 90F9 AA98 4391 7073 8330 8CA8 5B65 951C\n     Key ID:                                ^^^^ ^^^^ ^^^^ ^^^^\n</code></pre> <code>uid</code> | User ID <p>Identifies the user and level of trust for the user ID.</p> <ul> <li><code>[ultimate]</code> : Fully trusted (usually your own keys)</li> <li><code>[full]</code> : Fully trusted by you</li> <li><code>[marginal]</code> : Partially trusted</li> <li><code>[unknown]</code> : No explicit trust level assigned</li> <li><code>[expired]</code> : Key has expired</li> <li><code>[revoked]</code> : Key has been revoked</li> <li><code>[disabled]</code> : Key has been disabled</li> </ul> <code>sec#</code> <p>Indicates the secret key material is not available (ex: key is stored on a smartcard or external hardware)</p> <code>ssb&gt;</code> <p>Indicates the secret key material is stored externally (as above), but accessible. Keys have been stubbed.</p>"},{"location":"scripts/pgp/#examining-key-files","title":"Examining Key Files","text":"<pre><code>$ gpg --show-keys -vvv --with-subkey-fingerprint pub.key\n\n$ gpg --show-keys -vvv --with-subkey-fingerprint sub.key\n</code></pre>"},{"location":"scripts/pgp/#importing-keys","title":"Importing Keys","text":"<p>Warning</p> <p>Importing private subkeys is discouraged. Store subkeys to external devices (like Yubikey) and only stub your private subkeys locally. </p> <pre><code>$ gpg --import pub.key\n</code></pre>"},{"location":"scripts/pgp/#from-a-keyserver","title":"From a Keyserver","text":"<pre><code>$ gpg --keyserver hkps://keys.openpgp.org --recv-keys 0x83308CA85B65951C\n\n# If you've not already imported a key:\ngpg: key 83308CA85B65951C: public key \"Bryan Dodd &lt;bryan@dodd.dev&gt;\" imported\ngpg: Total number processed: 1\ngpg:               imported: 1\n\n# If you've already previously imported a key, you'll see:\ngpg: key 83308CA85B65951C: \"Bryan Dodd &lt;bryan@dodd.dev&gt;\" not changed\ngpg: Total number processed: 1\ngpg:              unchanged: 1\n</code></pre>"},{"location":"scripts/pgp/#direct-download","title":"Direct Download","text":"<p>Using a known public key URL, individual keys can be imported manually. <pre><code>$ curl https://path/to/the/key/bryandodd.asc | gpg --import\n\n# New key:\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1367  100  1367    0     0   8603      0 --:--:-- --:--:-- --:--:--  8762\ngpg: key 83308CA85B65951C: public key \"Bryan Dodd &lt;bryan@dodd.dev&gt;\" imported\ngpg: Total number processed: 1\ngpg:               imported: 1\n\n# Already exists:\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1367  100  1367    0     0   8603      0 --:--:-- --:--:-- --:--:--  8762\ngpg: key 83308CA85B65951C: \"Bryan Dodd &lt;bryan@dodd.dev&gt;\" not changed\ngpg: Total number processed: 1\ngpg:              unchanged: 1\n</code></pre></p>"},{"location":"scripts/pgp/#trusting-keys","title":"Trusting Keys","text":"<pre><code>gpg --edit-key 7777777777777777\n\ngpg (GnuPG) 2.4.3; Copyright (C) 2023 g10 Code GmbH\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nSecret subkeys are available.\n\npub  ed25519/7777777777777777\n     created: YYYY-MM-DD  expires: never       usage: C   \n     trust: unknown       validity: unknown\nssb  ed25519/6666666666666666\n     created: YYYY-MM-DD  expires: never       usage: S   \n     card-no: 0006 12345678\nssb  cv25519/5555555555555555\n     created: YYYY-MM-DD  expires: never       usage: E   \n     card-no: 0006 12345678\nssb  ed25519/4444444444444444\n     created: YYYY-MM-DD  expires: never       usage: A   \n     card-no: 0006 12345678\n[ unknown] (1). Joe Schmoe &lt;joe@schmoe.com&gt;\n\ngpg&gt; trust\n\npub  ed25519/7777777777777777\n     created: YYYY-MM-DD  expires: never       usage: C   \n     trust: unknown       validity: unknown\nssb  ed25519/6666666666666666\n     created: YYYY-MM-DD  expires: never       usage: S   \n     card-no: 0006 12345678\nssb  cv25519/5555555555555555\n     created: YYYY-MM-DD  expires: never       usage: E   \n     card-no: 0006 12345678\nssb  ed25519/4444444444444444\n     created: YYYY-MM-DD  expires: never       usage: A   \n     card-no: 0006 12345678\n[ unknown] (1). Joe Schmoe &lt;joe@schmoe.com&gt;\n\nPlease decide how far you trust this user to correctly verify other users' keys\n(by looking at passports, checking fingerprints from different sources, etc.)\n\n  1 = I don't know or won't say\n  2 = I do NOT trust\n  3 = I trust marginally\n  4 = I trust fully\n  5 = I trust ultimately\n  m = back to the main menu\n\nYour decision? 5\nDo you really want to set this key to ultimate trust? (y/N) y\n</code></pre>"},{"location":"scripts/pgp/#key-stubs","title":"Key Stubs","text":"<p>If your keys were previously saved to Yubikey, you don't want to move copies of your keys onto each computer you use - that would defeat the purpose of having your keys on a secure device like Yubikey. Instead, you want to \"stub out\" your keys so that the machine you're using refers back to your Yubikey for all private key operations. </p> <p>Stubs point to specific keys for specific Yubikey serial numbers. This means GPG will always refer back to the last Yubikey you were using. </p> <p>In order to use multiple Yubikeys with the same key loaded, you must force GPG to re-scan your currently connected Yubikey to re-map your stubs. </p> <pre><code>$ gpg-connect-agent \"scd serialno\" \"learn --force\" /bye\n\nS SERIALNO D1234561234561234561234561234561\nOK\nS PROGRESS learncard k 0 0\nS PROGRESS learncard k 0 0\nS PROGRESS learncard k 0 0\nOK\n</code></pre> <p>You can verify keys are stubbed by listing keys and looking for the <code>&gt;</code> reference after the key identifier:</p> <pre><code>$ gpg --list-secret-keys\n\n[keyboxd]\n---------\nsec#  ed25519 YYYY-MM-DD [C]    # certifying key is not loaded on the machine (or yubikey)\n      7777777777777777777777777777777777777777\nuid           [ultimate] Joe Schmoe &lt;joe@schmoe.com&gt;\nssb&gt;  ed25519 YYYY-MM-DD [S]    # successfully stubbed\nssb&gt;  cv25519 YYYY-MM-DD [E]    # successfully stubbed\nssb&gt;  ed25519 YYYY-MM-DD [A]    # successfully stubbed\n</code></pre>"},{"location":"scripts/pgp/#yubikey-info","title":"Yubikey Info","text":"<p>To retrieve details for the currently loaded Yubikey:</p> <pre><code>$ gpg --card-status -vvv\n\ngpg: using character set 'utf-8'\ngpg: enabled compatibility flags:\ngpg: using subkey 6666666666666666 instead of primary key 7777777777777777\nReader ...........: Yubico YubiKey OTP FIDO CCID\nApplication ID ...: D1234561234561234561234561234561\nApplication type .: OpenPGP\nVersion ..........: 3.4\nManufacturer .....: Yubico\nSerial number ....: 12345678\nName of cardholder: Joe Schmoe\nLanguage prefs ...: en\nSalutation .......: \nURL of public key : [not set]\nLogin data .......: joe@schmoe.com\nSignature PIN ....: not forced\nKey attributes ...: ed25519 cv25519 ed25519\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 6 0 6\nSignature counter : 29\nKDF setting ......: off\nUIF setting ......: Sign=off Decrypt=off Auth=off\nSignature key ....: 6666 6666 6666 6666 6666  6666 6666 6666 6666 6666\n      created ....: 2020-01-28 16:32:56\nEncryption key....: 5555 5555 5555 5555 5555  5555 5555 5555 5555 5555\n      created ....: 2020-01-28 16:36:40\nAuthentication key: 4444 4444 4444 4444 4444  4444 4444 4444 4444 4444\n      created ....: 2020-01-28 16:38:00\nGeneral key info..: sub  ed25519/6666666666666666 2020-01-28 Joe Schmoe &lt;joe@schmoe.com&gt;\nsec#  ed25519/7777777777777777  created: 2020-01-28  expires: never     \nssb&gt;  ed25519/6666666666666666  created: 2020-01-28  expires: never     \n                                card-no: 0006 12345678\nssb&gt;  cv25519/5555555555555555  created: 2020-01-28  expires: never     \n                                card-no: 0006 12345678\nssb&gt;  ed25519/4444444444444444  created: 2020-01-28  expires: never     \n                                card-no: 0006 12345678\n</code></pre> <p>To quickly identify where subkey pointers lead:</p> <pre><code>$ gpg --list-secret-keys --with-subkey-fingerprint -vvv\n\ngpg: using character set 'utf-8'\ngpg: enabled compatibility flags:\ngpg: using pgp trust model\ngpg: key 7777777777777777: accepted as trusted key\n[keyboxd]\n---------\nsec#  ed25519 2020-01-28 [C]\n      7777777777777777777777777777777777777777\nuid           [ultimate] Joe Schmoe &lt;joe@schmoe.com&gt;\nssb&gt;  ed25519 2020-01-28 [S]\n      6666666666666666666666666666666666666666\n      Card serial no. = 0006 12345678\nssb&gt;  cv25519 2020-01-28 [E]\n      5555555555555555555555555555555555555555\n      Card serial no. = 0006 12345678\nssb&gt;  ed25519 2020-01-28 [A]\n      4444444444444444444444444444444444444444\n      Card serial no. = 0006 12345678\n</code></pre> <p>And to identify keygrip files (<code>~/.gnupg/private-keys-v1.d/&lt;keygrip&gt;.key</code>):</p> <pre><code>$ gpg --list-secret-keys --with-keygrip\n\n[keyboxd]\n---------\nsec#  ed25519 YYYY-MM-DD [C]\n      7777777777777777777777777777777777777777\n      Keygrip = ...A47E26C0196ED67BD\nuid           [ultimate] Joe Schmoe &lt;joe@schmoe.com&gt;\nssb&gt;  ed25519 YYYY-MM-DD [S]    \n      Keygrip = ...BA272DF1\nssb&gt;  cv25519 YYYY-MM-DD [E]\n      Keygrip = ...CC740E41\nssb&gt;  ed25519 YYYY-MM-DD [A]\n      Keygrip = ...E566D05C\n</code></pre>"},{"location":"scripts/pgp/pgp/","title":"A quick PGP primer ...","text":"<p>Skip to the walk-through ...</p> <p>Use the \"Creating Your Keys\" heading link on the right side of the page to skip directly to the key generation walk-through.</p>"},{"location":"scripts/pgp/pgp/#what-even-is-pgp","title":"What even is \"PGP\" ?","text":"<p>If you've ever been curious about (or needed to know) how to encrypt files for security, PGP (or Pretty Good Privacy) is a simple and elegant solution - but can be a little intimidating if you've never used it before. Cryptography is a very deep subject with more rabbit holes than Reddit at 11 PM, and I wouldn't even be able get you all the way there myself. Forunately, there are a plethora of excellent resources available online if you're so inclined. This will only cover the basics, but it will be enough to actually enable you to use it. </p> <p>PGP is public-key cryptography. Users generate a unique pair of keys (a public key that can be shared openly and freely, and a private key that must be kept secret) that can be used for:</p> <ul> <li>Encrypting messages so only the intended recipient can read them</li> <li>Encrypting files to backup sensitive data or share over the internet without risking exposure</li> <li>Signing messages or files to prove that they came from you and haven't been tampered with</li> <li>Sign documents and contracts to ensure authenticity</li> </ul>"},{"location":"scripts/pgp/pgp/#identifying-keys","title":"Identifying Keys","text":"Public KeysPrivate Keys <p>Your public key can be thought of as an open mailbox. Anyone can drop a message or package into it, and you share it with people so they can send things to you securely. These keys usually have one of the following file extensions:</p> Extension Description <code>.pub</code> Commonly used to designate public keys, especially with command-line tools like GPG and OpenSSH. <code>.asc</code> Public keys saved in ASCII-armored format (this just means that it can easily be rendered in plain text) for easy sharing. <code>.key</code> A generic file extension that you'll sometimes seen used for public keys. <code>.pgp</code> or <code>.gpg</code> Public keys saved in binary format - meaning they're meant to be read by computers and not people. <p>Your private key is the only key for that mailbox. It's required to retrieve the messages and packages people drop in your mailbox, and must be treated carefully -- you wouldn't want to save this key to a USB and leave it laying around, or save the key to a computer you share with other people. These keys usually have one of the following file extensions:</p> Extension Description <code>none</code> It's not uncommon to see private key files with no file extension at all to emphasize their security and discourage accidental sharing. <code>.asc</code> Private keys saved in ASCII-armored format. <code>.key</code> A generic file extension for private keys, but it is rare to see private PGP keys with this extension. <code>.pgp</code> or <code>.gpg</code> Private keys saved in binary format. <p>Because file naming can be inconsisent, I try to following one of two naming convensions to help keep them sorted:</p> <ul> <li> <p>Convention 1</p> <ul> <li><code>keyname.pub</code> for the public key, and</li> <li><code>keyname</code> for the private key.</li> </ul> </li> <li> <p>Convention 2</p> <ul> <li><code>keyname_pub.asc</code> for the public key, and</li> <li><code>keyname_private.asc</code> for the private key.</li> </ul> </li> </ul> <p>Key confusion</p> <p>If you get confused about which key is which, the keys themselves can be opened in any text editor (provided you saved your keys as ASCII-armored). The first and last lines of each file will identify the type of key you have: <code>-----BEGIN PGP PUBLIC KEY BLOCK-----</code> vs <code>-----BEGIN PGP PRIVATE KEY BLOCK-----</code></p>"},{"location":"scripts/pgp/pgp/#encryption-and-signatures","title":"Encryption and Signatures","text":"<p>The two most common uses for PGP keys are encrypting files or signing them to verify authenticity and that the file hasn't been tampered with. Sometimes you'll see both used together: encryption + signature. </p> <p>Files are encrypted using public keys, and decrypted with private keys. When signing files, the opposite is true: Sign files using your private key, and your recipient can verify the file came from you by validating your signature with your public key. </p> Use-Case Public Key Private Key Files / Messages <code>encrypt</code> <code>decrypt</code> Signing <code>validate</code> <code>sign</code> Encrypting FilesSigning FilesEncrypt and Sign Separately <p>Lets look at an example of encrypting files or messages:</p> <p>Say that you have a file named <code>secret-message.txt</code> that you want to encrypt and send to me. Because you have my public PGP key, you can encrypt the file so that only I can decrypt it. The new encrypted version of the file will have one of two possible filenames<sup>1</sup> based on how you encrypted it:</p> <ul> <li>If you encrypted it in ASCII-armored format, the filename would be <code>secret-message.txt.asc</code>. </li> <li>If you encrypted it in binary format, the filename would be <code>secret-message.txt.pgp</code><sup>2</sup>.</li> </ul> <p>This time, when you encrypt the file named <code>secret-message.txt</code>, instead of just simply encrypting the file, you select the option to \"sign and encrypt\" it. When this option is used, you are using my public key to encrypt the file, and your private key to sign it. </p> <p>The resulting file will still be named <code>secret-message.txt.asc</code>, but the filesize will be a tiny bit larger because your signature is attached. </p> <p>When I receive the file and decrypt it with my private key, I will use your public key to verify it was you that signed it and confirm that no one has tampered with the file after you sent it. </p> <p>Occasionally you may have a need to encrypt a file and sign it separately. This results in two files - your encrypted file, and a signature (<code>.sig</code>) file. </p> <p>This is called a \"detached signature,\" and you'll more commonly see it when the encrypted file is in binary format. For example, lets say that you wanted to send me a photograph, <code>winter-in-maine.jpg</code>.</p> <p>When you encrypt the file (using my public key), the resulting output is a new encrypted file named <code>winter-in-main.jpg.pgp</code>. When you sign it, a new file named <code>winter-in-maine.jpg.sig</code> is created. You'll need to send both files to me, but once I receive them the process is the same as before.</p> <p>I'll use my private key to decrypt the <code>.pgp</code> file to get the original photo, and I'll verify your signature separately using your public key.</p>"},{"location":"scripts/pgp/pgp/#creating-your-keys","title":"Creating Your Keys","text":"Before you can encrypt anything, you need a keypair - that's your private and public PGP keys.  <p> Windows: You'll need to download and install gpg4win.</p> <p> Apple: <code>brew install gnupg</code></p> <p> Debian/Ubuntu: <code>sudo apt install gnupg</code></p> <p>For the rest of this document, we'll focus on command-line tooling on macOS/Linux. To verify you've got the tools installed, run <code>gpg --list-keys</code>. If you see output similar to the example below, you're in good shape. If you're just installing and using gnupg for the first time, you won't have any keys on your system, but running this command will create your keyring (where your keys will ultimately reside).</p> <pre><code>$ gpg --list-keys\n\ngpg: directory '/root/.gnupg' created\ngpg: keybox '/root/.gnupg/pubring.kbx' created\ngpg: /root/.gnupg/trustdb.gpg: trustdb created\n</code></pre>"},{"location":"scripts/pgp/pgp/#generating-your-keys","title":"Generating Your Keys","text":"<p>In the next step, we'll actually create a set of keys. Reference the notes within the code snippet below:</p> <pre><code>$ gpg --full-generate-key --expert\n\ngpg (GnuPG) 2.2.27; Copyright (C) 2021 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities) # (2)\n   (9) ECC and ECC\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities) # (8)\n  (13) Existing key\n  (14) Existing key from card\nYour selection? 8 # (1)\n\nPossible actions for a RSA key: Sign Certify Encrypt Authenticate \nCurrent allowed actions: Sign Certify Encrypt  # &lt;&lt;== NOTE THE CURRENT ACTIONS\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? S # (3)\n\nPossible actions for a RSA key: Sign Certify Encrypt Authenticate \nCurrent allowed actions: Certify Encrypt \n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? E # (4)\n\nPossible actions for a RSA key: Sign Certify Encrypt Authenticate \nCurrent allowed actions: Certify \n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? Q\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (3072) 4096 # (5)\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      &lt;n&gt;  = key expires in n days\n      &lt;n&gt;w = key expires in n weeks\n      &lt;n&gt;m = key expires in n months\n      &lt;n&gt;y = key expires in n years\nKey is valid for? (0) 0 # (6)\nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: John Smith # (7)\nEmail address: john@smith.com\nComment: \nYou selected this USER-ID:\n    \"John Smith &lt;john@smith.com&gt;\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\ngpg: key 56DBD75D1A3FA918 marked as ultimately trusted\ngpg: directory '/root/.gnupg/openpgp-revocs.d' created\ngpg: revocation certificate stored as '/root/.gnupg/openpgp-revocs.d/1C2EB5D40EBAC3871641B2E756DBD75D1A3FA918.rev'\npublic and secret key created and signed.\n\npub   rsa4096 2025-02-01 [C] # (9)\n      1C2EB5D40EBAC3871641B2E756DBD75D1A3FA918\nuid                      John Smith &lt;john@smith.com&gt;\n</code></pre> <ol> <li>We're creating an RSA key because it's the most universally accepted, but another type I would recommend is ECC (option 11).</li> <li>Selecting an option for \"set your own capabilities\" is important because we want to set our keys up for better security.</li> <li>We're explicitly disabling the \"sign\" capabilities for our first key. All we want this key to do is CERTIFY.</li> <li>Again, we're explicitly disabling the \"encrypt\" capability so our key is only usable for CERTIFY actions.</li> <li>When creating an RSA key, it's strongly advised that you use maximum bitlength - <code>4096</code> bits.</li> <li>For simplicity, we're setting this key to never expire. Realistically, this will depend on the level of security you need.</li> <li>Use your real name and email address. The identity you enter here will be how people are able to find and use your key.</li> <li>If you had selected ECC, you would next be asked to choose an elliptic curve to use. My suggestion is to use <code>ECC (1) Curve 25519</code>.</li> <li>The last thing output by the generate command is the confirmation that we've generated a CERTIFY only key, along with it's Key ID.</li> </ol> <p>During the process, you'll be prompted to enter a passphrase (password) to protect your keys. You should not skip this step. </p> <p>We specifically created our first key to be our \"master certifying\" key only. In order to perform operations like Encryption, Signing, and Authenticate, we'll create separate subkeys that are signed by our CERTIFY key. </p> <p>If your intention is to use keys to encrypt and protect files or data, it's imperative that you select a good, strong password that you have never used anywhere else. Store your password in a secure password vault (like Strongbox for Apple devices or  Keeper).</p> <p>We'll now proceed with creating our SUBKEYS.  Before we do though, take note of our key ID: <code>1C2EB5D40EBAC3871641B2E756DBD75D1A3FA918</code>.</p> <pre><code>$ gpg --expert --edit-key 1C2EB5D40EBAC3871641B2E756DBD75D1A3FA918\n\ngpg (GnuPG) 2.2.27; Copyright (C) 2021 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nSecret key is available.\n\nsec  rsa4096/56DBD75D1A3FA918\n     created: 2025-02-01  expires: never       usage: C   \n     trust: ultimate      validity: ultimate\n[ultimate] (1). John Smith &lt;john@smith.com&gt;\n\ngpg&gt; addkey # (1)\nPlease select what kind of key you want:\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (5) Elgamal (encrypt only)\n   (6) RSA (encrypt only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\n  (12) ECC (encrypt only)\n  (13) Existing key\n  (14) Existing key from card\nYour selection? 4 # (2)\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (3072) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      &lt;n&gt;  = key expires in n days\n      &lt;n&gt;w = key expires in n weeks\n      &lt;n&gt;m = key expires in n months\n      &lt;n&gt;y = key expires in n years\nKey is valid for? (0) 0\nKey does not expire at all\nIs this correct? (y/N) y\nReally create? (y/N) y\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n\nsec  rsa4096/56DBD75D1A3FA918\n     created: 2025-02-01  expires: never       usage: C   \n     trust: ultimate      validity: ultimate\nssb  rsa4096/997B1D51C90AE36E # (3)\n     created: 2025-02-01  expires: never       usage: S   \n[ultimate] (1). John Smith &lt;john@smith.com&gt;\n</code></pre> <ol> <li>Enter <code>addkey</code> at the GPG prompt to create our first subkey.</li> <li>Here, we're creating our SIGNING key only.</li> <li>The final output shows that our SIGNING key <code>[S]</code> is a subkey (<code>ssb</code>).</li> </ol> <p>We will follow this same proceedure two more times to generate subkeys for ENCRYPTION and AUTHENTICATION.</p> <pre><code>gpg&gt; addkey\nPlease select what kind of key you want:\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (5) Elgamal (encrypt only)\n   (6) RSA (encrypt only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\n  (12) ECC (encrypt only)\n  (13) Existing key\n  (14) Existing key from card\nYour selection? 6 # (1)\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (3072) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      &lt;n&gt;  = key expires in n days\n      &lt;n&gt;w = key expires in n weeks\n      &lt;n&gt;m = key expires in n months\n      &lt;n&gt;y = key expires in n years\nKey is valid for? (0) 0\nKey does not expire at all\nIs this correct? (y/N) y\nReally create? (y/N) y\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n\nsec  rsa4096/56DBD75D1A3FA918\n     created: 2025-02-01  expires: never       usage: C   \n     trust: ultimate      validity: ultimate\nssb  rsa4096/997B1D51C90AE36E\n     created: 2025-02-01  expires: never       usage: S   \nssb  rsa4096/53F5916662440AC5 # (2)\n     created: 2025-02-01  expires: never       usage: E   \n[ultimate] (1). John Smith &lt;john@smith.com&gt;\n\ngpg&gt; addkey\nPlease select what kind of key you want:\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (5) Elgamal (encrypt only)\n   (6) RSA (encrypt only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\n  (12) ECC (encrypt only)\n  (13) Existing key\n  (14) Existing key from card\nYour selection? 8 # (3)\n\nPossible actions for a RSA key: Sign Encrypt Authenticate \nCurrent allowed actions: Sign Encrypt  # &lt;&lt;== NOTE THE CURRENT ACTIONS\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? A # (4)\n\nPossible actions for a RSA key: Sign Encrypt Authenticate \nCurrent allowed actions: Sign Encrypt Authenticate \n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? S # (5)\n\nPossible actions for a RSA key: Sign Encrypt Authenticate \nCurrent allowed actions: Encrypt Authenticate \n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? E\n\nPossible actions for a RSA key: Sign Encrypt Authenticate \nCurrent allowed actions: Authenticate \n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? Q\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (3072) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      &lt;n&gt;  = key expires in n days\n      &lt;n&gt;w = key expires in n weeks\n      &lt;n&gt;m = key expires in n months\n      &lt;n&gt;y = key expires in n years\nKey is valid for? (0) 0\nKey does not expire at all\nIs this correct? (y/N) y\nReally create? (y/N) y\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n\nsec  rsa4096/56DBD75D1A3FA918\n     created: 2025-02-01  expires: never       usage: C   \n     trust: ultimate      validity: ultimate\nssb  rsa4096/997B1D51C90AE36E\n     created: 2025-02-01  expires: never       usage: S   \nssb  rsa4096/53F5916662440AC5\n     created: 2025-02-01  expires: never       usage: E   \nssb  rsa4096/9C06401751C73176 # (6)\n     created: 2025-02-01  expires: never       usage: A   \n[ultimate] (1). John Smith &lt;john@smith.com&gt;\n\ngpg&gt; save # (7)\n</code></pre> <ol> <li>Select option 6 to create an ENCRYPTION only RSA key.</li> <li>The output confirms that we've generated a new subkey for ENCRYPTION only <code>[E]</code>.</li> <li>Notice there is no AUTHENTICATION option, so we're going to use option 8 again to specify our own capabilities.</li> <li>SIGN and ENCRYPT are enabled by default, so we're going to first enable AUTHENTICATION.</li> <li>Then disable SIGN and ENCRYPT.</li> <li>Our output confirms we've generated an AUTHENTICATION subkey.</li> <li>Don't forget to enter the SAVE command. Your keys will not be committed to your keyring until you enter this command.</li> </ol> <p>We can now test to confirm the presence of our public and private keys:</p> <pre><code>$ gpg --list-keys  # Public Keys\n\n/root/.gnupg/pubring.kbx\n------------------------\npub   rsa4096 2025-02-01 [C]\n      1C2EB5D40EBAC3871641B2E756DBD75D1A3FA918\nuid           [ultimate] John Smith &lt;john@smith.com&gt;\nsub   rsa4096 2025-02-01 [S]\nsub   rsa4096 2025-02-01 [E]\nsub   rsa4096 2025-02-01 [A]\n\n\n$ gpg --list-secret-keys  # Private Keys\n\n/root/.gnupg/pubring.kbx\n------------------------\nsec   rsa4096 2025-02-01 [C]    # our master CERTIFY key (sec = secret)\n      1C2EB5D40EBAC3871641B2E756DBD75D1A3FA918\nuid           [ultimate] John Smith &lt;john@smith.com&gt;\nssb   rsa4096 2025-02-01 [S]    # SIGN subkey\nssb   rsa4096 2025-02-01 [E]    # ENCRYPT subkey\nssb   rsa4096 2025-02-01 [A]    # AUTHENTICATE subkey\n</code></pre> <p>Your new keys are ready to use. </p> <p>Where you see <code>[ultimate]</code> beside your name and email has to do with something called the \"web of trust.\" These keys were generated just now, by you, on your machine, so they're considered to have \"ultimate\" trust (you do trust yourself, after all).</p> <p>And don't forget that the 40-character long string is your key's \"fingerprint.\"</p>"},{"location":"scripts/pgp/pgp/#exporting-your-public-key","title":"Exporting Your Public Key","text":"<p>Your keys are tucked away into your keyring on your machine. You can leave them there, but your public key won't do you much good if no one else has it. </p> <p>We'll start by demonstrating how to export your keys is general:</p> exporting your public key<pre><code>$ gpg --output my-public-key.asc --armor --export 1C2EB5D40EBAC3871641B2E756DBD75D1A3FA918\n# or you could also use ...\n$ gpg --output my-public-key.asc --armor --export john@smith.com\n</code></pre> <p>The resulting file:</p> my-public-key.asc<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBGeEHUoBEACccBnDV+TqZ2aPgKzn9wbeM9wU88yqb7PDUCAn+cogDxBJ+AYl\nWMz1QOwNBaV9XmhYi4viqwFx6/uKxjskdk8QXe5e2M4+PRuEetY0NgO+4rziWhQL\n ... truncated ... \nj1JvE8wYgPtgiD2LMC0jeuxu3suWBryxedMxZQNAsrb2T5TiecYGvFXmknP0LhfD\nWcNh8jj8HCvAJng1f2XXYdkMuOQDQQbl+kfkMP5DNncc/cxUcKsMVfSBA7D82wia\nT/0XQEh9wM5/cZ0OcVUgkn+QZRJ588dbg/e7qIqvnE5qmvAiFPyH\n=TB7U\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre> <p>But what if we didn't want to ASCII-armor our key ...</p> <pre><code>$ gpg --output my-public-key-binary.pgp --export john@smith.com\n</code></pre> <p>You'll get a new file (<code>my-public-key-binary.pgp</code>) as requested, but you won't be able to read it with a text editor. If you try, you'll get an ASCII-representation of the key, but much of the data can't be represented in displayable characters on-screen... so trying to open a binary key like this is pointless.</p> <pre><code>?}^hX???q????;$vO]?^??&gt;=z?46???ZX??@?\n                                Z??2q???Q(??\u0120??A?\u06b3f\u0637??!?cn\u02a2?~??F;\n                                                                 {?w?ra?zF)N???f(?P???3R??&amp;}\u0377U???????#dC?}???Ql?l?\uc078??????\u03b5q??ll?0?#?ds}?5?p??\\t???&lt;??i??4??F?*?v?n??(?.'?????_!?m?^???k^?'?$x?87?i??FpM?9l??    h?8????0??:\u0512\n                    ???\u0640uE?Y?|g??cD?{??,???,+?N???x?!??'??`rmn??!h?r7g?Z?d]??wI?{????E\u06ee?Zl????'j?\u074b?(-??$%0?J?x???6?t???\u0566?.??    G&amp;G)?\n?z???.?hL?+oP?\\2H?$?)Q??~v???mx?v???%?V?W??L?7????`q????I??\u0597??)?Uo??ohn Smith &lt;john@smith.com&gt;?N\n8!?Z?8???qt? ????0?g?J\n\n\n       ?\n    ???0??L??}????&amp;?!????j?2?JyFj?T)???x??\u0700%!\u07ea&gt;y???uS\n??\u03d3v?kF???\n</code></pre>"},{"location":"scripts/pgp/pgp/#exporting-your-public-key-to-a-key-server","title":"Exporting Your Public Key to a Key Server","text":"<p>There used to be a larger number of public key servers available on which you could host your public key, but these days I seem to only have success with one: https://keys.openpgp.org/. </p> <p>You will need your Key ID instead of the email address for this command:</p> <pre><code>$ gpg --send-key 1C2EB5D40EBAC3871641B2E756DBD75D1A3FA918\n</code></pre> <p>If you run into an error attempting to send the key via <code>gpg</code>, you can always go to the keyserver website and upload your public key manually. </p>"},{"location":"scripts/pgp/pgp/#exporting-your-private-keys","title":"Exporting Your Private Keys","text":"<p>Warning!</p> <p>Exporting your private keys make it much easier to lose them, or worse... for someone to steal them. Use good security practices.</p> Exporting your Master CERTIFY private key<pre><code>$ gpg --output master-key.asc --armor --export-secret-key john@smith.com\n</code></pre> Exporting your private SUBKEYS<pre><code>$ gpg --output subkeys.asc --armor --export-secret-subkeys john@smith.com\n</code></pre> <p>Save these files in a highly secure location. Anyone with access to your Master Certify or Subkeys can perform all operations with your keys.</p>"},{"location":"scripts/pgp/pgp/#encrypting-files","title":"Encrypting Files","text":"<p>We're finally ready to encrypt our document: <code>testdoc.txt</code>.</p> <pre><code>$ gpg --encrypt --recipient john@smith.com testdoc.txt\n</code></pre> <p>The result is a new file named <code>testdoc.txt.gpg</code> - but this is a binary file that can't be opened in a text editor. </p> <pre><code>$ gpg --encrypt --armor --recipient john@smith.com testdoc.txt\n</code></pre> <p>Now we've got a new encrypted file, <code>testdoc.txt.asc</code>.</p> testdoc.txt.asc<pre><code>-----BEGIN PGP MESSAGE-----\n\nhQIMA80WR3EvRM3kAQ//UytVbiz/nk3E3nS5tyvgTv4ESIks6XOuMOcFcGM6Y73p\n8zcidTuSK0HTPR0xR4O2nZUAWCFa0GY18c41U671xPz2YTULPbNWrImGP7VmRPWP\nUpFcs1PpmuneA8fmHkgdhfr9l3rTnb4Efi4eaOTrgHbgLv9lINQHR+xWZ+P56q26\nv+xMA37M42eGYn6vnhXThAxchyUTtc/GkZS3xuvP7M3O5P2l1xMA2KzLeR2yh/FZ\n9F/kYN0RbhdgzfnKpUSuoJtvYXjrf0jwT6UdZ+Lb9VpLnngMm6PnRXntu85ZL3vZ\nfsrCWnMJYU1w+cyXZYTB32qx3ZcTcvR1VuLdaCESH6Wxv7zDRbodtAi814utGeZh\nPX7PO0bAZpeIeG4VQG4SxcHgH3BAs+jIc+bGtcvvVYAlLj0ytICKxrWpGz+gZ4aQ\nEeSrSVUEmGle92DalsO9jBdJdSt+71VexHyiRodLC8F/zdknSuEFWhfk+S0p5EtC\nfAm4RzN+dfzjg4rGZF7eW+2Sax4hwNWEZTAOXOvZQK/XRhV53YYSL7C/LjURxq3l\n69cg7Kk7kbopinXhZ7ODjhQdmx9hC4zlLfgCbRiX+Ggvm2vjweSdmAvXPP1GhKXu\nzlOPv1bseQjpHIUE6JXtFghGTctHtEwk/rAamw/flAviKNMH6Is4HQ+ElvqqdjfS\nfAH0TScdmsDvlcBlqXwSeqn9z5PE3jsKu5NoxBptrPfs/Iikf6TLycBLEZKJLT3d\nBHkClVZUpQST3brn67XnATnmWfxApt1MCvfYo5Dbt2I00O+fFuKD7CMdejvj6ZRu\nTOy21PkURh/szicowaRMJZ9/B4YlAYJnD9gzt8c=\n=8kzx\n-----END PGP MESSAGE-----\n</code></pre>"},{"location":"scripts/pgp/pgp/#signing-and-verifying-files","title":"Signing (and Verifying) Files","text":"<p>We've got our original <code>testdoc.txt</code> file, our binary encrypted file (<code>testdoc.txt.gpg</code>), and our ascii armored encrypted file (<code>testdoc.txt.asc</code>). To sign a file, you don't have to encrypt it first. You can use your keys to sign anything - encrypted or not.</p>"},{"location":"scripts/pgp/pgp/#signing-an-unencrypted-file","title":"Signing an unencrypted file","text":"<pre><code>$ gpg --clear-sign --local-user john@smith.com --armor --sign testdoc.txt\n</code></pre> <p>... produces</p> testdoc.txt.asc<pre><code>-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nThis is a simple text file.\nWe're going to encrypt it.\n\n-----BEGIN PGP SIGNATURE-----\n\niQJDBAEBCgAtFiEE41qEOKeHhnF02yCS8AWGhDDzo4EFAmeEKhAPHGpvaG5Ac21p\ndGguY29tAAoJEPAFhoQw86OBqZsP/ir/2onGOJxxXWOrY9oq8njrOEkFHM7/ppwe\n3CFtequ1PfAv2Uic7qC/r7WFtY9DdEd+n+aEPwW09bMkfg4htM2krDGt9zZMeXjI\nXE7oihP+oV6zSHZwyv7BwPwN7DPqZk0VhFnjlOkzxjvoduhewDv1uf12iyfr3ilB\nOc3zIASEAEidpUoOhVd0ljvAIv9CF0NixMzn6iLtT3kB6va4Uu3E8ewWlFsgkxfR\nHokZVz2STYzNGnMFeN07/ih4N60QjI1uoHiOHR3N8FasHAxRltVGRthgqM//lKMm\n3wYZg9MIDUsZuezTBeUVhIAynRN7HBwiB0yd2YToSzM7tcbrYgPgCjQhORrCfD0s\nyq0PMb2Id/E/vEga1a4n0gbpZwNFOo8XU1mEhAbaClEapDkqu6GzNMCmsak009B+\nOehkI2mZcrBQbDp7gpUE/39kC5AsbpN/iyBckGNoRxHdDy2AVohWnGAPnllG+Eyx\nmT3ekltnkHtjXhaiVls1cf+7AU5M1KyYw1dcEa4SGChTIfYGiBZAvy17AXNrR+h8\nxAEsKYzCoMlBCbAxKAT96mO0iMx8n7pv+97qQATjYQyYTTv1peggz7QlZcgu81Jo\nWFX94o2MNEG58feEPAHxXy013UrqN8HWsHFtKcX2G0y/s6FTM48VrPcgWEX27ydP\nBO4ERnPO\n=6qwu\n-----END PGP SIGNATURE-----\n</code></pre> <p>The result is a new file that contains the content of the original unencrypted file at the top of the document in a section labeled <code>PGP SIGNED MESSAGE</code>, and our signature at the bottom.</p> <p>We can verify that signature because we have both the public and private keys -- they are our keys afterall. </p> <pre><code>$ gpg --verify testdoc.txt.asc\n\ngpg: Signature made Sun Jan 12 20:46:08 2025 UTC\ngpg:                using RSA key 1C2EB5D40EBAC3871641B2E756DBD75D1A3FA918\ngpg:                issuer \"john@smith.com\"\ngpg: Good signature from \"John Smith &lt;john@smith.com&gt;\" [ultimate]\n</code></pre>"},{"location":"scripts/pgp/pgp/#signing-and-encrypting-together","title":"Signing and encrypting together","text":"<p>If we wanted to both sign and encrypt the file simultaneously, we can do that with:</p> <pre><code>$ gpg --encrypt --output testdoc2.txt.asc --sign --armor --recipient john@smith.com testdoc.txt\n</code></pre> testdoc2.txt.asc<pre><code>-----BEGIN PGP MESSAGE-----\n\nhQIMA80WR3EvRM3kAQ//bWdKQNb+kEqyaB6BaiHKnyxb9gD43yzdzVjRfDtlIuEu\nuwqScxSrBDhUYSGIplXIklKm3lu3/xK2KxwVX4hPVpK1BeyusW1VQsxULoBjgt05\n   ... truncated ...\no6NiMBJADnD0BjfNB3PqPwidveJLO1k3u9nzagZPmAWRhCIzJqI3zpgceYQ0/beg\nVC/z8VxZtfZDzXsNLGJoWJ7QRy5sgyNFRRVbOTc4Skl/aJvTST4lnkLF6A1yEH4x\nJf72ORi9+XsXhDdKIb09+iGek31tR5KDJ8ds8XzITjZShiajtyKRWHk=\n=jPXp\n-----END PGP MESSAGE-----\n</code></pre> <p>The resulting file contains only a PGP message, but when decrypted, we get the original file content plus the signature:</p> <pre><code>$ gpg --decrypt testdoc2.txt.asc\n\ngpg: encrypted with 4096-bit RSA key, ID 53F5916662440AC5, created 2025-01-12\n      \"John Smith &lt;john@smith.com&gt;\"\nThis is a simple text file.\nWe're going to encrypt it.\n\ngpg: Signature made Sun Jan 12 20:51:26 2025 UTC\ngpg:                using RSA key 1C2EB5D40EBAC3871641B2E756DBD75D1A3FA918\ngpg: Good signature from \"John Smith &lt;john@smith.com&gt;\" [ultimate]\n</code></pre>"},{"location":"scripts/pgp/pgp/#detached-signature","title":"Detached Signature","text":"<p>In the earlier example where we signed an unencrypted file, PGP wrapped the content of that file inside of a new file together with the signature. What if we don't want that, though? A \"detached signature\" is the better option for such a scenario:</p> <pre><code>$ gpg --detach-sign --local-user john@smith.com --armor --sign testdoc.txt\n</code></pre> <p>By default, this will create a file named <code>testdoc.txt.asc</code> - but that can be confusing since we're only signing this file. A better way to do it is to specify the <code>--output</code> paramater, and name your file with a <code>.sig</code> extension:</p> <pre><code>$ gpg --detach-sign --output testdoc.txt.sig --local-user john@smith.com --armor --sign testdoc.txt\n</code></pre> <p>Important Info</p> <p>The signature file (<code>.sig</code> file) and the original document you signed go together. A signature on its own cannot be validated - your signature is only good for the file you originally specified!</p> <p>The proper way to validate a detached signature is with the following:</p> <pre><code>$ gpg --verify testdoc.txt.sig testdoc.txt\n</code></pre> <p>However, if you forget to specify the original file, because we followed the naming convention, <code>gnupg</code> will try to guess what file we were comparing the signature with:</p> <pre><code>$ gpg --verify testdoc.txt.sig\n\ngpg: assuming signed data in 'testdoc.txt'\ngpg: Signature made Sun Jan 12 20:58:18 2025 UTC\ngpg:                using RSA key 1C2EB5D40EBAC3871641B2E756DBD75D1A3FA918\ngpg:                issuer \"john@smith.com\"\ngpg: Good signature from \"John Smith &lt;john@smith.com&gt;\" [ultimate]\n</code></pre> <p>But what if we forgot to transfer both files to our recipient? In this example, we sent the <code>.sig</code> file, but forgot to send the actual <code>testdoc.txt</code> file:</p> <pre><code>$ gpg --verify testdoc.txt.sig\n\ngpg: no signed data\ngpg: can't hash datafile: No data\n</code></pre>"},{"location":"scripts/pgp/pgp/#wrapping-up","title":"Wrapping Up","text":"<p>This page only skims the surface of PGP - there's much more to it if you want to use it fully. There are a lot of great resources on PGP, but here are a few to get you started:</p> <ul> <li>Web of Trust</li> <li>Comprehensive Yet Simple Guide for GPG Key/Subkey Encryption, Signing, Verification &amp; Other Common Operations</li> <li>GnuPG / GPG / OpenPGP</li> <li>Proper Key Management</li> <li>Sun Knudsen's Privacy Guides<ul> <li>How to encrypt, sign, and decrypt messages using GnuPG on macOS</li> <li>How to verify PGP digital signatures using GnuPG on macOS</li> <li>How PGP digital signatures increase privacy and help decentralize the Internet</li> </ul> </li> </ul> <ol> <li> <p>When I receive your message, I'll see the <code>.txt</code> extension in the name and know that the original file you sent me was a text file. You could just as easily have encrypted a Microsoft Word (<code>.docx</code>) or Excel (<code>.xlsx</code>) file.\u00a0\u21a9</p> </li> <li> <p><code>.pgp</code> (and <code>.gpg</code>) files are binary - meaning they're faster and easier for computers to process, and they're more efficient in terms of storage. The problem with them, however, is that they aren't human readable, and occasionally this can mean you have fewer sharing options.<code>.asc</code>, on the other hand, can easily be opened in any text editor - and this also enables you to copy/paste the encrypted message directly into the body of an email for easy transmitting.</p> <p>When I receive the file, I will decrypt it using my private key, and save the resulting output as <code>secret-message.txt</code>. At this point, the file has been returned to a normal plain text file, unencrypted, and can easily be read by any text application on my machine.\u00a0\u21a9</p> </li> </ol>"},{"location":"scripts/powershell/","title":"PowerShell Modules","text":""},{"location":"scripts/powershell/#pswritecolor","title":"PSWriteColor","text":"<pre><code>if (-not (Get-Module PSWriteColor -ListAvailable)) {\n    Install-Module PSWriteColor -Scope CurrentUser -Force\n}\nImport-Module PSWriteColor\n</code></pre>"},{"location":"scripts/powershell/#sharepoint","title":"SharePoint","text":"<pre><code>if (-not (Get-Module Microsoft.Online.SharePoint.PowerShell -ListAvailable)) {\n    Install-Module -Name Microsoft.Online.SharePoint.PowerShell -Scope CurrentUser -Force\n}\nImport-Module Microsoft.Online.SharePoint.PowerShell\n</code></pre>"},{"location":"scripts/powershell/#teams","title":"Teams","text":"<pre><code>if (-not (Get-Module MicrosoftTeams -ListAvailable)) {\n    Install-Module -Name MicrosoftTeams -Scope CurrentUser -Force\n}\nImport-Module MicrosoftTeams\n</code></pre>"},{"location":"scripts/powershell/#exchange","title":"Exchange","text":"<pre><code>if (-not (Get-Module ExchangeOnlineManagement -ListAvailable)) {\n    Install-Module -Name ExchangeOnlineManagement -Scope CurrentUser -Force\n}\nImport-Module ExchangeOnlineManagement\n</code></pre>"},{"location":"scripts/powershell/pwsh-aws/","title":"AWS PowerShell Scripts","text":""},{"location":"scripts/powershell/pwsh-aws/#aws-connector","title":"AWS-Connector","text":"<p>Ensure PowerShell modules are saved to the correct directory. Example: <code>%UserProfile%\\Documents\\PowerShell\\Modules\\Custom\\AWS-Connector.psm1</code></p> <ul> <li>Modify line 12 to include the correct MFA ARN for your AWS IAM user.</li> <li>Modify line 24 and 42 to replace <code>AWS_ACCOUNT_ID</code> and/or <code>REGION</code> with the appropriate values for your ECR registry.</li> </ul> <p>Assumes you've already properly configured the CLI and set your credentials. This module installs <code>PSWriteColor</code> if not previously installed.</p> AWS-Connector.psm1<pre><code>if (-not (Get-Module PSWriteColor -ListAvailable)) {\n    Install-Module PSWriteColor -Scope CurrentUser -Force\n}\nImport-Module PSWriteColor\n\n# Connect to AWS using MFA. The connection will be valid for the current PowerShell session only.\nfunction Connect-AWS {\n    Write-Output \"== AWS MFA CLI Login ==`r`n\"\n    do {\n        $MFAcode = Read-Host \"MFA Code \"\n    } while ($MFAcode.Length -ne 6)\n    $MFAarn = \"arn:aws:iam::123456789876:mfa/name@example.com\"\n    $sessionInfo = aws sts get-session-token --serial-number $($MFAarn) --token-code $($MFAcode) | ConvertFrom-Json\n\n    Write-Color -T \"Warning:`r`nThis login is only valid in the current session!`r`n\" -C Yellow -ShowTime\n\n    Write-Color -T \"Access Key: \",\"$($sessionInfo.Credentials.AccessKeyId)\" -C White,Green\n    Write-Color -T \"Secret Key: \",\"$($sessionInfo.Credentials.SecretAccessKey)\" -C White,Green\n    Write-Color -T \"Session Token: \",\"$($sessionInfo.Credentials.SessionToken)`r`n\" -C White,Green\n\n    $Env:AWS_ACCESS_KEY_ID=\"$($sessionInfo.Credentials.AccessKeyId)\"\n    $Env:AWS_SECRET_ACCESS_KEY=\"$($sessionInfo.Credentials.SecretAccessKey)\"\n    $Env:AWS_SESSION_TOKEN=\"$($sessionInfo.Credentials.SessionToken)\"\n    $Env:AWS_DEFAULT_REGION=\"XX-XXXX-X\"\n\n    aws sts get-caller-identity\n}\n\n# Identify which AWS account and IAM user you are currently authenticated as.\nfunction Get-AWSIdent {\n    aws sts get-caller-identity\n    if (($null -eq $Env:AWS_ACCESS_KEY_ID) -or ($null -eq $Env:AWS_SECRET_ACCESS_KEY) -or ($null -eq $Env:AWS_SESSION_TOKEN)) {\n        Write-Color -T \"Environment variables are not set!\" -C Red\n        Write-Color -T \"Use \",\"'Connect-AWS' \",\"to authenticate.\" -C White,Blue,White\n        break;\n    }\n}\n\n# Connect to AWS ECR to enable \"docker push\" commands. You must use \"Connect-AWS\" first.\nfunction Register-ECR {\n    Write-Output \"== AWS ECR Authentication ==`r`n\"\n    aws ecr get-login-password --region XX-XXXX-X | docker login --username AWS --password-stdin AWS_ACCOUNT_ID.dkr.ecr.REGION.amazonaws.com\n}\n</code></pre>"},{"location":"scripts/powershell/pwsh-aws/#functions","title":"Functions","text":"<code>Connect-AWS</code> <p>Prompts for your 6-digit TOTP value and uses the AWS CLI to authenticate with MFA. The temporary <code>Access Key ID</code>, <code>Secret Access Key</code>, and <code>Session Token</code> are displayed and set as local environment variables, enabling AWS CLI command execution without having to pass a profile.</p> <code>Get-AWSIdent</code> <p>Quikly calls <code>aws sts get-caller-identity</code> to report which credentials you've authenticated with, or reports that you aren't authenticated.</p> <code>Register-ECR</code> <p>Enables use of AWS ECR via Docker to allow <code>docker push</code> commands.</p>"},{"location":"scripts/powershell/pwsh-m365/","title":"M365 Snippets","text":""},{"location":"scripts/powershell/pwsh-m365/#exchange","title":"Exchange","text":"<p><pre><code>Import-Module -Name ExchangeOnlineManagement\nConnect-ExchangeOnline -UserPrincipalName name@example.com\n</code></pre> Documentation</p>"},{"location":"scripts/powershell/pwsh-m365/#mailboxes","title":"Mailboxes","text":""},{"location":"scripts/powershell/pwsh-m365/#all-tenant-mailboxes","title":"All Tenant Mailboxes","text":"<p><pre><code>Get-Mailbox -ResultSize Unlimited `\n    | % { Get-MailboxStatistics $_.UserPrincipalName `\n    | Select DisplayName, ItemCount, TotalItemSize, } `\n    | Export-CSV -Path .\\export.csv -NoTypeInformation\n</code></pre> Additional fields: <code>MailboxTypeDetail</code>, <code>DeletedItemCount</code>, <code>TotalDeletedItemSize</code></p>"},{"location":"scripts/powershell/pwsh-m365/#specific-user","title":"Specific User","text":"<pre><code>Get-EXOMailbox -Identity name@example.com `\n    | Get-EXOMailboxStatistics\n</code></pre>"},{"location":"scripts/powershell/pwsh-m365/#mailbox-rules","title":"Mailbox Rules","text":"<pre><code>Get-InboxRule -Mailbox name@example.com\n</code></pre> <pre><code>Get-InboxRule -Mailbox name@example.com | Select * | `\n    Export-CSV -Path .\\mboxrules.csv -NoTypeInformation`\n</code></pre>"},{"location":"scripts/powershell/pwsh-m365/#calendars","title":"Calendars","text":""},{"location":"scripts/powershell/pwsh-m365/#view-calendar-permissions","title":"View Calendar Permissions","text":"<pre><code>Get-MailboxFolderPermission `\n    -Identity room@example.com:\\Calendar | Format-List\n</code></pre>"},{"location":"scripts/powershell/pwsh-m365/#show-meeting-subject-and-remove-organizer","title":"Show Meeting Subject and Remove Organizer","text":"<pre><code>Set-CalendarProcessing -Identity \"room@example.com\" `\n    -DeleteSubject $False `\n    -AddOrganizerToSubject $False\n</code></pre>"},{"location":"scripts/powershell/pwsh-m365/#teams","title":"Teams","text":""},{"location":"scripts/powershell/pwsh-m365/#get-outbound-dialing-policy","title":"Get Outbound Dialing Policy","text":"<pre><code>Get-CsUserPolicyAssignment -Identity \"name@example.com\"\n</code></pre>"},{"location":"scripts/powershell/pwsh-m365/#disable-oubound-dialing","title":"Disable Oubound Dialing","text":"<pre><code># Before\nGet-CsUserPolicyAssignment -Identity \"name@example.com\"\n\nGrant-CsDialoutPolicy -Identity \"name@example.com\" `\n    -PolicyName \"DialoutCPCDisabledPSTNInternational\"\n\n# After\nGet-CsUserPolicyAssignment -Identity \"name@example.com\"\n</code></pre>"},{"location":"scripts/powershell/pwsh-win/","title":"Windows Snippets","text":""},{"location":"scripts/powershell/pwsh-win/#system-events","title":"System Events","text":"<p>Documentation</p>"},{"location":"scripts/powershell/pwsh-win/#search-logs","title":"Search Logs","text":"<pre><code>Get-WinEvent -FilterHashtable @{'LogName' = 'System'; 'ProviderName' = 'Microsoft-Windows-Kernel-General'; 'Id' = 1}\n</code></pre> <pre><code>$AuditEvents = Get-WinEvent -FilterHashtable @{'LogName' = 'Security'; 'ProviderName' = 'Microsoft-Windows-Security-Auditing'; 'Id' = 4616} | Select *\n</code></pre> <pre><code>$TimeEvents=Get-WinEvent -FilterHashtable @{'Path' = 'C:\\Users\\Administrator\\Desktop\\saved-file.evtx'; 'LogName' = 'System'; 'ProviderName' = 'Microsoft-Windows-Kernel-General'; 'Id' = 1} | Select *\n</code></pre>"},{"location":"scripts/python/","title":"Python Environments","text":"<p>Miniconda is a minimal implementation of Anaconda that includes only <code>conda</code>, Python, and a minimal set of dependencies. Conda provides simplified virtual environment management with individual Python versions isolated to the specified environment. </p> <p>Installers for macOS, Linux, and Windows available at: https://docs.anaconda.com/miniconda/install/. </p> <p>Caution</p> <p>The graphical installer for macOS installs to <code>/opt/miniconda3</code>. Use the terminal installer to ensure installation to your home directory.</p>"},{"location":"scripts/python/#commands","title":"Commands","text":"<code>conda info --envs</code> <p>List all available environments.</p> <code>conda create -n ENVNAME python=3.12.8</code> <p>Create a new environment with a specified version of Python.</p> <code>conda activate ENVNAME</code> <p>Activate (switch to) the specified environment.</p> <code>conda install PKGNAME=VERSION</code> <p>Install the specified package and version in the current environment.</p> <code>conda list --show-channel-urls</code> <p>List installed packages in the current environment.</p> <code>conda update --all -n ENVNAME</code> <p>Update all packages in the specified environment.</p> <p>See the Conda User Guide Cheatsheet for additional information. </p>"},{"location":"scripts/python/leetgen/","title":"Leetgen","text":"<p>Leetgen is a quick-and-dirty password list generator. It accepts a single input string and generates a wordlist of possible \"leetspeak\" permutations for that string. Helpful if you suspect there's a very high likelihood that someone is or will use a password based off of a well-known phrase or word. This is most commonly seen in organizations where they have their own internal phraseology or idioms. </p> <p></p> <p>Run from the command-line, supply it with a single string and it will return a count of the calculated permutations. </p> <p>Be aware, however, that because there could be many possible iterations, lists can grow quite large and eat up available space. If allowed to generate the file, it will be saved to <code>output.txt</code> in the same directory as the script file.</p> <p>Don't be a dick...</p> <p>This tool has it's uses, but unapproved pentesting and other nefarious practices aren't one of them. This tool is meant for helping build lists of passwords that systems should block or prevent users from adopting due to poor security. </p>"},{"location":"scripts/python/leetgen/#script","title":"Script","text":"Leetgen.py<pre><code>import sys\nimport os\nimport itertools\n\nargCount = len(sys.argv)\nprocessWord = \"\"\n\nif (argCount == 2):\n    processWord = sys.argv[1]\nelse:\n    print (\"This script accepts a single input parameter only.\")\n    sys.exit()\n\ndef leet(word):\n    leet_matches = [\n        ['a', 'A', '4', '@'],\n        ['b', 'B', '8'],\n        ['c', 'C'],\n        ['d', 'D'],\n        ['e', 'E', '3'],\n        ['f', 'F'],\n        ['g', 'G', '6'],\n        ['h', 'H'],\n        ['i', 'I', '1', '!', '|'],\n        ['j', 'J'],\n        ['k', 'K'],\n        ['l', 'L', '1', '!', '|', '/', '\\\\'],\n        ['m', 'M'],\n        ['n', 'N'],\n        ['o', 'O', '0'],\n        ['p', 'P'],\n        ['q', 'Q'],\n        ['r', 'R'],\n        ['s', 'S', '5', '$', '~'],\n        ['t', 'T', '7', '+'],\n        ['u', 'U'],\n        ['v', 'V'],\n        ['w', 'W'],\n        ['x', 'X', '+'],\n        ['y', 'Y'],\n        ['z', 'Z', '2'],\n        ['0', 'o', 'O'],\n        ['1', '!', '|', 'l'],\n        ['2', 'z', 'Z'],\n        ['3', 'e', 'E'],\n        ['4', 'a', 'A'],\n        ['5', 's', 'S'],\n        ['6', 'g', 'G'],\n        ['7', 't', 'T', '+'],\n        ['8', 'b', 'B'],\n        ['9'],\n        ['`'],\n        ['~'],\n        ['!', 'i', 'I', '|'],\n        ['@', 'a', 'A'],\n        ['#'],\n        ['$', 's', 'S'],\n        ['%'],\n        ['^'],\n        ['&amp;'],\n        ['*'],\n        ['('],\n        [')'],\n        ['-', '_'],\n        ['_', '-'],\n        ['='],\n        ['+'],\n        ['['],\n        ['{'],\n        [']'],\n        ['}'],\n        ['\\\\', '/', '|', 'I', '1'],\n        ['|', 'l', '1', '!'],\n        [';'],\n        [':'],\n        [\"'\"],\n        ['\"'],\n        [',', '.'],\n        ['&lt;'],\n        ['.', ','],\n        ['&gt;'],\n        ['/', 'l', '|', 'I', '1'],\n        ['?'],\n    ]\n    l_set = []\n    l_size= []\n    for letter in word:\n        for match in leet_matches:\n            if match[0] == letter.lower():\n                l_set.append(match)\n                l_size.append(len(match))\n\n    resultSize = 0\n\n    for set in l_size:\n        if resultSize == 0:\n            resultSize = set\n        else:\n            resultSize = resultSize * set\n\n    print (f\"The result size is {resultSize} possible combinations.\")\n    print (\"Do you want to proceed with generating this file?  [Y/n]\")\n    affirmative = {'yes', 'y', 'ye', ''}\n    choice = input().lower()\n    if choice in affirmative:\n        return [ ''.join(t) for t in itertools.product(*l_set) ]\n    else:\n        return []\n\nresults = leet(processWord)\n\nif (len(results) &gt; 0):\n    print (\"Writing output to output.txt:\")\n    with open('output.txt', 'w') as f:\n        for word in results:\n            f.write(f'{word}\\n')\n    fileInfo = os.stat('output.txt')\n    fileSize = round(fileInfo.st_size/1024/1024,3)\n    print (f\"Complete. Output file size: {fileSize} megabytes.\")\nelse:\n    print (\"Aborted.\")\n</code></pre>"},{"location":"scripts/python/leetgen/#extending-results","title":"Extending Results","text":"<p>Modifying the script is straightforward - <code>leet_matches</code> (beginning on line 15) is a list of lists of characters. The list includes every letter of alphabet, followed by numbers, then special characters. Each list is individually extended to include potential characters that might be substituted for the original character. </p> <p>The character mapping included in original script is not complete - there could be dozens more potential mappings, so feel free to modify to suit your needs. </p>"},{"location":"scripts/yubikey/","title":"Yubikey Setup &amp; Configuration","text":"<p>Annotations</p> <p>Annotations are used throughout some of the examples below. Clicking the  symbol reveals additional comments intended for clarity.</p>"},{"location":"scripts/yubikey/#tools-and-requirements","title":"Tools and Requirements","text":"<p>There are a few prerequisites you'll need to fully configure and setup your key(s). The information on this page assumes you've already installed <code>GnuPG</code> and initialized your local keyring. </p> <p>Requirements</p> <p> GPGTools/pinentry</p> <p> pinentry-mac</p> <p><code>brew install pinentry-mac</code></p>"},{"location":"scripts/yubikey/#pinentry-mac","title":"<code>pinentry-mac</code>","text":"<p>If you'll be using PINs with your Yubikey (and I strongly recommend you do), you'll want some method of entering them other than strictly through terminal. The default tool for working with Yubikey is <code>pinentry-curses</code> -- but a gui version is available through <code>pinentry-mac</code>.</p> <pre><code>$ brew install pinentry-mac\n\n==&gt; Fetching pinentry-mac\n######################################################################## 100.0%\n==&gt; Pouring pinentry-mac--1.1.1.1.arm64_ventura.bottle.tar.gz\n\n==&gt; Caveats\nYou can now set this as your pinentry program like\n\n~/.gnupg/gpg-agent.conf\n    pinentry-program /opt/homebrew/bin/pinentry-mac\n\n==&gt; Summary\n\ud83c\udf7a  /opt/homebrew/Cellar/pinentry-mac/1.1.1.1: 19 files, 518.7KB\n</code></pre> <p>To complete the installation, we'll need to set <code>pinentry-mac</code> as the default tool. First, confirm the precise location by running command <code>where pinentry-mac</code> from the terminal.  Assuming the answer is the same default location as specified by the Homebrew output above: <pre><code># open (or create if it doesn't exist) ~/.gnupg/gpg-agent.conf\n# and add the following line:\npinentry-program /opt/homebrew/bin/pinentry-mac\n# save and close gpg-agent.conf\n\n# reload the gpg-agent with the following command:\n$ gpg-connect-agent reloadagent /bye\n</code></pre></p> <p>Requirements</p> <p> Yubico/yubikey-manager</p> <p> yubikey-manager</p> <p> ykman</p> <p><code>brew install ykman</code></p>"},{"location":"scripts/yubikey/#yubikey-manager-ykman","title":"<code>yubikey-manager</code> (<code>ykman</code>)","text":"<p>Yubikey Manager and it's CLI counterpart, <code>ykman</code>, are tools for configuring Yubikey (FIDO2, OTP, PIV, identify serial and firmware, enable or disable interfaces, and other extended features). </p> <p>The GUI version (Yubikey Manager) is occasionally helpful for quick tasks or checking information, but the majority of the time I use <code>ykman</code>. The GUI only exposes some configuration control, while the CLI tool provides full access to every feature.</p> <p>See also: <code>ykman</code> CLI Documentation</p> <pre><code>$ ykman --help\n\nUsage: ykman [OPTIONS] COMMAND [ARGS]...\n\n  Configure your YubiKey via the command line.\n\n  Examples:\n\n    List connected YubiKeys, only output serial number:\n    $ ykman list --serials\n\n    Show information about YubiKey with serial number 123456:\n    $ ykman --device 123456 info\n\nOptions:\n  -d, --device SERIAL             specify which YubiKey to interact with by serial number\n  -r, --reader NAME               specify a YubiKey by smart card reader name (can't be used with --device or list)\n  -t, --scp-ca FILENAME           specify the CA to use to verify the SCP11 card key (CA-KLCC)\n  -s, --scp CRED                  specify private key and certificate chain for secure messaging, can be used multiple times to provide key and certificates in multiple files (private key,\n                                  certificates in leaf-last order), OR SCP03 keys in hex  separated by colon (:) K-ENC:K-MAC[:K-DEK]\n  -p, --scp-password PASSWORD     specify a password required to access the --scp file, if needed\n  -l, --log-level [ERROR|WARNING|INFO|DEBUG|TRAFFIC]\n                                  enable logging at given verbosity level\n  --log-file FILE                 write log to FILE instead of printing to stderr (requires --log-level)\n  --diagnose                      show diagnostics information useful for troubleshooting\n  -v, --version                   show version information about the app\n  --full-help                     show --help output, including hidden commands\n  -h, --help                      show this message and exit\n\nCommands:\n  info     show general information\n  list     list connected YubiKeys\n  script   run a python script\n  config   configure the YubiKey, enable or disable applications\n  fido     manage the FIDO applications\n  hsmauth  manage the YubiHSM Auth application\n  oath     manage the OATH application\n  openpgp  manage the OpenPGP application\n  otp      manage the YubiOTP application\n  piv      manage the PIV application\n</code></pre> <p>Requirements</p> <p> Yubico/yubico-piv-tool</p> <p> yubico-piv-tool</p> <p> yubico-piv-tool</p> <p><code>brew install yubico-piv-tool</code></p>"},{"location":"scripts/yubikey/#yubico-piv-tool","title":"<code>yubico-piv-tool</code>","text":"<p>The Yubico PIV Tool is a CLI tool for interacting with the Personal Identity Verification (PIV) application on a YubiKey. With it, you can generate keys on the device, import keys and certificates, and create certificate requests. </p> <pre><code>$ yubico-piv-tool --help   \n\nUsage: yubico-piv-tool [OPTION]...\n\n  -h, --help               Print help and exit\n      --full-help          Print help, including hidden options, and exit\n  -V, --version            Print version and exit\n  -v, --verbose[=INT]      Print more information  (default=`0')\n  -r, --reader=STRING      Only use a matching reader  (default=`Yubikey')\n  -k, --key[=STRING]       Management key to use, if no value is specified key\n                             will be asked for\n                             (default=`010203040506070801020304050607080102030405060708')\n  -a, --action=ENUM        Action to take  (possible values=\"version\",\n                             \"generate\", \"set-mgm-key\", \"reset\",\n                             \"pin-retries\", \"import-key\",\n                             \"import-certificate\", \"set-chuid\",\n                             \"request-certificate\", \"verify-pin\",\n                             \"verify-bio\", \"change-pin\", \"change-puk\",\n                             \"unblock-pin\", \"selfsign-certificate\",\n                             \"delete-certificate\", \"read-certificate\",\n                             \"status\", \"test-signature\", \"test-decipher\",\n                             \"list-readers\", \"set-ccc\", \"write-object\",\n                             \"read-object\", \"attest\", \"move-key\",\n                             \"delete-key\")\n\n       Multiple actions may be given at once and will be executed in order\n       for example --action=verify-pin --action=request-certificate\n\n  -s, --slot=ENUM          What key slot to operate on  (possible\n                             values=\"9a\", \"9c\", \"9d\", \"9e\", \"82\",\n                             \"83\", \"84\", \"85\", \"86\", \"87\", \"88\",\n                             \"89\", \"8a\", \"8b\", \"8c\", \"8d\", \"8e\",\n                             \"8f\", \"90\", \"91\", \"92\", \"93\", \"94\",\n                             \"95\", \"f9\")\n\n       9a is for PIV Authentication\n       9c is for Digital Signature (PIN always checked)\n       9d is for Key Management\n       9e is for Card Authentication (PIN never checked)\n       82-95 is for Retired Key Management\n       f9 is for Attestation\n\n      --to-slot=ENUM       What slot to move an existing key to  (possible\n                             values=\"9a\", \"9c\", \"9d\", \"9e\", \"82\",\n                             \"83\", \"84\", \"85\", \"86\", \"87\", \"88\",\n                             \"89\", \"8a\", \"8b\", \"8c\", \"8d\", \"8e\",\n                             \"8f\", \"90\", \"91\", \"92\", \"93\", \"94\",\n                             \"95\", \"f9\")\n\n       9a is for PIV Authentication\n       9c is for Digital Signature (PIN always checked)\n       9d is for Key Management\n       9e is for Card Authentication (PIN never checked)\n       82-95 is for Retired Key Management\n       f9 is for Attestation\n\n  -A, --algorithm=ENUM     What algorithm to use  (possible values=\"RSA1024\",\n                             \"RSA2048\", \"RSA3072\", \"RSA4096\",\n                             \"ECCP256\", \"ECCP384\", \"ED25519\", \"X25519\"\n                             default=`RSA2048')\n  -H, --hash=ENUM          Hash to use for signatures  (possible\n                             values=\"SHA1\", \"SHA256\", \"SHA384\",\n                             \"SHA512\" default=`SHA256')\n  -n, --new-key=STRING     New management key to use for action set-mgm-key, if\n                             omitted key will be asked for\n      --pin-retries=INT    Number of retries before the pin code is blocked\n      --puk-retries=INT    Number of retries before the puk code is blocked\n  -i, --input=STRING       Filename to use as input, - for stdin  (default=`-')\n  -o, --output=STRING      Filename to use as output, - for stdout\n                             (default=`-')\n  -K, --key-format=ENUM    Format of the key being read/written  (possible\n                             values=\"PEM\", \"PKCS12\", \"GZIP\", \"DER\",\n                             \"SSH\" default=`PEM')\n      --compress           Compress a large certificate using GZIP before\n                             import  (default=off)\n      --global             Reset the whole device over all applications\n                             (default=off)\n  -p, --password=STRING    Password for decryption of private key file, if\n                             omitted password will be asked for\n  -S, --subject=STRING     The subject to use for certificate request\n\n       The subject must be written as:\n       /CN=host.example.com/OU=test/O=example.com/\n\n      --serial=INT         Serial number of the self-signed certificate\n      --valid-days=INT     Time (in days) until the self-signed certificate\n                             expires  (default=`365')\n  -P, --pin=STRING         Pin/puk code for verification, if omitted pin/puk\n                             will be asked for\n  -N, --new-pin=STRING     New pin/puk code for changing, if omitted pin/puk\n                             will be asked for\n      --pin-policy=ENUM    Set pin policy for action generate or import-key.\n                             Only available on YubiKey 4 or newer  (possible\n                             values=\"never\", \"once\", \"always\",\n                             \"matchonce\", \"matchalways\")\n      --touch-policy=ENUM  Set touch policy for action generate, import-key or\n                             set-mgm-key. Only available on YubiKey 4 or newer\n                             (possible values=\"never\", \"always\",\n                             \"cached\")\n      --id=INT             Id of object for write/read object\n  -f, --format=ENUM        Format of data for write/read object  (possible\n                             values=\"hex\", \"base64\", \"binary\"\n                             default=`hex')\n      --attestation        Add attestation cross-signature  (default=off)\n  -m, --new-key-algo=ENUM  New management key algorithm to use for action\n                             set-mgm-key  (possible values=\"TDES\",\n                             \"AES128\", \"AES192\", \"AES256\" default=`TDES')\n      --scp11              Use encrypted communication as specified by Secure\n                             Channel Protocol 11 (SCP11b)  (default=off)\n</code></pre> <p>Requirements</p> <p> Yubico/yubioath-flutter</p> <p> Yubico Authenticator</p> <p> yubico-authenticator</p> <p><code>brew install --cask yubico-authenticator</code></p>"},{"location":"scripts/yubikey/#yubico-authenticator","title":"<code>Yubico Authenticator</code>","text":"<p>Yubico Authenticator has evolved into a more holistic app for configuring Yubikey, but its primary purpose is serving up OATH codes saved to Yubikey. </p> <p>Outside of the OATH functionality, it provides a clean UI for identifying serial number and firmware version, configuring the two touch slots, and reviewing saved Passkeys and PIV certificates.</p> <p>See also: Yubico Authenticator User Guide</p>"},{"location":"scripts/yubikey/#yubikey-configuration-resources","title":"Yubikey Configuration Resources","text":"<ul> <li>YubiKey Technical Manual</li> <li>ykman CLI and YubiKey Manager GUI Guide</li> </ul>"},{"location":"scripts/yubikey/#working-with-multiple-keys","title":"Working With Multiple Keys","text":"<p>It's always recommended to have at least one spare Yubikey to configure at the same time you sit down to configure your first key. What you don't want to happen is to spend a few hours getting your key configured just how you want it, but then decide after-the-fact that you should have purchased a spare.  When that spare arrives, it will be frustrating to try to get that second key configured exactly as you did the first key unless you wrote everything down and saved all of the passcodes, pins, etc. in your password manager. </p> <p>Worse, if you've only setup a single key and then lose it, you're going to have to spend potentially hours going through all of your sites and services to remove your old key, setup a new one, or add alternative / backup authentication methods. </p> <p>When you do begin to work with multiple keys, you can connect each of them to your computer to setup simultaneously without having to constantly connect-disconnect-reconnect your keys a hundred times. The solution to this is noting the Serial Numbers for each of your keys.</p> <p>Setup Order</p> <p>For GnuPG operations, you'll need to work on a single connected Yubikey at a time. For this reason, I always start with the OpenGPG configuration of each Yubikey first before moving on to the rest of the function setups (which can handle all cards being connected at once).</p> <pre><code># multiple keys connected\n$ ykman info \n\nERROR: Multiple YubiKeys detected. Use --device SERIAL to specify which one to use.\n\n\n# identify all of the keys that are connected\n$ ykman list\n\nYubiKey 5C NFC (5.7.1) [OTP+FIDO+CCID] Serial: 12121212\nYubiKey 5C Nano (5.7.1) [OTP+FIDO+CCID] Serial: 31313131\nYubiKey 5C Nano (5.7.1) [OTP+FIDO+CCID] Serial: 32323232\nYubiKey 5C NFC (5.7.1) [OTP+FIDO+CCID] Serial: 13131313\n</code></pre> <p>To specify a device, <code>--device 123456</code> must always come immediately after invocation of the CLI tool:</p> <pre><code>$ ykman --device 12121212 info\n\nDevice type: YubiKey 5C NFC\nSerial number: 12121212\nFirmware version: 5.7.1\nForm factor: Keychain (USB-C)\nEnabled USB interfaces: OTP, FIDO, CCID\nNFC transport is enabled\n\nApplications    USB     NFC    \nYubico OTP      Enabled Enabled\nFIDO U2F        Enabled Enabled\nFIDO2           Enabled Enabled\nOATH            Enabled Enabled\nPIV             Enabled Enabled\nOpenPGP         Enabled Enabled\nYubiHSM Auth    Enabled Enabled\n\n\n\n$ ykman --device 31313131 info\n\nDevice type: YubiKey 5C Nano\nSerial number: 31313131\nFirmware version: 5.7.1\nForm factor: Nano (USB-C)\nEnabled USB interfaces: OTP, FIDO, CCID\n\nApplications\nYubico OTP      Enabled\nFIDO U2F        Enabled\nFIDO2           Enabled\nOATH            Enabled\nPIV             Enabled\nOpenPGP         Enabled\nYubiHSM Auth    Enabled\n</code></pre>"},{"location":"scripts/yubikey/#pins-and-security","title":"PINs and Security","text":"<p>When reviewing the various modes available on Yubikey (section below), keep in mind that each one has it's own PIN security preference settings. Some functions require the PIN to be set while others do not. Additionally, some OSes place additional requirements on PIN type or length above and beyond the minimum supported by Yubico. </p> <p>For a medium baseline of security, make sure your PINs are at least 6 digits where fewer are supported.</p> <p>The strength of a Yubikey's security is derived from two of the three authentication factors: something you have, and something you know. The stronger your PINs are, the more secure your Yubikey is. Enabling optional features that require PINs, passwords, or touch increase the security of your device at the cost of inconvenience. </p> Yubikey App / PIN PIN Length Default Set/ChangeRequired Options Notes FIDO2(Passkeys) 4 to 63 Not Set Yes - Always Require User Verification (User Presence)- Change Minimum PIN Length - Charset: 0-9, a-z, A-Z, (no special characters) OTP(Touch slots) n/a short touch /long touch No - Configure as: Yubico OTP, Challenge-response, Static password, or OATH-HOTP - No PIN settings. OTP operates on touch only. OATH Unrestricted Not Set No - Set / Change a password- Remember password on this computer- Forget / Clear password - Charset: 0-9, a-z, A-Z, special characters allowed- Password not required by default, anyone with physical access to yubikey can generate codes. OpenPGPAccess PIN 6 to 64 <code>123456</code> No - Change PIN- Change max attempts allowed- Require touch per PGP subkey - Charset: alphanumeric only- Used for day-to-day PGP activity- Changing default not required but strongly advised. OpenPGPAdmin PIN 8 to 64 <code>12345678</code> No - Change PIN- Change max attempts allowed - Charset: alphanumeric only- Used for configuring PGP features- Changing default not required but strongly advised. OpenPGPReset PIN 6 to 64 Not Set No - Set / Change PIN- Change max attempts allowed - Charset: alphanumeric only- Not required, but if set must be used to reset PGP app when max retries exceeded. Useful for allowing a user to reset PGP without giving them the Admin PIN for configuration access. PIVAccess PIN 6 to 8 <code>123456</code> No - Change PIN- Change max attempts allowed - Charset: any ASCII, but OSes may limit to numeric only- Used for day-to-day PIV activity- Changing default not required but strongly advised. PIVUnlock PIN 6 to 8 <code>12345678</code> No - Change PIN- Change max attempts allowed - Charset: any ASCII, but OSes may limit to numeric only- Used for unlocking the PIN if max retries exceeded- Changing default not required but strongly advised. PIVMgmt Key depends on algorithm used see note below No - Supports 3DES, orAES 128/192/256 - Required for management functions. <p>For the PIV Management Key: </p> <ul> <li>The default Management Key is <code>010203040506070801020304050607080102030405060708</code> 3DES (also referred to as TDES) and 48 characters long. Other acceptable formats are AES 128 (32 characters), AES 192 (48 characters), and AES 256 (64 characgers). Keys can be randomly generated on-device or manually entered. </li> <li>The Management Key can optionally be protected by PIN.</li> </ul>"},{"location":"scripts/yubikey/#attemps-and-retries","title":"Attemps and Retries","text":"<p>In general, if you exceed the retry count for a specified application, that application will become fully blocked from operation and cannot be used again until an \"app reset\" has been performed. This causes all data for the blocked app to be deleted. </p> Yubikey App Default Retries Changable Notes FIDO2 8 No Three (3) incorrect attempts in a row: key must be removed and reinserted.Eight (8) attempts: FIDO2 is disabled entirely and FIDO2 app must be reset, wiping all FIDO credentials from Yubikey. OTP n/a n/a Touch only. OATH no enforced limit No Forgotten passwords can only be 'reset' by resetting the entire OATH application on Yubikey, effectively wiping all OATH codes from the device. OpenPGP 3 / 3 / 3 Yes If you exceed the access PIN retry count, OpenPGP becomes \"locked\" until you enter your admin PIN.If you've set a reset PIN, the reset PIN must be used to unlock Yubikey instead.If you exceed the admin PIN or reset PIN retry count, OpenPGP becomes \"blocked\" and cannot be used until OpenPGP is reset, wiping all OpenPGP keys from Yubikey. PIV 3 / 3 Yes If PIN retry count is exceeded, PIV becomes \"locked\" until you enter your PUK.If the PUK retry count is exceeded, PIV becomes \"blocked\" and cannot be used until PIV is reset, wiping all PIV data from Yubikey, including PIN, PUK, and Management Key."},{"location":"scripts/yubikey/#apps-modes-of-operation","title":"Apps (modes of operation)","text":""},{"location":"scripts/yubikey/#fido-u2f-fido2","title":"FIDO U2F / FIDO2","text":"<p>(Passwordless &amp; 2FA Authentication)</p> <ul> <li>Used for passwordless login or as a second factor for online accounts.</li> <li>Works with services like Microsoft, Google, GitHub, and Facebook.</li> <li>Resistant to phishing since authentication only works on legitimate sites.</li> <li>FIDO2 enables single-factor authentication, while U2F (universal second factor) provides two-factor.</li> </ul> <p>Use-case example: Logging into Microsoft with just your Yubikey and PIN, replacing username and password.</p> <p>Capacity: <code>100 resident (discoverable) credentials</code> (firmware &gt;= 5.7), <code>25 credentials</code> (firmware &lt; 5.7)</p>"},{"location":"scripts/yubikey/#otp-touch-slots","title":"OTP (Touch Slots)","text":"<ul> <li>Generates one-time passwords (OTP) for login security.</li> <li>Works with legacy systems that don't support modern authentication (like older VPNs).</li> <li>Supports both Yubico OTP (proprietary, cloud-verified) and HOTP (event-based OTP).</li> </ul> <p>Use-case example: Logging into a VPN that requires a one-time password along with your username and password. </p> <p>Use-case example: Programming the long-touch slot as a 'Static Password' and assigning a very long complex password.</p> <p>Capacity: <code>2 slots</code></p> <p>The easiest way to setup one or both of the OTP slots on Yubikey is to use the \"<code>Yubikey Manager</code>\" or \"<code>Yubico Authenticator</code>\" apps. The OTP functionality is accessed by either short-pressing or long-pressing the Yubico logo on the physical key.</p>"},{"location":"scripts/yubikey/#oath-totp-hotp","title":"OATH (TOTP &amp; HOTP)","text":"<ul> <li>Works exactly like Google Authenticator and Authy but stores the codes securely on your Yubikey - not on your computer or mobile device. </li> <li>Generates TOTP (time-based one-time passwords) for 2FA logins.</li> <li>Requires the Yubikey to generate authentication codes, reading only the datetime from your computer or mobile device. </li> </ul> <p>Use-case example: Using the Yubico Authenticator app to generate 6-digit TOTP codes for logging into services like GitHub, Amazon, or your bank account.</p> <p>Capacity: <code>64 slots</code> (firmware &gt;= 5.7), <code>32 slots</code> (firmware &lt; 5.7)</p>"},{"location":"scripts/yubikey/#openpgp","title":"OpenPGP","text":"<p>(Encryption, Signing, and Authentication)</p> <p>(If you've never created PGP keys before and want a walk-through of this process, see the PGP Primer)</p> <ul> <li>Stores PGP private keys securely on the Yubikey itself. </li> <li>Used for encrypting/decrypting emails, signing files, and SSH authentication.</li> <li>Ensures security of private keys - keys cannot be exported once loaded into Yubikey.</li> </ul> <p>Use-case example: Signing and encrypting emails with OpenPGP to ensure only the intended recipient can read them. </p> <p>Use-case example: Signing code commits on GitHub.</p> <p>Capacity: <code>3 subkeys</code> (Encryption, Signature, Authentication) </p>"},{"location":"scripts/yubikey/#piv-smart-card","title":"PIV (Smart Card)","text":"<ul> <li>Functions as a hardware smart card for identity verification.</li> <li>Used for logging into computers securely.</li> <li>Supports digital signing and encryption for documents.</li> <li>Ensures security of private keys - keys cannot be exported once loaded into Yubikey.</li> </ul> <p>Capacity: <code>19</code> functionally usable slots (<code>5</code> specific-function, <code>14</code> retired key slots).</p>"},{"location":"scripts/yubikey/yk-fido2/","title":"Yubikey FIDO2 / Passkey Configuration","text":"<p>FIDO U2F and FIDO2 are both authentication protocols developed by the FIDO Alliance to enhance security and eliminate weak passwords. The main difference between them is that U2F is a second-factor protocol only, while FIDO2 can be used for passwordless (single-factor) or second-factor. </p> <p>U2F is still useful in the sense that it is phishing-resistant, but FIDO2 has quickly become more prominent with the rise of Passkeys.</p>"},{"location":"scripts/yubikey/yk-fido2/#what-they-are","title":"What They Are","text":"<p>Passkeys use public-key cryptography, which sounds intimidating but doesn't need to be:</p> <ol> <li> <p>When you create a passkey for a website, your device generates two keys:</p> <ul> <li>A private key, which stays securely stored on your device.</li> <li>A public key, which gets registered with the website.</li> </ul> </li> <li> <p>When you try to log in:</p> <ul> <li>The website checks your public key.</li> <li>Your device confirms your identity (i.e., fingerprint, Face ID, or PIN).</li> <li>If everything matches, you're logged in -- no password required.</li> </ul> </li> </ol>"},{"location":"scripts/yubikey/yk-fido2/#resident-vs-non-resident","title":"Resident vs Non-Resident","text":"<p>FIDO2 uses a concept of discoverable (resident) and non-discoverable (non-resident) credentials. The primary difference between them is also the functional determiner as to whether or not it supports single-factor authentication: storage of the credential on-device. </p> <p>Resident credentials require storage space - non-resident credentials are computationally determined.</p> Feature Resident(Discoverable) Non-Resident(Non-Discoverable) Stored on Authenticator Yes No Username Required No Yes Works for Passwordless Yes No (requires username first) Supported by Passkeys Yes No Storage Limitation Yes (limited slots on hardware keys) No (server stores user records)"},{"location":"scripts/yubikey/yk-fido2/#fido2-webauthn-ctap-vs-passkeys","title":"FIDO2 (WebAuthn + CTAP) vs Passkeys","text":"<p>FIDO2 predates Passkeys, but the two are very closely related. They both utilize the same underlying technology -- WebAuthn (web authentication standard), and CTAP (a protocol for talking to security keys) -- but operate in different ways. </p> <p>Passkeys can be thought of more as an extension of FIDO2. Where FIDO2 was intended to be device-bound, Passkeys were intended to have multi-device support and synchronize across cloud services.</p> Feature FIDO2(Traditional) Passkeys Storage Tied to a hardware device (like Yubikey) Synced across devices via cloud(Apple, Google, Microsoft) Portability Needs the same hardware key each time Works across devices via cloud sync Backup &amp; Recovery If you lose the key, you need a backup key Cloud-based, so you can recover from another device Usability Requires inserting and tapping a Yubikey or using built-in auth Works across devices without needing a separate security key Adoption Mostly used in enterprise / high-security setups Designed for mainstream users to replace passwords easily"},{"location":"scripts/yubikey/yk-fido2/#bottom-line","title":"Bottom Line","text":"<p>The definition of Passkey versus FIDO2 has been loosely defined, and most websites or services don't actually differentiate between the two - even if their service supports one over the other. </p> <p>Most websites that state they support Passkeys actually support FIDO2 -- and because Passkeys are an extension of FIDO2, both are supported. On these sites, you can register one or more Yubikeys for authentication, or create a passkey via your mobile device or password manager. </p> <p>Other websites claim to support \"passwordless authentication,\" but in reality only support Passkeys. FIDO2 can be \"passwordless\" ... but if a site only supports a mobile-first implemenation (iCloud, Google, password managers, etc.), what the user experiences is the ability to enable passwordless only from an iPhone or Android device. </p> <p>Further still, some sites that claim to support Passkeys actually only support them as a second-factor. This can get even more muddied when they only support using them as a second factor on mobile devices. In practice, these sites only support FIDO U2F -- which could easily be opened up to significantly more device types. They are being artificially limited by a lack of understanding about which technology they're actually using and supporting.  </p>"},{"location":"scripts/yubikey/yk-fido2/#yubikeys","title":"Yubikeys","text":"<p>Yubikeys do not support Passkeys in the strictest definition of the technology -- however, because most sites that support Passkeys actually support FIDO2, Yubikeys can be used quite easily. </p> <p>Key Takeaway: If you're going to use Yubikey for FIDO2 authentication:</p> <ol> <li>Purchase multiple devices and configure them at the same time.</li> <li>Keep a log of which sites and services you've registered your device with. Your password manager makes an excellent location to store this information. </li> <li>Note which apps / services are RESIDENT vs NON-RESIDENT.</li> </ol>"},{"location":"scripts/yubikey/yk-fido2/#preparing-yubikey-for-passkeys","title":"Preparing Yubikey for Passkeys","text":"<p>If you choose to use Yubikey to store your Passkeys, you need to setup your FIDO2 PIN ahead of time. Unlike with PIV and OpenPGP where Yubikey comes with default PINs set from the factory, FIDO2 does not.</p> <pre><code>ykman fido access change-pin -n XXXXXXXXXX\n</code></pre> <p>While we're here, we should touch on \"user presence\" (UP) vs \"user verification\" (UV). The concept is very simple -- presence requires that you touch the Yubikey, and verification will authenticate you somehow (i.e., password, PIN, fingerprint, Face ID, etc.). If you want to enable User Verification, you can do that with the following command (substituting your PIN for the X's):</p> <pre><code>ykman fido config toggle-always-uv -P XXXXXXXXXX\n</code></pre> <p>And with that, your Yubikey is ready to register Passkeys. </p>"},{"location":"scripts/yubikey/yk-fido2/#website-support","title":"Website Support","text":"<p>Passkeys are still relatively new, and not everyone supports it yet.  But there are a few resources you can check out to identify sites you regularly use that do support Passkeys.</p> <ul> <li>Passkeys.directory is a community-driven index of websites, apps, and services that offer signing up with passkeys.</li> <li>Passkeys.io maintains a list of sites and apps that have implemented Passkeys as a full password replacement - meaning the passkey option is visibly prominent on the login screen. Services that require you to enter a username before being prompted (or that use WebAuthn as a second-factor method) are not listed.</li> <li>Passkeys.com is another list of Passkey-supported sites.</li> <li>Keeper Security also maintains a list of websites that support Passkey authentication.</li> </ul>"},{"location":"scripts/yubikey/yk-fido2/#keep-track-of-credentials","title":"Keep Track of Credentials","text":"<p>Remember to keep a record of which sites and services you've registered your Yubikeys with, and whether or not that site has a <code>resident</code> or <code>non-resident</code> credential. Because resident credentials are discoverable (stored on Yubikey itself), you can retrieve a list of those credentials at any time:</p> <pre><code>ykman fido credentials list --pin 654321\n\nCredential ID  RP ID                    Username            Display name      \nba8f5853...    login.microsoft.com      jdoe@example.com    John Doe        \nb5ce1806...    adobe.com                jdoe@example.com    jdoe@example.com  \n04692f9f...    amazon.com               john.d@gmail.com    John D        \na771def9...    github.com               johndoe             John Doe        \nac8bb687...    google.com               myother@email.com   John Doe        \n0e4a9165...    www.linkedin.com         jdoe@example.com    jdoe@example.com\n5c077083...    account.microcenter.com  jdoe@example.com    jdoe@example.com\n4278543d...    uber.com                 jdoe@example.com    jdoe@example.com\n</code></pre> <p>Non-resident credentials can only be identified from your memory. If you know you registered a key with a particular website or service but the credential is not listed when you run the \"list\" command, that credential is non-resident. </p>"},{"location":"scripts/yubikey/yk-oath/","title":"Yubikey Open Authentication Configuration (OATH / TOTP)","text":"<p>One of my favorite aspects of Yubikey is the ability to store TOTP (time-based one-time passcodes) directly on the key itself. I use this integration in several different tools, but the one most people associate with it is the Yubico Authenticator. While the app itself is very handy, most of my use comes from script and command-line integration, and a very light-weight xbar script that sits in my macOS menu bar: TOTP for xbar. </p> <p>To make the most effective use of this, you really do need to have a good strategy in mind for how you want to organize your TOTP codes and harvest them. We're all familiar the process of having to scan a QR code to setup MFA in an authenticator app that then provides us with 6-digit codes rotating every 30 seconds. Those codes are usually scan-and-forget because they're now tucked away in your authenticator app of choice.</p> <p>But when happens when you get a new phone? Does the app you used support transferring all of those codes to a new device, or are you going to have to go through the pain of setting them all up again? </p>"},{"location":"scripts/yubikey/yk-oath/#totp-harvesting","title":"TOTP Harvesting","text":"<p>There are typically two options:</p> <ol> <li> <p>When you're presented with the QR code to scan, some apps give you a link that will reveal your TOTP Seed string. Save that string in your password manager before setting up the MFA in your app of choice. </p> </li> <li> <p>If there's no option to get the TOTP Seed string, I snap a photo or screenshot when I'm away from home, or grab a screenshot when I'm sitting at my desk. Using a tool called Zbar (get it via Homebrew) I can decode the QR code from the macOS terminal to get the full TOTP URI.</p> </li> </ol> <p>For demonstration purposes, I grabbed a quick demo QR code from GitHub and took a screenshot of just a single QR code. </p> <pre><code>$ zbarimg --raw ./Downloads/temp.png\n\notpauth://totp/Amazon:jdoe@gmail.com?secret=VOHJXBL54OM2TTLKANOUUCJTE7PXVOIV&amp;issuer=Amazon&amp;algorithm=SHA1&amp;digits=6&amp;period=30\nscanned 1 barcode symbols from 1 images in 0.02 seconds\n</code></pre> <p>The format is <code>otpauth://TYPE/LABEL?PARAMETERS</code>, and the parameters contain all of the data needed by authenticator apps like Authy or Google Authenticator. The <code>secret</code> parameter (<code>VOHJXBL54OM2TTLKANOUUCJTE7PXVOIV</code>) is the seed we need. </p> <p>TOTP codes mostly follow the same format:</p> <ul> <li>Algorithm = <code>SHA1</code></li> <li>Digits = <code>6</code></li> <li>Period = <code>30</code> (seconds)</li> </ul> <p>Years ago, I got into the habit of grabbing this URI for every QR code and saving the output in my password vault, Strongbox. For each entry, I create two custom fields, both marked as <code>Concealable</code>, where one I named \"TOTP URI\" and the other \"TOTP SEED\". </p> <ul> <li>TOTP URI: <code>otpauth://totp/Amazon:jdoe@gmail.com?secret=VOHJXBL54OM2TTLKANOUUCJTE7PXVOIV&amp;issuer=Amazon&amp;algorithm=SHA1&amp;digits=6&amp;period=30</code></li> <li>TOTP SEED: <code>VOHJXBL54OM2TTLKANOUUCJTE7PXVOIV</code></li> </ul> <p>If I ever want to move my TOTP codes to other apps or devices, it can be done quickly and easily becuase I've saved a copy of the URI. (Strongbox has a built-in mechanism to display the rotating TOTP codes as well, so I've always got multiple methods from which to acquire a code when needed.)</p> <p>Where this comes into play for Yubikey, however, is bulk-loading TOTP codes to each Yubikey. </p>"},{"location":"scripts/yubikey/yk-oath/#organization-and-naming-convention","title":"Organization and Naming Convention","text":"<p>If you simply scan the QR code to create the code in your app, different apps give you different options. Some let you rename the codes - others take the values directly from the URI string and you get what you get. </p> <p>In our example above, the label is <code>Amazon</code>. But maybe you've got multiple Amazon accounts. The format I prefer to use is <code>LABEL [Identifier]</code> because this makes it easy for me to target specific accounts for services where I've got multiple user accounts. Some very basic examples include:</p> <ul> <li><code>AWS [Production]</code></li> <li><code>AWS [Development]</code></li> <li><code>Amazon [Work]</code></li> <li><code>Amazon [Personal]</code></li> </ul> <p>The important take-away is that you define a structure that works best for your use-case and be consistent. </p>"},{"location":"scripts/yubikey/yk-oath/#importing-totp-keys-to-yubikey","title":"Importing TOTP Keys to Yubikey","text":"<p>The new firmware <code>5.7.x</code> allows up to 64 of these keys to be saved on each key, whereas earlier versions only supported 32. If you have more than 64 accounts that you want to protect, your options are going to be to either prioritize which accounts you want secured by the Yubikey, or use multiple keys for different sets of codes.  I wouldn't recommend the latter approach, because that's going to get confusing for you quickly. </p> <p>Adding keys to Yubikey is simple with the <code>ykman</code> (Yubikey Manager) CLI app. </p> OATH options<pre><code>$ ykman oath --help\n\nUsage: ykman oath [OPTIONS] COMMAND [ARGS]...\n\n  Manage the OATH application.\n\n  Examples:\n\n    Generate codes for accounts starting with 'yubi':\n    $ ykman oath accounts code yubi\n\n    Add an account with the secret key f5up4ub3dw and the name yubico,\n    which requires touch:\n    $ ykman oath accounts add yubico f5up4ub3dw --touch\n\n    Set a password for the OATH application:\n    $ ykman oath access change\n\nOptions:\n  -h, --help  show this message and exit\n\nCommands:\n  info      display general status of the OATH application\n  reset     reset all OATH data\n  access    manage password protection for OATH\n  accounts  manage and use OATH accounts\n</code></pre> OATH ACCOUNTS options<pre><code>$ ykman oath accounts --help\n\nUsage: ykman oath accounts [OPTIONS] COMMAND [ARGS]...\n\n  Manage and use OATH accounts.\n\nOptions:\n  -h, --help  show this message and exit\n\nCommands:\n  add     add a new account\n  code    generate codes\n  delete  delete an account\n  list    list all accounts\n  rename  rename an account (requires YubiKey 5.3 or later)\n  uri     add a new account from an otpauth:// URI\n</code></pre> <p>Notice that we have an option to <code>add</code> an account by providing the details, as well as add them by using the <code>uri</code> directly. The URI makes for the most expediant method, but I like having more control to name the accounts exactly what I need at the time they're added.</p> OATH ACCOUNTS ADD options<pre><code>$ ykman oath accounts add --help\n\nUsage: ykman oath accounts add [OPTIONS] NAME [SECRET]\n\n  Add a new account.\n\n  This will add a new OATH account to the YubiKey.\n\n  NAME    human readable name of the account, such as a username or e-mail address\n  SECRET  base32-encoded secret/key value provided by the server\n\nOptions:\n  -o, --oath-type [HOTP|TOTP]     time-based (TOTP) or counter-based (HOTP) account  [default: TOTP]\n  -d, --digits [6|7|8]            number of digits in generated code  [default: 6]\n  -a, --algorithm [SHA1|SHA256|SHA512]\n                                  algorithm to use for code generation  [default: SHA1]\n  -c, --counter INTEGER           initial counter value for HOTP accounts\n  -i, --issuer TEXT               issuer of the account (optional)\n  -P, --period INTEGER            number of seconds a TOTP code is valid  [default: 30]\n  -t, --touch                     require touch on YubiKey to generate code\n  -f, --force                     confirm the action without prompting\n  -p, --password TEXT             the password to unlock the YubiKey\n  -r, --remember                  remember the password on this machine\n  -h, --help                      show this message and exit\n</code></pre> <p>The quickest method I've found for loading keys, is to add them to a shell script, assign it execute permission, and run it while your Yubikey is attached. It makes adding the same set of OATH TOTP accounts to multiple Yubikeys very fast, but it takes time to build the script for the first time.</p> yk-add-oath-with-params.sh<pre><code>#!/bin/bash\n\ndigits=6\nalgorithm=\"SHA1\"\nperiod=30\n\n# Load MFA keys to Yubikey\n\necho \"Adding: AcctA [Ident1]\"\nykman oath accounts add -i 'AcctA [Ident1]' -a $algorithm -d $digits -P $period 'your@email.com' '1234567891234567'\n\necho \"Adding: AcctA [Ident2]\"\nykman oath accounts add -i 'AcctA [Ident2]' -a $algorithm -d $digits -P $period 'other@email.com' '7654321987654321'\n\ndigits=7\nperiod=60\n\necho \"Adding: AcctB [Ident3]\"\nykman oath accounts add -i 'AcctB [Ident3]' -a $algorithm -d $digits -P $period 'another@email.com' '1234567891234567'\n\necho \"Adding: AcctC [Ident1]\"\nykman oath accounts add -i 'AcctB [Ident3]' -a $algorithm -d $digits -P $period 'your@email.com' '7654321987654321'\n</code></pre> <p>If you have multiple accounts that require non-standard parameters, you can parameterize the script to group all of your accounts with custom properties together. However, if all (or the majority) of your accounts follow the default standard, you can simplify the script:</p> yk-add-oath-defaults.sh<pre><code>#!/bin/bash\n\n# Load MFA keys to Yubikey\n\necho \"Adding: AcctA [Ident1]\"\nykman oath accounts add -i 'AcctA [Ident1]' 'your@email.com' '1234567891234567'\n\necho \"Adding: AcctA [Ident2]\"\nykman oath accounts add -i 'AcctA [Ident2]' 'other@email.com' '7654321987654321'\n\necho \"Adding: AcctB [Ident3]\"\nykman oath accounts add -i 'AcctB [Ident3]' 'another@email.com' '1234567891234567'\n\necho \"Adding: AcctC [Ident1]\"\nykman oath accounts add -i 'AcctB [Ident3]' 'your@email.com' '7654321987654321'\n</code></pre> <p>Just remember to be mindful of the maximum limit. If you've got one of the newer Yubikeys, you can fit 64 on each device, otherwise your limit is 32. </p>"},{"location":"scripts/yubikey/yk-oath/#interacting-with-totp-codes-on-yubikey","title":"Interacting with TOTP Codes on Yubikey","text":"<p>To view a list of all accounts currently stored on Yubikey:</p> <pre><code>$ ykman oath accounts list                 \n\nAcctA [Ident1]:your@email.com\nAcctA [Ident2]:other@email.com\nAcctB [Ident3]:another@email.com\nAcctB [Ident3]:your@email.com\n</code></pre> <p>To request a TOTP code for an account:</p> <pre><code>$ ykman oath accounts code AcctA [Ident1]\n\nAcctA [Ident1]:your@email.com  476185\n</code></pre> <p>When querying, you don't have to enter the exact name, but be aware that if two names are similar, multiple results can come back:</p> <pre><code>$ ykman oath accounts code AcctA\n\nAcctA [Ident1]:your@email.com      826278\nAcctA [Ident2]:other@email.com     876752\n</code></pre> <p>You can force <code>ykman</code> to request more specificity in order to reveal a code:</p> <pre><code>$ ykman oath accounts code -s AcctA\n\nError: Multiple matches, make the query more specific.\n\nAcctA [Ident1]:your@email.com\nAcctA [Ident2]:other@email.com\n</code></pre>"},{"location":"scripts/yubikey/yk-oath/#totp-with-yubikey-and-xbar","title":"TOTP with Yubikey and  xbar","text":"<p>I wanted something simple and quick to use for grabbing TOTP codes of accounts that I use daily, so I created a plugin for <code>xbar</code> that resides in the macOS menu bar. The plugin includes a number of configuration options depending on the volume of TOTP codes resident on your key, the level of organization desired, and includes support for NerdFonts glyph icons. </p> <p>More details are available under Projects/TOTP/xbar and  github.com/bryandodd/xbar.</p> <p></p> <p><sup>Yubikey not detected</sup></p>"},{"location":"scripts/yubikey/yk-openpgp/","title":"Yubikey OpenPGP Configuration","text":"<p>For more information about PGP (you'll also see it referred to as \"GPG\"), see the PGP Primer. You'll need to have your Keys and Secret Keys handy to successfully store them on your Yubikey. </p>"},{"location":"scripts/yubikey/yk-openpgp/#expected-assumed-configuration","title":"Expected / Assumed Configuration","text":"<pre><code>gpg --list-secret-keys --with-subkey-fingerprint\n\n[keyboxd]\n---------\nsec#  ed25519 YYYY-MM-DD [C]\n      74BD90B590F9AA984391707383308CA85B65951C\nuid           [ultimate] Bryan Dodd &lt;bryan@dodd.dev&gt;\nssb&gt;  ed25519 YYYY-MM-DD [S]\n      ................................5400D8FF\n      Card serial no. = 0006 23456789\nssb&gt;  cv25519 YYYY-MM-DD [E]\n      ................................B4C98A69\n      Card serial no. = 0006 23456789 \nssb&gt;  ed25519 YYYY-MM-DD [A]\n      ................................EB5285E8\n      Card serial no. = 0006 23456789 \n</code></pre> <p>Yubikey's conventions expect that you have a master certifying key <code>[C]</code> from which three (3) subkeys have been derived:</p> <ul> <li>A signing key <code>[S]</code></li> <li>An encryption key <code>[E]</code></li> <li>An authentication key <code>[A]</code></li> </ul> <p>In the above example:</p> <ul> <li> <p>sec# : <code>sec</code> stands for Secret Key (in this case a master certifying key). Ideally you do not want this key to reside on the machine you use daily because the only time it is ever needed is when generating new subkeys or revoking them. The <code>#</code> symbold indicates that the machine these keys are associated with is aware that a secret certifying key exists, but it does not exist on the machine. If this key were present, there would be no additional symbol displayed - it would simply read <code>sec</code>.</p> </li> <li> <p>ssb&gt; : <code>ssb</code> stands for Subkey. As with <code>sec</code> above, <code>ssb</code> by itself indicates that the subkey's material is actually present and saved on the local machine's keyring. The <code>&gt;</code> symbol means that the machine is aware of the subkey and knows where to get it, but does not have a copy of the key material saved locally on the machine. This is often referred to as a <code>key stub</code>. You will this referred to as \"stubbing out keys\" or \"the keys have been stubbed (out).\"</p> </li> <li> <p>Directly under the <code>sec</code> key information is <code>uid</code>. This is the key identity. Because this is my key, the secret key is marked with <code>[ultimate]</code> trust. This means that any operations relying on this key should assume that it has ultimate authority and no additional prompts need to be shown to the user. How much trust you place in a key is entirely subjective. It is up to individual users to determine how much they trust a key - this is referred to as the Web of Trust.</p> </li> </ul> <p>Trust levels:</p> <ul> <li><code>unknown</code>: The default trust level, where there is not enough information to discern the trust of a key.</li> <li><code>never</code>: You've explicitly marked this key so it is never trusted. You might use this if you know the key has been compromised or being used by a threat actor.</li> <li><code>marginal</code>: Marginal means \"they're good, but not too good.\" GnuPG will mark a key as <code>trusted</code> when it has received signatures from at least three (3) other keys that you have granted at least <code>marginal</code> trust to. (See \"Web of Trust\" link above).</li> <li><code>full</code>: Should only be used with keys you actually trust. Unlike <code>marginal</code> trust, <code>full</code> trust only requires one signature from a key you've marked as <code>trusted</code>. Think of this as a \"vouching\" system. <ul> <li>e.g.: John trusts Mark's key. Mark signs Paul's key. John now trusts Paul's key because Mark is <code>trusted</code> and trusts (vouched) for Paul. </li> </ul> </li> <li><code>ultimate</code>: Should really only ever be used with your own keys because it is the highest level of trust that can be assigned. </li> </ul>"},{"location":"scripts/yubikey/yk-openpgp/#getting-started","title":"Getting Started","text":"<p>Begin by ensuring that only your new Yubikey is connected to your machine, and execute <code>gpg --card-status</code> and <code>ykman info</code> to verify that you're targeting the correct device. </p> <p>Though some of the initial steps can be done with the YubiKey Manager GUI app, it doesn't support or include everything you need to configure OpenPGP with your Yubikey, so I recommend sticking with the command-line tools for this setup.</p> <pre><code>$ gpg --card-status\n\nReader ...........: Yubico YubiKey OTP FIDO CCID\nApplication ID ...: D1234567891234567891234567891234\nApplication type .: OpenPGP\nVersion ..........: 3.4\nManufacturer .....: Yubico\nSerial number ....: 23456789\nName of cardholder: [not set]\nLanguage prefs ...: [not set]\nSalutation .......: \nURL of public key : [not set]\nLogin data .......: [not set]\nSignature PIN ....: not forced\nKey attributes ...: rsa2048 rsa2048 rsa2048\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 3 0 3\nSignature counter : 0\nKDF setting ......: off\nUIF setting ......: Sign=off Decrypt=off Auth=off\nSignature key ....: [none]\nEncryption key....: [none]\nAuthentication key: [none]\nGeneral key info..: [none]\n\n\n$ ykman info\n\nDevice type: YubiKey 5C NFC\nSerial number: 23456789\nFirmware version: 5.7.1\nForm factor: Keychain (USB-C)\nEnabled USB interfaces: OTP, FIDO, CCID\nNFC transport is enabled\n\nApplications    USB     NFC    \nYubico OTP      Enabled Enabled\nFIDO U2F        Enabled Enabled\nFIDO2           Enabled Enabled\nOATH            Enabled Enabled\nPIV             Enabled Enabled\nOpenPGP         Enabled Enabled\nYubiHSM Auth    Enabled Enabled\n</code></pre> <p>Default PINs</p> <p>If this is a new key and you haven't modified the default PINs, make note of them below. We'll be changing them shortly.  I strongly recommend making a note of all of your pins and passphrases in a secure password manager to help ensure you don't lose access to your Yubikey - especially if you won't use them often.</p> <ul> <li>PIN: <code>123456</code></li> <li>Admin PIN: <code>12345678</code></li> </ul>"},{"location":"scripts/yubikey/yk-openpgp/#update-pins","title":"Update PINs","text":"<p>Admin PIN must be set before Reset Code</p> <pre><code># Set the OpenPGP PIN (min 6 alphanumeric)\nykman openpgp access change-pin --pin 123456 --new-pin XXXXXX\nUser PIN has been changed.\n\n# Set the OpenPGP Admin PIN (min 8 alphanumeric)\nykman openpgp access change-admin-pin --admin-pin 12345678 --new-admin-pin 88888888\nAdmin PIN has been changed.\n\n# Set the OpenPGP Reset Code (min 8 alphanumeric)\nykman openpgp access change-reset-code --admin-pin 88888888 --reset-code 77777777\nReset Code has been changed.\n\n\n# Set retry count for PIN, Reset Code, and Admin PIN (optional!)\nykman openpgp access set-retries 6 6 6\n    Enter Admin PIN: 88888888\n    Set PIN retry counters to: 6 6 6? [y/N]: y\n    Number of PIN/Reset Code/Admin PIN retries set.\n</code></pre> <p>Here, we're changing the default retry / attempt counts from their default <code>3</code> to <code>6</code>.</p>"},{"location":"scripts/yubikey/yk-openpgp/#update-operational-settings","title":"Update Operational Settings","text":"<pre><code>ykman openpgp keys set-touch --help   \nUsage: ykman openpgp keys set-touch [OPTIONS] KEY POLICY\n\n  Set the touch policy for OpenPGP keys.\n\n  The touch policy is used to require user interaction for all operations using the private key on the YubiKey. The touch policy is set individually for each key slot. To see the current touch\n  policy, run the \"openpgp info\" subcommand.\n\n  Touch policies:\n\n  Off (default)   no touch required\n  On              touch required\n  Fixed           touch required, can\\'t be disabled without deleting the private key\n  Cached          touch required, cached for 15s after use\n  Cached-Fixed    touch required, cached for 15s after use, can't be disabled\n                  without deleting the private key\n\n  KEY     key slot to set (sig, dec, aut or att)\n  POLICY  touch policy to set (on, off, fixed, cached or cached-fixed)\n\nOptions:\n  -a, --admin-pin TEXT  Admin PIN for OpenPGP\n  -f, --force           confirm the action without prompting\n  -h, --help            show this message and exit\n\n\n# Set touch requirements for signing, decryption, authentication, and attestation\nykman openpgp keys set-touch sig off\n    Enter Admin PIN: \n    Set touch policy of SIG key to off? [y/N]: y\n    Touch policy for slot SIG set.\n\nykman openpgp keys set-touch dec off\n    Enter Admin PIN: \n    Set touch policy of DEC key to off? [y/N]: y\n    Touch policy for slot DEC set.\n\nykman openpgp keys set-touch aut off\n    Enter Admin PIN: \n    Set touch policy of AUT key to off? [y/N]: y\n    Touch policy for slot AUT set.\n\nykman openpgp keys set-touch att cached\n    Enter Admin PIN: \n    Set touch policy of ATT key to cached? [y/N]: y\n    Touch policy for slot ATT set.\n</code></pre> <p>In the commands above, I've set the \"touch\" requirements for signing, encryption (and decryption), and authenticating to <code>off</code>, but I've set attestation to <code>cached</code>. </p> Value Meaning <code>Off</code> (default) no touch required <code>On</code> touch required <code>Fixed</code> touch required, can't be disabled without deleting the private key <code>Cached</code> touch required, cached for 15s after use <code>Cached-Fixed</code> touch required, cached for 15s after use, can't be disabledwithout deleting the private key"},{"location":"scripts/yubikey/yk-openpgp/#confirm-touch-settings","title":"Confirm Touch Settings","text":"<pre><code>$ ykman openpgp info\n\nOpenPGP version:            3.4\nApplication version:        5.7.1\nPIN tries remaining:        6\nReset code tries remaining: 6\nAdmin PIN tries remaining:  6\nRequire PIN for signature:  Once\nKDF enabled:                False\nTouch policies:            \n  Signature key:      Off\n  Encryption key:     Off\n  Authentication key: Off\n  Attestation key:    Cached\n</code></pre>"},{"location":"scripts/yubikey/yk-openpgp/#update-yubikey-pgp-properties","title":"Update Yubikey PGP Properties","text":"<pre><code>$ gpg --card-edit\n\nReader ...........: Yubico YubiKey OTP FIDO CCID\nApplication ID ...: D1234567891234567891234567891234\nApplication type .: OpenPGP\nVersion ..........: 3.4\nManufacturer .....: Yubico\nSerial number ....: 23456789\nName of cardholder: [not set]\nLanguage prefs ...: [not set]\nSalutation .......: \nURL of public key : [not set]\nLogin data .......: [not set]\nSignature PIN ....: not forced\nKey attributes ...: rsa2048 rsa2048 rsa2048\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 6 6 6\nSignature counter : 0\nKDF setting ......: off\nUIF setting ......: Sign=off Decrypt=off Auth=off\nSignature key ....: [none]\nEncryption key....: [none]\nAuthentication key: [none]\nGeneral key info..: [none]\n\ngpg/card&gt; help\nquit           quit this menu\nadmin          show admin commands\nhelp           show this help\nlist           list all available data\nfetch          fetch the key specified in the card URL\npasswd         menu to change or unblock the PIN\nverify         verify the PIN and list all data\nunblock        unblock the PIN using a Reset Code\nopenpgp        switch to the OpenPGP app\n\ngpg/card&gt; admin\nAdmin commands are allowed\n\ngpg/card&gt; help\nquit           quit this menu\nadmin          show admin commands\nhelp           show this help\nlist           list all available data\nname           change card holder's name\nurl            change URL to retrieve key\nfetch          fetch the key specified in the card URL\nlogin          change the login name\nlang           change the language preferences\nsalutation     change card holder's salutation\ncafpr          change a CA fingerprint\nforcesig       toggle the signature force PIN flag\ngenerate       generate new keys\npasswd         menu to change or unblock the PIN\nverify         verify the PIN and list all data\nunblock        unblock the PIN using a Reset Code\nfactory-reset  destroy all keys and data\nkdf-setup      setup KDF for PIN authentication (on/single/off)\nkey-attr       change the key attribute\nuif            change the User Interaction Flag\nopenpgp        switch to the OpenPGP app\n\ngpg/card&gt; name\nCardholder's surname: Dodd\nCardholder's given name: Bryan\n\ngpg/card&gt; lang\nLanguage preferences: en\n\ngpg/card&gt; login\nLogin data (account name): bryan@dodd.dev\n\ngpg/card&gt; url\nURL to retrieve public key: https://keys.openpgp.org/vks/v1/by-fingerprint/74BD90B590F9AA984391707383308CA85B65951C\n\ngpg/card&gt; list\n\nReader ...........: Yubico YubiKey OTP FIDO CCID\nApplication ID ...: D1234567891234567891234567891234\nApplication type .: OpenPGP\nVersion ..........: 3.4\nManufacturer .....: Yubico\nSerial number ....: 23456789\nName of cardholder: Bryan Dodd\nLanguage prefs ...: en\nSalutation .......: \nURL of public key : https://keys.openpgp.org/vks/v1/by-fingerprint/74BD90B590F9AA984391707383308CA85B65951C\nLogin data .......: bryan@dodd.dev\nSignature PIN ....: not forced\nKey attributes ...: rsa2048 rsa2048 rsa2048\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 6 6 6\nSignature counter : 0\nKDF setting ......: off\nUIF setting ......: Sign=off Decrypt=off Auth=off\nSignature key ....: [none]\nEncryption key....: [none]\nAuthentication key: [none]\nGeneral key info..: [none]\n\ngpg/card&gt; quit\n</code></pre> <p>Not every property is required to be set, but setting as much as you can is helpful in different circumstances. </p> <p>For example, setting the URL enables use of the <code>--fetch</code> command to automatically retrieve a copy of your public key.</p>"},{"location":"scripts/yubikey/yk-openpgp/#loading-pgp-keys","title":"Loading PGP Keys","text":"<p>Plan ahead before continuing ...</p> <p>Keys can ONLY be transferred to Yubikey from your GnuPG Keyring.</p> <ul> <li>If you've previously loaded them to another Yubikey, all you have in your current keyring will be key stubs. This is not sufficient for setting up a new Yubikey, so additional steps will be required.</li> <li>Make sure you've got your public / private keys exported to ASCII-armored files. You will need to re-load your keys from backup to replace stubs with actual keys.</li> <li>Loading keys to Yubikey is a one way operation. Once loaded into Yubikey, you can't export your private key again, so your only option is to delete the keys and upload new ones.</li> </ul> <p>This step is especially important. If you intend to load your OpenPGP keys onto multiple Yubikeys, pay close attention to the order of operations performed here.</p> <p>To begin, the keys you want to transfer to Yubikey must be loaded to your GnuPG Keyring. If your keys are not currently loaded and accessible from your local keyring, you must first re-load them. The most likely reason you may be in this situation is if you've previously loaded your keys to another Yubikey and are setting up a second or new Yubikey. </p> <p>When you issue the command to move your keys to Yubikey, the keys are literally moved. There is no option to only \"copy\" them. The only thing remaining in your local keyring after the transfer process is a stub (pointer to the Yubikey you moved them to), and the process cannot be reversed.</p> <p>To determine if your keys are physically present on your machine or if they've been moved elsewhere, run <code>gpg --list-secret-keys</code>. The subkeys will be listed at the bottom as <code>ssb</code>.  If you see the <code>&gt;</code> symbol, this indicates you only have stubs loaded. You will not be able to transfer your keys to Yubikey in this state.</p> <p>To remedy this, you must have a previously exported set of your private keys available to you - whether thats on your local filesystem, a USB drive, a network drive, etc. If you followed along with the key generation in the PGP Primer, you should have a copy of your subkeys saved as <code>subkeys.asc</code> (or similar). We'll need these soon.</p> <pre><code>$ gpg --list-secret-keys --with-keygrip\n\n[keyboxd]\n---------\nsec#  ed25519 YYYY-MM-DD [C]\n      74BD90B590F9AA984391707383308CA85B65951C\n      Keygrip = ...A47E26C0196ED67BD\nuid           [ultimate] Bryan Dodd &lt;bryan@dodd.dev&gt;\nssb&gt;  ed25519 YYYY-MM-DD [S]    # Note the \"&gt;\" indicating that only stubs exist locally.\n      Keygrip = ...BA272DF1\nssb&gt;  cv25519 YYYY-MM-DD [E]\n      Keygrip = ...CC740E41\nssb&gt;  ed25519 YYYY-MM-DD [A]\n      Keygrip = ...E566D05C\n</code></pre> <p>The <code>Keygrip</code> value from the output indicates where your key stubs are stored locally. Take extra care not to delete the wrong files while you delete the keygrip files for the subkeys you previously stubbed: <code>~/.gnupg/private-keys-v1.d/&lt;keygrip&gt;.key</code>.</p> <p>With the keygrip files removed, import the subkeys from your backup <code>.asc</code> file:</p> <pre><code>$ gpg --import subkeys.asc\n\ngpg: key 83308CA85B65951C: \"Bryan Dodd &lt;bryan@dodd.dev&gt;\" not changed\ngpg: To migrate 'secring.gpg', with each smartcard, run: gpg --card-status\ngpg: key 83308CA85B65951C: secret key imported\ngpg: Total number processed: 1\ngpg:              unchanged: 1\ngpg:       secret keys read: 1\ngpg:   secret keys imported: 1\n</code></pre> <p>If your master key is passphrase protected, be prepared to enter it during the import process - even if your master key is not currently saved to the computer you're working from. Once complete, enumerate your secret keys and note that the stub identifier (<code>&gt;</code>) is no longer present, indicating the key material is indeed present on your local keyring again.</p> <pre><code>$ gpg --list-secret-keys --with-subkey-fingerprint\n\n[keyboxd]\n---------\nsec#  ed25519 YYYY-MM-DD [C]\n      74BD90B590F9AA984391707383308CA85B65951C\nuid           [ultimate] Bryan Dodd &lt;bryan@dodd.dev&gt;\nssb   ed25519 YYYY-MM-DD [S] # (1)\nssb   cv25519 YYYY-MM-DD [E]\nssb   ed25519 YYYY-MM-DD [A]\n</code></pre> <ol> <li> The \"<code>&gt;</code>\" is no longer present, signifying that the key material is present on the local keyring once again.</li> </ol> <p>We're now ready to copy the subkeys over to your new Yubikey. Like before, however, this is a one-way operation. Transferring the keys will once again replace the keys in your keyring with stubs. If this is your first time transferring private keys to Yubikey, read through the entire process carefully so you know what to expect. </p> <p>You're going to need to ...</p> <ul> <li>select a key</li> <li>move it to yubikey</li> <li>deselect the key</li> <li>select the next key</li> <li>etc., etc. </li> </ul> <p>... for each individual key. So pay close attention to where you are in the process to avoid mistakes. The final <code>save</code> step is necessary to save your work and complete the transfer.</p> <pre><code>$ gpg --edit-key bryan@dodd.dev\n\ngpg (GnuPG) 2.4.7; Copyright (C) 2024 g10 Code GmbH\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nSecret subkeys are available.\n\npub  ed25519/83308CA85B65951C\n     created: YYYY-MM-DD  expires: never       usage: C   \n     trust: ultimate      validity: ultimate\nssb  ed25519/5B484E245400D8FF\n     created: YYYY-MM-DD  expires: never       usage: S   \nssb  cv25519/FFEAEADFB4C98A69\n     created: YYYY-MM-DD  expires: never       usage: E   \nssb  ed25519/2BA9D97DEB5285E8\n     created: YYYY-MM-DD  expires: never       usage: A   \n[ultimate] (1). Bryan Dodd &lt;bryan@dodd.dev&gt;\n\ngpg&gt; key 1 # (1)\n\npub  ed25519/83308CA85B65951C\n     created: YYYY-MM-DD  expires: never       usage: C   \n     trust: ultimate      validity: ultimate\nssb* ed25519/5B484E245400D8FF               # &lt;== (8) \n     created: YYYY-MM-DD  expires: never       usage: S   \nssb  cv25519/FFEAEADFB4C98A69\n     created: YYYY-MM-DD  expires: never       usage: E   \nssb  ed25519/2BA9D97DEB5285E8\n     created: YYYY-MM-DD  expires: never       usage: A   \n[ultimate] (1). Bryan Dodd &lt;bryan@dodd.dev&gt;\n\ngpg&gt; keytocard\nPlease select where to store the key:\n   (1) Signature key\n   (3) Authentication key\nYour selection? 1 # (2)\n\n# You may be prompted to enter your PASSPHRASE (if you set one for your master key)\n# as well as your ADMIN PIN for every card action you take. \n\npub  ed25519/83308CA85B65951C\n     created: YYYY-MM-DD  expires: never       usage: C   \n     trust: ultimate      validity: ultimate\nssb* ed25519/5B484E245400D8FF               # &lt;== (9)\n     created: YYYY-MM-DD  expires: never       usage: S   \nssb  cv25519/FFEAEADFB4C98A69\n     created: YYYY-MM-DD  expires: never       usage: E   \nssb  ed25519/2BA9D97DEB5285E8\n     created: YYYY-MM-DD  expires: never       usage: A   \n[ultimate] (1). Bryan Dodd &lt;bryan@dodd.dev&gt;\n\nNote: the local copy of the secret key will only be deleted with \"save\".\ngpg&gt; key 1 # (3)\n\npub  ed25519/83308CA85B65951C\n     created: YYYY-MM-DD  expires: never       usage: C   \n     trust: ultimate      validity: ultimate\nssb  ed25519/5B484E245400D8FF               # &lt;== (13)\n     created: YYYY-MM-DD  expires: never       usage: S   \nssb  cv25519/FFEAEADFB4C98A69\n     created: YYYY-MM-DD  expires: never       usage: E   \nssb  ed25519/2BA9D97DEB5285E8\n     created: YYYY-MM-DD  expires: never       usage: A   \n[ultimate] (1). Bryan Dodd &lt;bryan@dodd.dev&gt;\n\ngpg&gt; key 2 # (4)\n\npub  ed25519/83308CA85B65951C\n     created: YYYY-MM-DD  expires: never       usage: C   \n     trust: ultimate      validity: ultimate\nssb  ed25519/5B484E245400D8FF\n     created: YYYY-MM-DD  expires: never       usage: S   \nssb* cv25519/FFEAEADFB4C98A69               # &lt;== (10)\n     created: YYYY-MM-DD  expires: never       usage: E   \nssb  ed25519/2BA9D97DEB5285E8\n     created: YYYY-MM-DD  expires: never       usage: A   \n[ultimate] (1). Bryan Dodd &lt;bryan@dodd.dev&gt;\n\ngpg&gt; keytocard\nPlease select where to store the key:\n   (2) Encryption key\nYour selection? 2\n\n# Again, be prepared to enter your PASSPHRASE and your ADMIN PIN\n\npub  ed25519/83308CA85B65951C\n     created: YYYY-MM-DD  expires: never       usage: C   \n     trust: ultimate      validity: ultimate\nssb  ed25519/5B484E245400D8FF\n     created: YYYY-MM-DD  expires: never       usage: S   \nssb* cv25519/FFEAEADFB4C98A69               # &lt;== (11)\n     created: YYYY-MM-DD  expires: never       usage: E   \nssb  ed25519/2BA9D97DEB5285E8\n     created: YYYY-MM-DD  expires: never       usage: A   \n[ultimate] (1). Bryan Dodd &lt;bryan@dodd.dev&gt;\n\nNote: the local copy of the secret key will only be deleted with \"save\".\ngpg&gt; key 2 # (5)\n\npub  ed25519/83308CA85B65951C\n     created: YYYY-MM-DD  expires: never       usage: C   \n     trust: ultimate      validity: ultimate\nssb  ed25519/5B484E245400D8FF\n     created: YYYY-MM-DD  expires: never       usage: S   \nssb  cv25519/FFEAEADFB4C98A69               # &lt;== (14)\n     created: YYYY-MM-DD  expires: never       usage: E   \nssb  ed25519/2BA9D97DEB5285E8\n     created: YYYY-MM-DD  expires: never       usage: A   \n[ultimate] (1). Bryan Dodd &lt;bryan@dodd.dev&gt;\n\ngpg&gt; key 3 # (6)\n\npub  ed25519/83308CA85B65951C\n     created: YYYY-MM-DD  expires: never       usage: C   \n     trust: ultimate      validity: ultimate\nssb  ed25519/5B484E245400D8FF\n     created: YYYY-MM-DD  expires: never       usage: S   \nssb  cv25519/FFEAEADFB4C98A69\n     created: YYYY-MM-DD  expires: never       usage: E   \nssb* ed25519/2BA9D97DEB5285E8               # &lt;== (12)\n     created: YYYY-MM-DD  expires: never       usage: A   \n[ultimate] (1). Bryan Dodd &lt;bryan@dodd.dev&gt;\n\ngpg&gt; keytocard\nPlease select where to store the key:\n   (3) Authentication key\nYour selection? 3\n\n# Another prompt to enter your PASSPHRASE and your ADMIN PIN\n\npub  ed25519/83308CA85B65951C\n     created: YYYY-MM-DD  expires: never       usage: C   \n     trust: ultimate      validity: ultimate\nssb  ed25519/5B484E245400D8FF\n     created: YYYY-MM-DD  expires: never       usage: S   \nssb  cv25519/FFEAEADFB4C98A69\n     created: YYYY-MM-DD  expires: never       usage: E   \nssb* ed25519/2BA9D97DEB5285E8\n     created: YYYY-MM-DD  expires: never       usage: A   \n[ultimate] (1). Bryan Dodd &lt;bryan@dodd.dev&gt;\n\nNote: the local copy of the secret key will only be deleted with \"save\".\ngpg&gt; save # (7)\n</code></pre> <ol> <li>Enter <code>key 1</code> to SELECT the first subkey.</li> <li>The first subkey is our signing subkey, so take care to only select the option for the signature slot.</li> <li>You must enter <code>key 1</code> again to DESELECT the first subkey...</li> <li>... and now enter <code>key 2</code> to SELECT the second subkey.</li> <li>As before, you must enter <code>key 2</code> again to DESELECT the second subkey...</li> <li>... and enter <code>key 3</code> to SELECT the final subkey.</li> <li>You don't have to deselect the last subkey, but none of your changes will be SAVED until you enter <code>save</code> and press enter.</li> <li>The <code>*</code> symbol identifies the subkey you have SELECTED</li> <li>The <code>*</code> symbol identifies the subkey you have SELECTED</li> <li>The <code>*</code> symbol identifies the subkey you have SELECTED</li> <li>The <code>*</code> symbol identifies the subkey you have SELECTED</li> <li>The <code>*</code> symbol identifies the subkey you have SELECTED</li> <li>The key has been DE-selected.</li> <li>The key has been DE-selected.</li> </ol>"},{"location":"scripts/yubikey/yk-openpgp/#verify-keys-have-moved","title":"Verify Keys Have Moved","text":"<p>Let's confirm that your keys have once again been REMOVED from your local keyring and replaced with STUBS only:</p> <pre><code>$ gpg --list-secret-keys\n\n[keyboxd]\n---------\nsec#  ed25519 YYYY-MM-DD [C]\n      74BD90B590F9AA984391707383308CA85B65951C\nuid           [ultimate] Bryan Dodd &lt;bryan@dodd.dev&gt;\nssb&gt;  ed25519 YYYY-MM-DD [S]    ## Note the \"&gt;\" stub indicator has returned\nssb&gt;  cv25519 YYYY-MM-DD [E]    ## signifiying that keys have been moved OUT\nssb&gt;  ed25519 YYYY-MM-DD [A]    ## of the local keyring.\n</code></pre> <p>We can also use the <code>--with-subkey-fingerprint</code> to see the Yubikey serial number associated with our key:</p> <pre><code>$ gpg --list-secret-keys --with-subkey-fingerprint\n\n[keyboxd]\n---------\nsec#  ed25519 YYYY-MM-DD [C]\n      74BD90B590F9AA984391707383308CA85B65951C\nuid           [ultimate] Bryan Dodd &lt;bryan@dodd.dev&gt;\nssb&gt;  ed25519 YYYY-MM-DD [S]\n      ................................5400D8FF\n      Card serial no. = 0006 23456789       ## &lt;==\nssb&gt;  cv25519 YYYY-MM-DD [E]\n      ................................B4C98A69\n      Card serial no. = 0006 23456789       ## &lt;==\nssb&gt;  ed25519 YYYY-MM-DD [A]\n      ................................EB5285E8\n      Card serial no. = 0006 23456789       ## &lt;==\n</code></pre> <p>And finally, checking the Yubikey itself:</p> <pre><code>$ gpg --card-status\n\nReader ...........: Yubico YubiKey OTP FIDO CCID\nApplication ID ...: D1234567891234567891234567891234\nApplication type .: OpenPGP\nVersion ..........: 3.4\nManufacturer .....: Yubico\nSerial number ....: 23456789\nName of cardholder: Bryan Dodd\nLanguage prefs ...: en\nSalutation .......: \nURL of public key : https://keys.openpgp.org/vks/v1/by-fingerprint/74BD90B590F9AA984391707383308CA85B65951C\nLogin data .......: bryan@dodd.dev\nSignature PIN ....: not forced\nKey attributes ...: ed25519 cv25519 ed25519\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 6 6 6\nSignature counter : 0\nKDF setting ......: off\nUIF setting ......: Sign=off Decrypt=off Auth=off\nSignature key ....: xxxx xxxx xxxx xxxx xxxx  xxxx xxxx xxxx 5400 D8FF\n      created ....: YYYY-MM-DD 16:32:56\nEncryption key....: xxxx xxxx xxxx xxxx xxxx  xxxx xxxx xxxx B4C9 8A69\n      created ....: YYYY-MM-DD 16:36:40\nAuthentication key: xxxx xxxx xxxx xxxx xxxx  xxxx xxxx xxxx EB52 85E8\n      created ....: YYYY-MM-DD 16:38:00\nGeneral key info..: sub  ed25519/5B484E245400D8FF YYYY-MM-DD Bryan Dodd &lt;bryan@dodd.dev&gt;\nsec#  ed25519/83308CA85B65951C  created: YYYY-MM-DD  expires: never     \nssb&gt;  ed25519/5B484E245400D8FF  created: YYYY-MM-DD  expires: never     \n                                card-no: 0006 23456789\nssb&gt;  cv25519/FFEAEADFB4C98A69  created: YYYY-MM-DD  expires: never     \n                                card-no: 0006 23456789\nssb&gt;  ed25519/2BA9D97DEB5285E8  created: YYYY-MM-DD  expires: never     \n                                card-no: 0006 23456789\n</code></pre> <p>Saving your keys to multiple Yubikeys ...</p> <p>If you have multiple Yubikeys that you want to save your OpenPGP keys to, you'll have to repeat the steps on this page, starting with running the <code>gpg --list-secret-keys --with-keygrip</code> command to get the file path of your local key stubs. </p> <p>After copying your keys to Yubikey, your local keys will be deleted every time. You must re-import your keys from your backup in order to move them to each Yubikey you want to store them on. </p> <p>After your final Yubikey has been updated, do not restore your local keys from backup. Let them stay in your keyring as STUBS ONLY. This ensures that you can now only access your keys by having a Yubikey present.</p>"},{"location":"scripts/yubikey/yk-openpgp/#which-yubikey-to-use","title":"Which Yubikey to Use?","text":"<p>If you have multiple Yubikeys that you've configured with identical OpenPGP keys, note that the GnuPG Keyring will only ever remember the last Yubikey used to stub out your keys. </p> <p>Recall above that we used the <code>--with-subkey-fingerprint</code> command to get the fingerprints of our subkeys, but also to view the Yubikey serial number the keyring is expecting to find our keys on. </p> <pre><code>$ gpg --list-secret-keys --with-subkey-fingerprint\n\n[keyboxd]\n---------\nsec#  ed25519 YYYY-MM-DD [C]\n      74BD90B590F9AA984391707383308CA85B65951C\nuid           [ultimate] Bryan Dodd &lt;bryan@dodd.dev&gt;\nssb&gt;  ed25519 YYYY-MM-DD [S]\n      ................................5400D8FF\n      Card serial no. = 0006 12345678       ## &lt;==\nssb&gt;  cv25519 YYYY-MM-DD [E]\n      ................................B4C98A69\n      Card serial no. = 0006 12345678       ## &lt;==\nssb&gt;  ed25519 YYYY-MM-DD [A]\n      ................................EB5285E8\n      Card serial no. = 0006 12345678       ## &lt;==\n</code></pre> <p>When you change to a different Yubikey on your machine, you'll need to alert GnuPG that your keys need to be remapped to the currently inserted key:</p> <pre><code>$ gpg-connect-agent \"scd serialno\" \"learn --force\" /bye\n\nS SERIALNO D1234567891234567891234567891234\nOK\nS PROGRESS learncard k 0 0\nS PROGRESS learncard k 0 0\nS PROGRESS learncard k 0 0\nOK\n</code></pre>"},{"location":"scripts/yubikey/yk-piv/","title":"Yubikey PIV (Personal Identity Verification)","text":"<p>Yubikey's PIV functionality can be used for a variety of things - like behaving as a \"smart card\" to login to computers securely, SSHing into remote machines, encrypting files and email, or digitally signing documents with Adobe Acrobat, for example. </p> <p>The PIV functions perform their operations through a common interface like PKCS#11, and Yubikey supports RSA and ECDSA keys for this purpose.</p> <p>Default PINs</p> <p>If this is a new key and you haven't modified anything yet, make note of the PIV defaults below. We'll be changing them shortly.</p> <ul> <li>PIN: <code>123456</code></li> <li>PUK: <code>12345678</code></li> <li>Mgmt Key: <code>(3DES) 010203040506070801020304050607080102030405060708</code></li> </ul>"},{"location":"scripts/yubikey/yk-piv/#pin-management","title":"PIN Management","text":"<p>PIV has two levels of access:</p> <ul> <li>End-user (cardholder) level - protected by a PIN. This level is for the normal daily usage of PIV functionality.</li> <li>Administrator level - protected by management key. This level is for provisioning credentials.</li> </ul> <p>The table below lists the different PIV operations and when the PIN, PUK, or Management Key (MGMT) are needed:</p> Action MGMT PIN PUK Comments Generate key pair Change MGMT Requires a new MGMT Change retry counters Yubico extension. Resets PIN and PUK to defaults Import private key Import certificate Move key Delete key Set CHUID Reset card Requires both PIN and PUK to be blocked Verify PIN Sign data Decrypt data Change PIN Requires a new PIN Change PUK Requires a new PUK Reset PIN (unblock) Requires a new PIN <p>Newer firmwares for Yubikey support a 64-character Management Key (AES-256). For maximum security, generate a random compatible string for use as your Management Key:</p> <pre><code>head -c 32 /dev/urandom | hexdump -e '16/1 \"%02x\" \"\\n\"'\n</code></pre> <p>This should output a string like the example below:</p> <pre><code>77343a10df05ede9758df5b248e45eb9e7f95fca74bbe9e3f17e7e3611249acd\n</code></pre> <p>Save this value to your password manager, and proceed with the rest of the Yubikey PIV setup. In the steps below, we'll be replacing the Yubikey Management Key, PIN, and PIN Unlock Key (PUK).  But before we get that far, if you want to change your retry counters from their default value of 3, this is the time to do it. Your Management Key will remain unchanged, but changing the retry counters will reset the PIN and PUK (if you've already set them). It's best to change this first to avoid having to reset your PIN and PUK a second time later. </p> <pre><code># Change the PIN and PUK retry counts from 3 to 6\nykman piv access set-retries -m 010203040506070801020304050607080102030405060708 -P 123456 6 6\n</code></pre> <p>Lost Keys / PINS</p> <p>If you lose your Management Key, the only way to recover is to completely reset all PIV functionality, erasing any keys/certs on the device. This only affects the PIV features.</p> <p>If the wrong PIN is entered 3 times consecutively, the PIN will become blocked (totally unusable). You must use the PUK to set a new PIN.</p> <pre><code># Replace the 3DES default management key with AES256 and the random string generated earlier\nykman piv access change-management-key \\\n    -m 010203040506070801020304050607080102030405060708 \\\n    -a AES256 \\\n    -n 77343a10df05ede9758df5b248e45eb9e7f95fca74bbe9e3f17e7e3611249acd\n</code></pre> <pre><code># Replace the default PIN\nykman piv access change-pin -P 123456 -n 654321\n</code></pre> <pre><code># Replace the default PUK\nykman piv access change-puk -p 12345678 -n 87654321\n</code></pre> <p>For the sake of example, the commands above have changed the PIN and PUK to the reverse of their default values.</p>"},{"location":"scripts/yubikey/yk-piv/#certificate-slots","title":"Certificate Slots","text":"<p>Yubikey 5's hold 24 slots, each capable of holding an X.509 certificate along with its accompanying private key. The slots are very similar, but used for different purposes. Although you can use just about any slot for any purpose, it's best to use them as prescribed by Yubico for maximum compatibility and to avoid confusion.</p> Slot 9a: PIV Authentication <p>Used to authenticate the card and the cardholder. This slot is used for things like system login. PIN is required. Once provided successfully, multiple private key operations can be performed without additional cardholder consent. </p> <p>Example use case: Add your SSH key. Load your public key to remote servers as an authorized key, and use the PKCS#11 interface to authenticate during login. The PKCS#11 interface can also be used to connect this slot to GitHub.</p> Slot 9c: Digital Signature <p>Used for digital signatures for the purpose of document signing, or signing files and executables. PIN is required, and must be submitted every time immediately before a sign operation to ensure cardholder participation at every digital signature generated.</p> <p>Example use case: Adobe Acrobat signatures, code-signing, etc.</p> Slot 9d: Key Management <p>Used for encryption. This slot is used for things like encrypting email or files. PIN is required. Once provided successfully, multiple private key operations can be performed without additional cardholder consent.</p> <p>Example use case: S/MIME certificates for mail encryption via your email client. This slot is NOT intended for GPG encryption.</p> Slot 9e: Card Authentication <p>Used to support physical access applications like providing access to a building via PIV-enabled door locks. PIN is not required to perform private key operations with this slot.</p> Slots 82 through 95: Retired Key Management <p>These slots are intended for previously used Key Management keys in order to be able to decrypt previously encrypted documents or emails.</p> Slot f9: Attestation <p>Not a typo - the slot is <code>f9</code>. This slot can only be used for attestation of other keys generated on-device with instruction <code>f9</code>. This slot is not cleared on reset, but can be overwritten. Read more about PIV Attestation on the Yubico website.</p>"},{"location":"scripts/yubikey/yk-piv/#about-certificates","title":"About Certificates","text":"<p>The normal way to go about getting certificates for use with Yubikey is to purchase them from known certificate authorities. This is the approach you'd want to take if you were a business purchasing certificates for employees to use to sign official company documents. These can get quite expensive. They're usually only valid for a limited period of time, and some of them only allow a certain number of signing or certifying events before you have to pay to bump up to the next tier. And finding certificates that you can load onto your existing Yubikey can be challenging. </p> <p>I encourage you to read more about this in Adobe's own documentation:</p> <ul> <li>Adobe Approved Trust List (these are who you would need to purchase certificates from to have them work most readily / reliably with Adobe Acrobat)</li> <li>About certificate signatures in Adobe Acrobat</li> <li>How to create certificate-based signatures in Adobe Acrobat (how to use your certificates to sign documents)</li> </ul> <p>With that said, the approach I've taken below is to effectively create my own Public Key Infrastructure (PKI). This just means that I'm creating my own self-signed Root Certificate Authority, creating an Intermediate CA, and then issuing certificates from my Intermediate CA for use with my Yubikey. The down side is that if someone received an Adobe document from me that I signed with my keys, Adobe would alert them that the signature isn' recognized by one of their \"Adobe Approved Trust List\" vendors. However - I've published both my Root CA and Intermediate CA on GitHub so that anyone receiving a signed document that claimed to be signed by me, could indeed be validated using my custom CA certificates. The process adds extra steps, because it would require someone to grab my CA certificates, install them, and mark them as Trusted. But then going forward, any document they received signed by me (with these certificates) would be flagged as a valid, authentic signature. </p> <p>This document isn't going to go through all of the steps in detail needed to setup your own PKI -- but I will cover some of the different attributes that I gave my Authentication (9a) and Signing (9c) certificates.</p>"},{"location":"scripts/yubikey/yk-piv/#slot-9a-authentication","title":"Slot 9a - Authentication","text":"<p>For my purposes, I want the Authentication key to be multi-purpose - usable for SSH authentication, but also for other forms of authentication as well. To make this simpler, I'm use a tool called XCA to manage a personal PKI, complete with Root CA, Intermediate CA, and individual keys. This is absolutely not required, but how I've chosen to go about it for my personal use (and because I don't want to pay $300+ annually for \"Adobe Approved\" certificates). If you're interested in learning more about XCA, you can check them out on GitHub and pick it up via Homebrew. </p> <p>Be aware that to use these keys with Yubikey, you need a PKCS#11 library. For macOS, there are multiple options, though the two most common are:</p> <ul> <li><code>/usr/lib/ssh-keychain.dylib</code> - A native PKCS#11 module for macOS that enables SSH to use keys stored in the system keychain.</li> <li><code>/opt/homebrew/lib/libykcs11.dylib</code> - Yubico's PKCS#11 module, packaged with <code>yubico-piv-tool</code>.</li> </ul> <p>The primary differences between them are:</p> <ul> <li>SSH agent forwarding only works with <code>ssh-keychain.dylib</code>. Generally speaking, SSH agent forwarding should be avoided for security reasons - only perform SSH agent forwarding to machines you have high levels of trust in.</li> <li>The Yubico library, <code>libykcs11.dylib</code>, will export all keys stored on Yubikey. The slot order remains the same, so utilizing the slots for their intended purpose makes identifying the public keys associated with your target private key much easier. </li> </ul> <p>Yubikey itself supports ED25519 keys with the PIV application, but there are limitations in PKCS#11 libraries that make it painful to work with at present. I recommend sticking with RSA until such time there are better ED25519 options available.</p> <p>My Root and Intermediate CAs are both 4096-bit, but my <code>Authentication (9a)</code> and <code>Signing (9c)</code> certificates are 2048-bit for maximum compatibility.</p> <p>The <code>Key Usage</code> and <code>Extended Key Usage</code> will be based on your specific needs -- for my purposes, here are the values I've selected:</p> <p>Key Usage</p> <ul> <li>Digital Signature - required for authentication tasks (proof of possession of the private key in challenges)</li> <li>Key Encipherment - required for key exchange in protocols like TLS</li> <li>Non-Repudiation - content commitment</li> </ul> <p>Extended Key Usage</p> <ul> <li>TLS Web Client Authentication (<code>1.3.6.1.5.5.7.3.2</code>) - enables authentication to systems and services (VPN, web applications, SSH, etc.)</li> <li>Smartcard Logon (<code>1.3.6.1.4.1.311.20.2.2</code>) - required for Windows Smart Card logon</li> <li>Email Protection (<code>1.3.6.1.5.5.7.3.4</code>) - used for S/MIME email encryption or signing</li> <li>SSH Client</li> <li>IPSec End Systems (<code>1.3.6.1.5.5.7.3.5</code>) - used for authentication in IPSec-based VPNs<ul> <li>Also included (for maximum compatibility with legacy systems):<ul> <li>IPSec Tunnel</li> <li>IPSec User</li> <li>IP security end entity</li> </ul> </li> </ul> </li> </ul> <pre><code># from the directory where you've saved and output your Private Key &amp; Certificate in PEM format\n# (if your private key has a passphrase associated, you'll be prompted for that passphrase or\n# can modify this command to pass it at load-time)\nykman piv keys import -m &lt;mgmt-key-here&gt; 9a private-key-for-9a.pem\n\nykman piv certificates import -m &lt;mgmt-key-here&gt; --pin &lt;pin&gt; --verify 9a cert-for-9a.crt\n# if the management key or pin are not provided, you will be prompted to enter them\n</code></pre>"},{"location":"scripts/yubikey/yk-piv/#slot-9c-digital-signature","title":"Slot 9c - Digital Signature","text":"<p>Key Usage</p> <ul> <li>Digital Signature - mandatory for signing operations</li> <li>Non-Repudiation - indicates signatures are binding, commonly used for legal and regulatory compliance</li> <li>Critical: <code>true</code></li> </ul> <p>Extended Key Usage</p> <ul> <li>Microsoft Office Signing (<code>1.3.6.1.4.1.311.10.3.12</code>), widely accepted as <code>Document Signing</code></li> <li>Adobe PDF Signing (<code>1.2.840.113583.1.1.5</code>) - specific to Adobe and used to help Acrobat identify specific keys as suitable for PDF signing</li> <li>Email Protection (<code>1.3.6.1.5.5.7.3.4</code>) - used for signing email</li> <li>Time Stamping (<code>1.3.6.1.5.5.7.3.8</code>) - used for trusted timestamping</li> <li>Code Signing (<code>1.3.6.1.5.5.7.3.3</code>) - used for signing software or scripts to verify authenticity and integrity</li> <li>Microsoft Individual Code Signing (<code>1.3.6.1.4.1.311.2.1.21</code>) - used for code signing by an individual developer rather than an organization or company</li> <li>Critical: <code>false</code></li> </ul> <pre><code># from the directory where you've saved and output your Private Key &amp; Certificate in PEM format\n# (if your private key has a passphrase associated, you'll be prompted for that passphrase or\n# can modify this command to pass it at load-time)\nykman piv keys import -m &lt;mgmt-key-here&gt; 9c private-key-for-9c.pem\n\nykman piv certificates import -m &lt;mgmt-key-here&gt; --pin &lt;pin&gt; --verify 9c cert-for-9c.crt\n# if the management key or pin are not provided, you will be prompted to enter them\n</code></pre>"},{"location":"scripts/yubikey/yk-piv/#slot-82-83-root-and-intermediate-ca-retired-key-slots","title":"Slot 82 &amp; 83 - Root and Intermediate CA (Retired Key Slots)","text":"<p>Because I'm using a custom PKI, it will be helpful to have a copy of my Root and Intermediate CA certificates available when needed.  You can accomplish this easily by storing them in slots 82 and 83 of Yubikey, ensuring you have them with you at all times for full-chain signatures. </p> <pre><code># Root CA in Slot 82\nykman piv certificates import -m 77343a10df05ede9758df5b248e45eb9e7f95fca74bbe9e3f17e7e3611249acd 82 your-root-ca.crt\nCertificate imported into slot RETIRED1\n\n# Intermediate CA in Slot 83\nykman piv certificates import -m 77343a10df05ede9758df5b248e45eb9e7f95fca74bbe9e3f17e7e3611249acd 83 your-intermediate.ca.crt\nCertificate imported into slot RETIRED2\n</code></pre>"},{"location":"scripts/yubikey/yk-piv/#verify-slots","title":"Verify Slots","text":"<p>Certificates can be verified with the following commands:</p> <pre><code>$ ykman piv info\n\nPIV version:              5.7.1\nPIN tries remaining:      6/6\nPUK tries remaining:      6/6\nManagement key algorithm: AES256\nCHUID: &lt;your-chuid-value&gt;\nCCC:   No data available\nSlot 82 (RETIRED1):\n  Private key type: EMPTY\n  Public key type:  RSA4096\n  Subject DN:       1.2.840.113549.1.9.1=info@example.com,CN=My Root CA,OU=Certificate Authority,O=MeMyselfAndI,L=MyCity,ST=MyState,C=US\n  Issuer DN:        1.2.840.113549.1.9.1=info@example.com,CN=My Root CA,OU=Certificate Authority,O=MeMyselfAndI,L=MyCity,ST=MyState,C=US\n  Serial:           1234567891234567891 (0x111c222b333d444e)\n  Fingerprint:      769fb8695f130bb752b59ae794c9dad19ddaff399822c7f49d729afa505e3b98\n  Not before:       2025-01-25T00:00:00+00:00\n  Not after:        2045-01-31T23:59:59+00:00\n\nSlot 83 (RETIRED2):\n  Private key type: EMPTY\n  Public key type:  RSA4096\n  Subject DN:       1.2.840.113549.1.9.1=info@example.com,CN=My Intermediate CA,OU=Certificate Authority,O=MeMyselfAndI,L=MyCity,ST=MyState,C=US\n  Issuer DN:        1.2.840.113549.1.9.1=info@example.com,CN=My Root CA,OU=Certificate Authority,O=MeMyselfAndI,L=MyCity,ST=MyState,C=US\n  Serial:           9876543210987654321 (0x555d666e777f888a)\n  Fingerprint:      29c8ba82731d79be8c8520d68ba65e15df3d8dcc1a9d3da282e1e786f329c4ae\n  Not before:       2025-01-25T00:00:00+00:00\n  Not after:        2045-01-31T23:59:59+00:00\n\nSlot 9A (AUTHENTICATION):\n  Private key type: RSA2048\n  Public key type:  RSA2048\n  Subject DN:       CN=YourCommonName,OU=YourOrgUnit,O=YourOrg,L=YourLocality,ST=YourState,C=US\n  Issuer DN:        CN=Your Intermediate CA,OU=Certificate Authority,O=YourOrg,L=YourLocality,ST=YourState,C=US\n  Serial:           00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00\n  Fingerprint:      abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc1\n  Not before:       2025-01-26T20:31:00+00:00\n  Not after:        2035-01-26T20:31:00+00:00\n\nSlot 9C (SIGNATURE):\n  Private key type: RSA2048\n  Public key type:  RSA2048\n  Subject DN:       CN=YourCommonName,OU=YourOrgUnit,O=YourOrg,L=YourLocality,ST=YourState,C=US\n  Issuer DN:        CN=Your Intermediate CA,OU=Certificate Authority,O=YourOrg,L=YourLocality,ST=YourState,C=US\n  Serial:           00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00\n  Fingerprint:      def456def456def456def456def456def456def456def456def456def456def4\n  Not before:       2025-01-26T21:20:00+00:00\n  Not after:        2035-01-26T21:20:00+00:00\n\n\n$ yubico-piv-tool -a status\n\nVersion:    5.7.1\nSerial Number:  12345678\nCHUID:  &lt;your-chuid-value&gt;\nCCC:    No data available\nSlot 9a:    \n    Algorithm:  RSA2048\n    Subject DN: C=US, ST=State, L=Locality, O=Organization, OU=OrgUnit, CN=CommonName\n    Issuer DN:  C=US, ST=State, L=Locality, O=Organization, OU=Certificate Authority, CN=Intermediate CA\n    Fingerprint:    abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc1\n    Not Before: Jan 26 20:31:00 2025 GMT\n    Not After:  Jan 26 20:31:00 2035 GMT\nSlot 9c:    \n    Algorithm:  RSA2048\n    Subject DN: C=US, ST=State, L=Locality, O=Organization, OU=OrgUnit, CN=CommonName\n    Issuer DN:  C=US, ST=State, L=Locality, O=Organization, OU=Certificate Authority, CN=Intermediate CA\n    Fingerprint:    def456def456def456def456def456def456def456def456def456def456def4\n    Not Before: Jan 26 21:20:00 2025 GMT\n    Not After:  Jan 26 21:20:00 2035 GMT\nSlot 82:    \n    Algorithm:  RSA4096\n    Subject DN: C=US, ST=MyState, L=MyCity, O=MeMyselfAndI, OU=Certificate Authority, CN=My Root CA\n    Issuer DN:  C=US, ST=MyState, L=MyCity, O=MeMyselfAndI, OU=Certificate Authority, CN=My Root CA\n    Fingerprint:    769fb8695f130bb752b59ae794c9dad19ddaff399822c7f49d729afa505e3b98\n    Not Before: Jan 25 00:00:00 2025 GMT\n    Not After:  Jan 31 23:59:59 2045 GMT\nSlot 83:    \n    Algorithm:  RSA4096\n    Subject DN: C=US, ST=MyState, L=MyCity, O=MeMyselfAndI, OU=Certificate Authority, CN=My Intermediate CA\n    Issuer DN:  C=US, ST=MyState, L=MyCity, O=MeMyselfAndI, OU=Certificate Authority, CN=My Root CA\n    Fingerprint:    29c8ba82731d79be8c8520d68ba65e15df3d8dcc1a9d3da282e1e786f329c4ae\n    Not Before: Jan 25 00:00:00 2025 GMT\n    Not After:  Jan 31 23:59:59 2045 GMT\nPIN tries left: 6\n</code></pre>"},{"location":"scripts/yubikey/yk-piv/#use-with-ssh","title":"Use with SSH","text":"<p>In order to use this key, we'll need to modify <code>~/.ssh/config</code>:</p> ~/.ssh/config<pre><code>PKCS11Provider /opt/homebrew/lib/libykcs11.dylib\nIdentitiesOnly yes\nIdentityFile ~/.ssh/id_piv.pub\n</code></pre> <p>The <code>IdentityFile</code> line item can be repeated as many times as needed depending on the number of smartcards you have. It's use is necessary because <code>libykcs11.dylib</code>, as mentioned above, will output ALL keys and certificates on Yubikey. If we didn't limit to <code>IdentitiesOnly</code> and define them in the <code>IdentityFile</code>, Yubikey can send 4 keys to a remote host at once. And if you had multiple Yubikeys connected, even more would be sent.</p> <p>Execute the following command and copy the output for <code>Public key for PIV Authentication</code> to <code>~/.ssh/id_piv.pub</code>:</p> <pre><code>ssh-keygen -D /opt/homebrew/lib/libykcs11.dylib\n</code></pre> <p>Alternatively - to use <code>ssh-keychain.dylib</code>:</p> ~/.ssh/config<pre><code>PKCS11Provider /usr/lib/ssh-keychain.dylib\nIdentitiesOnly yes\nIdentityFile ~/.ssh/id_piv.pub\n</code></pre> <p>Important Distinction</p> <p><code>ssh-keychain.dylib</code> works only with keys in slot <code>9a</code>.</p> <p>Grab the public key and write it directly to <code>~/.ssh/id_piv.pub</code> with:</p> <pre><code>ssh-keygen -D /usr/lib/ssh-keychain.dylib &gt; ~/.ssh/id_piv.pub\n</code></pre>"},{"location":"scripts/yubikey/yk-piv/#github-example","title":"GitHub Example","text":"<p>If you followed the steps above and intend to use this form of authentication with GitHub, for example, you might have an entry in your <code>~/.ssh/config</code> file that looks similar to the following:</p> <pre><code>Host github.com\n  AddKeysToAgent yes\n  IdentitiesOnly yes\n  HostName github.com\n  User git\n  PKCS11Provider /opt/homebrew/lib/libykcs11.dylib\n  IdentityFile ~/.ssh/id_piv.pub\n</code></pre> <p><code>IdentityFile</code> is traditionally used for private key files, but in the case of Yubikey we specifically want to point to the public key and let the tools identify the appropriate private key. </p>"},{"location":"scripts/yubikey/yk-piv/#retrieve-specific-keys-quickly","title":"Retrieve Specific Keys Quickly","text":"<p>The fastest way to recall a certificate is by using <code>ykman</code> and specifying the certificate by slot. For example:</p> <pre><code># Output PEM format content of slot 83 to the the screen\nykman piv certificates export 83 -\n\n# Create a copy of the certificate on the local system\nykman piv certificates export 9a my-auth-certificate.pem\n</code></pre>"},{"location":"scripts/yubikey/yk-piv/#signing-documents-with-adobe-acrobat","title":"Signing Documents With Adobe Acrobat","text":"<p>The most well-known use for these keys is digitally signing documents in Adobe Acrobat. Certificates and Yubikeys aren't required to sign documents digitally -- you can upload an image of your signature and apply it to documents through the Adobe UI without either one. The result is a \"visible\" signature on the document, but anyone with a scanned image of your signature could just as easily apply your signature to a different docoument. </p> <p>Certificate-based signatures help with two core issues: authenticating the signer, and verifying that a document hasn't been tampered with. At a high level, the concept is:</p> <ul> <li> <p>Only you have access to your signing certificate. It's something you have physical possession of, and is ideally protected by some additional mechanism - be it a PIN, a passphrase, or a combination of protections. Someone seeking to impersonate you would not simply be able to find an existing document you've signed and copy/paste your signature into a new document. </p> </li> <li> <p>When you certify / verify a document, your certificate is used to calculate a one-way hash of the document you just signed. This hash takes into consideration everything in the document - visible and invisible - to create a unique value that would be completely different if you'd left a comma out of a sentence or placed your signature in a slightly different position on the page.  When your recipient receives your signed and certified document, their machine uses your public key to re-compute the hash of the document. If the document has not been modified or tampered with, the hash will calculate identically to your original hash, confirming the document is authentic.  </p> </li> </ul>"},{"location":"scripts/yubikey/yk-piv/#acrobat-settings","title":"Acrobat Settings","text":"<p>Instructions for macOS</p> <p>The information presented below comes from my experience with Adobe Acrobat on Apple Silicon. The experience for Windows or even macOS on Intel may be entirely different. I've included links to a few othe resources worth checking out, but know going into this that your mileage may vary.</p>"},{"location":"scripts/yubikey/yk-piv/#disable-protected-mode","title":"Disable \"Protected Mode\"","text":"<p>To use a non-Adobe ATL certificate, open Adobe Preferences, look for the \"Security (Enhanced)\" section, and de-select \"Enable PRotected Mode at startup.\" If this option was enabled for your system, untick the box, click \"OK\" to close the preferences window, completely exit out of Acrobat, and re-launch the application. </p> <p>Yubico Documentation: Yubikeys for Digital Signature in Adobe Acrobat Reader on Windows using PKCS#11</p> <p></p> <p><sup>Disable \"Protected Mode\" and restart Adobe Acrobat</sup></p>"},{"location":"scripts/yubikey/yk-piv/#add-a-pkcs11-module","title":"Add a PKCS#11 Module","text":"<p>This step may or may not be required any longer. Truthfully, I don't know if this is unique to Apple Silicon or macOS in general, so test this for yourself to confirm whether or not it's even needed. </p> <p>On my system, macOS appears to automatically read from my Yubikey's PIV application and pull my Slot 9A and 9C certificates into KeyChain automatically. I say \"appears\" because while Adobe recognizes the keys and they appear under \"Keychain Digital IDs\" only when my Yubikey is connected, I cannot locate the keys in KeyChain Access. </p> <p>If your system does not automatically detect the certificates on your Yubikey, return to Adobe Preferences &gt; Signatures, and click the \"More\" button under \"Identities &amp; Trusted Certificates.\"  </p> <p></p> <p></p> <p>Within the \"Digital ID and Trusted Certificate Settings\" window, expand \"Digital IDs\" from he left navigation menu if not already expanded, then click \"PKCS#11 Modules and Tokans.\"  Select \"Attach Module\" from the top of the window, and enter the path to your Yubikey PKCS#11 module.(You must have Yubikey Manager / <code>ykman</code> installed in order for the module to exist at the locations specified.)</p> <p></p> <p></p> <p>Possible paths for the Yubikey PKCS#11 library:</p> <ul> <li>Apple Silicon:  <code>/opt/homebrew/lib/libykcs11.dylib</code></li> <li>Intel Apple: <code>/usr/local/lib/libykcs11.dylib</code></li> <li>Windows: <code>C:\\Program Files (x86)\\Yubico\\Yubico PIV Tool\\bin\\libykcs11.dll</code> or <code>C:\\Program Files\\Yubico\\Yubico PIV Tool\\bin\\libykcs11.dll</code></li> </ul> <p>After the module is added, click the \"Login\" button at the top of the window. You will be prompted to enter your Yubikey PIV PIN. If provided successfully, a list of certificates loaded to your Yubikey will appear on-screen. </p>"},{"location":"scripts/yubikey/yk-piv/#certificate-settings","title":"Certificate Settings","text":"<p>If you used the same Key Usage and Extended Key Usage values that I used, and loaded both keys to your Yubikey, you'll see both keys in the list. They may also both appear the same -- same name, same issuer, etc. </p> <p>Select one of the keys and click the \"Certificate Details\" button at the top of the window. The \"Certificate Viewer\" window will appear, and should be defaulted to the \"Summary\" tab. Look under \"Intended Usage\" near the center of this window -- if you see \"Code Signing\" and \"Acrobat Authentic Documents,\" you've selected the correct key. </p> <p>Swith to the \"Details\" tab and scroll through the list of certificate data until you see \"Serial number.\" Take note of this value, because this is how you can easily identify and differentiate your signing key from your authentication key. </p> <p>Click \"OK\" to close the Certificate Viewer and make sure you've still got the correct certificate selected. Click the \"Usage Options\" button at the top of the window, and select \"Use for Signing,\" and again for \"Use for Certifying.\"  A blue ribbon icon will appear to the left of the certificate name. </p> <p>By doing this, when you select the options to either sign or certify documents in the future, Adobe will prompt you to choose between the two certificates saved to your Yubikey. Setting the \"use for\" options will cause Adobe to default to correct certificate automatically. You can always verify and confirm this by clicking the \"View Details\" button beside the certificate and checking the \"intended usage\" values for \"Code Signing\" and \"Acrobat Authentic Documents.\"</p> <p>SSL.com Documentation: Configuring Your Business Identity Document SIgning Certificates and Yubikey with Adobe Acrobat on macOS</p>"},{"location":"scripts/yubikey/yk-piv/#add-a-signature-image","title":"Add A Signature Image","text":"<p>To customize the appearance of your signatures and certifications, head back to Adobe Preferences &gt; Signatures, but this time hit the button under \"Creation &amp; Appearance.\"</p> <p></p> <p></p> <p>In the \"Creation and Appearance Preferences\" window, leave everything as it is and click the \"New\" button under the \"Appearances\" section near the bottom. Give your signature a friendly title, set the \"Configure Text\" options according to your preferences, and in the \"Configure Graphic\" section, select \"imported graphic\" and click the \"file\" button. </p> <p></p> <p></p> <p>You can create mulitiple appearances to fit your needs -- for example, you could have one version that was your full signature, and another variant that included your initials only. </p>"},{"location":"scripts/yubikey/yk-piv/#sign-or-certify","title":"Sign or Certify","text":"<p>To begin the process of signing or certifying a document, start with the document open in Adobe Acrobat, select \"All Tools\" from the top left corner of the screen, then look for the \"View More\" button near the bottom of the list on the left side of the screen.</p> <p>In the expanded list, you're looking for the option that says \"Use a certificate.\"  It will be an aqua-colored icon of an ink pen nib. </p> <p>You'll be presented with five options -- four of which will be available if the document you're looking at has not been signed previously:</p> <ul> <li>Digitally sign</li> <li>Timestamp</li> <li>Certify (visible signature)</li> <li>Certify (invisible signature)</li> </ul> <p>The options are as they sound -- digitally signing is only providing an authenticated signature. The idea is that this signature proves that you were the one who did it.  Certify has the effect of \"hashing\" the document so that your recipient can compute the hash themselves to check and confirm that the document hasn't been tampered with.  In fact, this is what the grayed-out option on your screen is -- \"Validate all signatures.\" </p> <p>With Certify, you have two options -- to include a visible signature, or not.  Most often, you're going to be using either the Digitally Sign or Certify with Visible Signature options. </p> <p>Select the option to \"Digitally sign\" the document. Adobe will throw a pop-up notification instructing you to \"click and drag to draw the area where you would like the signature to appear.\"  This behavior is the same for both Digitally Sign and Certify with Visibile Signature.  Click \"OK\" and find an open area of the screen to click-and-drag a moderately large horizontal rectangle. </p> <p>As soon as you release the mouse, Adobe will display the \"Sign with a Digital ID\" window. If you specified which certificate should be used for Signing and Certifying, the default selection should be your Slot 9c certificate. Double-check this by selecting the \"View Details\" button beside the certificate name. </p> <p>Select the \"Continue\" button to move onto the appearance settings for your signature. By default, Adobe will pre-select \"Standard Text.\" If you uploaded a signature image earlier, you can select the dropdown box at the top of this window to select your full signature or initial-only variants. </p> <p>If you chose \"Digitally sign\":</p> <ul> <li>You will have the additional option of \"Locking\" the document after signing, plus any other optional settings you might have enabled within the appearance settings, such as adding a signature reason or location. </li> </ul> <p>If you chose \"Certify with Visible Signature\":</p> <ul> <li>In addition to any optional settings you enabled, you'll also see options for \"Permitted Actions After Certifying\" and \"Review document content that may affect signing.\" <ul> <li>Permitted Actions allow you to determine whether anyone is allowed to make any kind of changes after you've certified the document. You can optionally allow other people to fill out any forms in the document and provide their own signatures, or also allow them to make annotations on the document. </li> <li>The \"Review\" button will show you a list of all of the properties of the PDF document that could create problems for certifying the document. These are items that could cause a document to be rendered \"invalid\" due to having changed AFTER you certified it. Review these carefully before taking action from the prompts on-screen. </li> </ul> </li> </ul> <p>Finally, when you click \"OK\" to create your signature, Adobe will prompt you to select where you want to save the signed version of your document. This is to allow you you to save your signed document as a new file without overwriting the original document you were working from. </p> <p>The final prompt may be a PIN request popup from Adobe looking for you to enter your Yubikey PIV PIN in order to complete the signature. </p> <p>SSL.com Documentation: Digitally Sign a PDF in Adobe Acrobat Reader using a Yubikey</p>"},{"location":"scripts/yubikey/yk-piv/#at-least-one-signature-has-problems","title":"At least one signature has problems","text":"<p>If you went the route of using your own custom PKI instead of paying for an Adobe ATL certificate, Adobe will display a caution / warning prompt at the top of your signed document. The reason for this is because Adobe doesn't trust your custom Root CA / Intermediate CA. </p> <p>Select the \"Signature Panel\" button to open the details dialog for the signature warning from Adobe. Adobe will provide a breakdown of what it sees as potentially problematic about the signature and will include a button to view the certificate details. </p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"scripts/yubikey/yk-piv/#add-trusted-certificates","title":"Add Trusted Certificates","text":"<p>There are two routes you can take to resolve this. </p> <ul> <li>Option 1: Select \"Add to Trusted Certificates\" from the \"Trust\" tab. </li> <li>Option 2: Add the Root CA / Intermediate CA to the Trusted Certificates list.</li> </ul> <p>Option 2 is the better approach, assuming your recipient indeed trusts the certificates you or your company are issuing. If you try to use the \"Add to Trusted Certificates\" button on the Trust tab, Adobe will display a warning that adding certificates directly from a document is unsafe. </p> <p>This is where its helpful to have the Root CA and Intermediate CA available directly from your Yubikey. </p> <pre><code># Export a copy of the Root CA\nykman piv certificates export 82 my-root-ca.crt\n\n# Export a copy of the Intermediate CA\nykman piv certificates export 83 my-intermediate-ca.crt\n</code></pre> <p>With the two <code>.crt</code> files saved, navigate back to Adobe Preferences &gt; Signatures &gt; Identities &amp; Trusted Certificates. Select \"Trusted Certificates\" from the left navigation menu, then seelct \"Import.\" </p> <p></p> <p></p> <p>In the dialog window that appears, select \"Browse,\" then navigate to the <code>.crt</code> file you just exported from your Yubikey for the Root CA Certificate. When selected, click the name of the certificate in the top box on this window to populate the \"Certificates\" list in the lower half. </p> <p>Select the certificate itself in the lower box, then click the \"Trust\" button directly to the right.</p> <p></p> <p></p> <p>From the \"Import Contact Settings\" box, select the checkboxes that represent the level of trust you have for the certificate. To mark the certificate as trusted, at a minimum it requries the \"Use this certificate as a trusted root\" selection. But in addition, there are other options you can enable / toggle depending on the level of trust you have. When you've finished making your selections, click \"OK\" in the bottom right corner, then click \"Import\" on the previous dialog box. </p> <p></p> <p></p> <p>If successful, you should see a \"Import Complete\" popup box with an \"OK\" button. Click to dismiss. Repeat the import process to import the Intermediate CA certificate as well.</p> <p>Finally, re-open the document you signed previously. A notification bar across the top of the document should now reflect \"Signed and all signatures are valid.\" Click into the \"Signature Panel\" for details.</p> <p></p> <p></p> <p></p> <p></p>"}]}